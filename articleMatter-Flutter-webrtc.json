{"info":{"title":"[Note] WebRTC 與他的名詞們","fileName":"webrtc","description":"WebRTC 不只 APP 可以使用，同樣 Web 也可以實作唷！主要介紹 WebRTC 與之相關的名詞和連接流程。","createdAt":"2023-05-05T00:00:00.000Z","updatedAt":"2023-05-05T00:00:00.000Z","tags":["Flutter","WebRTC"]},"content":"<h6>tags: <code>Flutter</code>、<code>WebRTC</code></h6>\n<h1 id=\"[Note] WebRTC 與他的名詞們\" title=\"[Note] WebRTC 與他的名詞們\">[Note] WebRTC 與他的名詞們</h1>\n<h2 id=\"前言\" title=\"前言\"><a href=\"#前言\">前言</a></h2>\n<p>推薦 <a  href=\"https://www.youtube.com/watch?v=FExZvpVvYxA\" target=\"_blank\" rel=\"noreferrer noopener\">WebRTC Crash Course</a> 這部影片，把 WebRTC 會出現的名詞解釋滿清楚的，雖然後面 demo 是 web 的，但不影響概念理解。</p>\n<p>另外一部是 2013 Google I/O 的 <a  href=\"https://www.youtube.com/watch?v=p2HzZkd2A40&amp;t=1272s\" target=\"_blank\" rel=\"noreferrer noopener\">Real-time communication with WebRTC</a> 也滿推的，時間有點久遠，但觀念是共通不變的，筆記中有些圖也是參考這部影片畫的。</p>\n<blockquote>\n<p>註: 文章內大部分圖片來源自 <a  href=\"https://www.youtube.com/watch?v=FExZvpVvYxA\" target=\"_blank\" rel=\"noreferrer noopener\">WebRTC Crash Course</a></p>\n</blockquote>\n<h2 id=\"WebRTC\" title=\"WebRTC\"><a href=\"#WebRTC\">WebRTC</a></h2>\n<p>WebRTC（Web Real-Time Communication）是指通過 API 建立點對點的連線，並可交換彼此的語音、影像和數據通信的技術，應用於視訊會議、直播和即時通訊。</p>\n<ul>\n<li><strong>即時</strong></li>\n<li><strong>點對點</strong> - 提高傳送效率和低延遲(因為不用透過 server 在中間溝通)</li>\n<li><strong>多平台</strong> - Browsers、Mobile</li>\n</ul>\n<br/>\n<details class='spoiler'><summary>延伸問題：WebSockets v.s. WebRTC ？</summary>\n<p><img src=\"https://hackmd.io/_uploads/rydC0YIrh.png\" alt=\"WebSockets v.s. WebRTC\" /></p>\n<h4>WebSockets</h4>\n<ul>\n<li>透過 server 實現即時溝通，資料會通過 server 傳遞給對方</li>\n<li>因透過 server 傳遞資料，會間接增加些許延遲時間(特別是影片和音源類型特別有感）</li>\n</ul>\n<h4>WebRTC</h4>\n<ul>\n<li>透過 browsers/devices 實現點對點即時溝通，資料可以直接傳遞給對方</li>\n<li>使用 <a  href=\"https://nordvpn.com/zh-tw/blog/tcp-udp-bijiao/\" target=\"_blank\" rel=\"noreferrer noopener\">UDP</a> 傳輸協定，速度較快，</li>\n</ul>\n<h4>Q1. <code>WebSockets</code> 和 <code>WebRTC</code> 可以同時使用嗎？</h4>\n<blockquote>\n<p>可以，這兩者其實是互補的技術，因為 WebRTC 有一些局限性：<br><br />\n(1) WebRTC 使用 UDP 傳輸，但 <strong>UDP 本身是一種不可靠的協議，資料傳輸過程中可能會丟失或損壞</strong>，所以通常不會用來傳輸重要資料，如：重要文件，因為只要丟失幾個 byte，檔案就直接損壞了。然而，對於傳輸影片或音訊等媒體資料，一些丟失（掉幀）並不會對觀看或聆聽體驗產生明顯影響，因此可以接受。<br><br />\n(2) WebRTC 僅提供點對點通訊功能，無法自行建立連接，因此需要進行信令（Signaling）來交換連接資訊，以得知要與誰建立連接<br/><br />\nWebSockets 可以作為 Signaling Server 的角色，解決以上兩個限制。<br />\n第一， WebSockets 使用 TCP 傳輸，能確保信令資料（如 SDP）能夠準確、完整地傳送到對等方。<br />\n第二，提供了信令機制，解決了 WebRTC 無法自行建立連接的問題。</p>\n</blockquote>\n</details>\n<h2 id=\"Peer-To-Peer Connection (P2P)\" title=\"Peer-To-Peer Connection (P2P)\"><a href=\"#Peer-To-Peer Connection (P2P)\">Peer-To-Peer Connection (P2P)</a></h2>\n<p><img src=\"https://hackmd.io/_uploads/S1bsx5wN2.png\" alt=\"P2P\" /></p>\n<p>P2P（Peer-to-Peer）是指直接將兩個或多個計算機連接起來進行數據交換和共享，而<strong>不需要通過中央服務器進行中轉</strong>。在 P2P 模式下，每個計算機都可以充當客戶端和服務器。</p>\n<ul>\n<li><strong>分散式架構</strong>：通過多個計算機之間的直接連接進行數據交換和共享，有效減輕服務器的負擔</li>\n<li><strong>高效性</strong>：利用多個計算機的資源進行數據傳輸和處理，可以提高數據傳輸的速度和效率</li>\n<li><strong>可靠性</strong>：由於數據通過多個節點進行傳輸，因此即使某些節點失敗或斷開連接，也不會對整個系統造成影響</li>\n</ul>\n<h2 id=\"NAT\" title=\"NAT\"><a href=\"#NAT\">NAT</a></h2>\n<p>NAT（Network Address Translation）是一種常見的網絡協議，<strong>將私有網絡中的 IP 地址轉換為公共網絡中的 IP 地址</strong>，實現兩個網絡之間的通訊。</p>\n<p>NAT 協議通常由路由器、防火墻等網絡設備實現，它可以將多個設備的內部私有 IP 地址映射到一個公共 IP 地址上，從而實現多個設備通過一個公共 IP 地址訪問互聯網。</p>\n<p><img src=\"https://hackmd.io/_uploads/S1zxXqvEn.png\" alt=\"\" /></p>\n<p><img src=\"https://hackmd.io/_uploads/B1jMBqwVn.png\" alt=\"\" /></p>\n<p><strong>優點：</strong></p>\n<ol>\n<li>減少公共 IP 地址的使用 (解決 IPv4 位址不足)</li>\n<li>提高網絡的安全性</li>\n</ol>\n<p><strong>缺點：</strong></p>\n<ol>\n<li>影響對等連接</li>\n<li>影響網絡性能</li>\n</ol>\n<h3>NAT Translations Method</h3>\n<ol>\n<li>One to One NAT (Full- cone NAT)</li>\n<li>Address restricted NAT</li>\n<li>Port reststricted NAT</li>\n<li>Symmetric NAT</li>\n</ol>\n<div class=\"info\">\n<p>💡<strong>補充：</strong><br />\n如果遇到 <code>Symmetric NAT</code>，會對 WebRTC 建立 P2P 連接帶來一定的難度，因為 P2P 連接需要直接通過公共 IP 地址進行通訊，需要搭配使用 TURN 服務器進行中繼，再將數據通過 TURN 服務器進行轉發。</p>\n<blockquote>\n<p>前三種 NAT 內部同一內部位址都對應到同一個外部位址，但 Symmetric NAT 內是每一內部位址對應到不同的外部位址。<br />\n:::</p>\n</blockquote>\n<details class='spoiler'><summary>延伸問題：為什麼需要 `STUN` 和 `TURN`？</summary>\n<p><strong>理想情況：</strong><br />\nA 和 B 都有一個 Public IP，透過雲端交換彼此 IP 訊息後，直接建立 P2P 連線。<br />\n<img src=\"https://hackmd.io/_uploads/BJBZdNHBh.png\" alt=\"理想情況 webRTC\" /></p>\n<p><strong>現實情況：</strong><br />\nNAT 會分發所謂的 Privacy IP，這些 Privacy IP 無法用於建立 P2P 連接，所以需要透過 STUN + TURN 的技術，穿透 NAT 這座高牆。<br />\n<img src=\"https://hackmd.io/_uploads/ryndYNrB3.png\" alt=\"現實情況 webRTC\" /></p>\n</details>\n</div>\n<h2 id=\"STUN 服務器\" title=\"STUN 服務器\"><a href=\"#STUN 服務器\">STUN 服務器</a></h2>\n<p><img src=\"https://hackmd.io/_uploads/HyeA35DN2.png\" alt=\"\" /></p>\n<p>STUN（Simple Traversal of UDP through NATs）服務器用於獲取用戶的公共 IP 地址和端口號。</p>\n<ul>\n<li>取得 public IP 地址</li>\n<li>對於 <code>Symmetric NAT</code> 無效</li>\n</ul>\n<p>通過比較 STUN 服務器提供的 IP 和你自己電腦的地址，就可以判斷是否需要穿越 NAT，市面上也有一些現成的 <a  href=\"https://gist.github.com/mondain/b0ec1cf5f60ae726202e\" target=\"_blank\" rel=\"noreferrer noopener\">STUN 服務器</a>可以使用。</p>\n<h2 id=\"TURN 服務器\" title=\"TURN 服務器\"><a href=\"#TURN 服務器\">TURN 服務器</a></h2>\n<p><img src=\"https://hackmd.io/_uploads/SkQYCcw43.png\" alt=\"\" /></p>\n<p>TURN（Traversal Using Relays around NAT）可以作為<strong>中繼站</strong>，將通信流量轉發到另一端。</p>\n<ul>\n<li>P2P 連接失敗時，提供雲端備援</li>\n<li>確保任何環境條件下，都可以正常連接</li>\n</ul>\n<p>優先使用 STUN 服務器，如遇到 <code>Symmetric NAT</code> 這類型的，才會使用 TURN 服務器，因為 TURN 服務器會增加網路流量和延遲，選擇的過程會藉由 ICE 的技術來實現。</p>\n<h2 id=\"ICE - 交互式連接建立\" title=\"ICE - 交互式連接建立\"><a href=\"#ICE - 交互式連接建立\">ICE - 交互式連接建立</a></h2>\n<p>ICE（Interactive Connectivity Establishment）通過對 STUN 和 TURN 發出請求，收集多個 ICE Candidates，並嘗試出各種可能性，<strong>找出 P2P 連線的最佳路徑</strong>，是實現 NAT 穿越方式之一。</p>\n<ul>\n<li>收集的 ICE Candidates (addresses)</li>\n<li>找出最佳連接路徑</li>\n</ul>\n<div class=\"info\">\n<p>💡<strong>補充：</strong></p>\n<p><strong>ICE Candidate</strong> 是建立對等連接的網路地址，包含 IP 地址和端口號，該 IP 地址可以是公共 IP、本地 IP 或中繼伺服器的地址。</p>\n</div>\n<h2 id=\"SDP - 會話描述協議\" title=\"SDP - 會話描述協議\"><a href=\"#SDP - 會話描述協議\">SDP - 會話描述協議</a></h2>\n<p><img src=\"https://hackmd.io/_uploads/HJrTGivNn.png\" alt=\"\" /></p>\n<p>SDP 會話描述協議（Session Description Protocol）描述通訊的基本信息（IP 地址、端口號、加密通信的公鑰信息等）、影像和音頻流信息、數據通道等信息，是一份(字符串)文件。</p>\n<p>通過 SDP，兩端的設備，可以確定媒體流的格式、傳輸參數和連接信息等，以確保成功建立對應的多媒體通信。</p>\n<h2 id=\"Signaling Server - 信令服務器\" title=\"Signaling Server - 信令服務器\"><a href=\"#Signaling Server - 信令服務器\">Signaling Server - 信令服務器</a></h2>\n<p>建立 P2P 連線前，因為客戶端彼此不知道對方，因此需要透過<strong>信令服務器（Signaling Server）進行中介</strong>，交換客戶端的會話描述協議（SDP）和 ICE Candidates 等。</p>\n<blockquote>\n<p>Signaling Server 可以想像就是幫兩邊 Client 傳遞兩種主要訊息：<br />\n(1) <code>連接什麼</code> 和 <code>如何連接</code> - SDP<br />\n(2) <code>使用哪條路徑連接</code> - ICE Candidates</p>\n</blockquote>\n<p><img src=\"https://hackmd.io/_uploads/rJdH1OAH3.png\" alt=\"Signaling step 1\" /><br />\n<img src=\"https://hackmd.io/_uploads/r1PqkORB2.png\" alt=\"Signaling step 2\" /><br />\n<img src=\"https://hackmd.io/_uploads/rySaJ_RHh.png\" alt=\"Signaling step 2\" /></p>\n<p>信令服務器可以是自行搭建的伺服器或第三方開發平台，例如 Firebase 等</p>\n<h2 id=\"WebRTC 連接流程\" title=\"WebRTC 連接流程\"><a href=\"#WebRTC 連接流程\">WebRTC 連接流程</a></h2>\n<ol>\n<li>A 想要與 B 建立連接</li>\n<li>A 找出所有可能的公開連接方式</li>\n<li>B 找出所有可能的公開連接方式</li>\n<li>A 和 B 通過其他方式（e.g. WebSockets/HTTP fetch）傳遞會話信息</li>\n<li>A 通過最優的路徑連接到 B</li>\n<li>A 和 B 建立 P2P 連線</li>\n</ol>\n<h2 id=\"參考資料\" title=\"參考資料\"><a href=\"#參考資料\">參考資料</a></h2>\n<ul>\n<li><a  href=\"https://www.youtube.com/watch?v=FExZvpVvYxA\" target=\"_blank\" rel=\"noreferrer noopener\">WebRTC Crash Course</a></li>\n<li><a  href=\"https://zenn.dev/faucon/articles/085ab8e420b432\" target=\"_blank\" rel=\"noreferrer noopener\">【Flutter✖️WebRTC】WebRTC について学んだことのまとめ</a></li>\n<li><a  href=\"https://www.youtube.com/watch?v=IFPFNiFozdw&amp;t=58s\" target=\"_blank\" rel=\"noreferrer noopener\">WebRTC for flutter Developer</a></li>\n<li><a  href=\"https://www.youtube.com/watch?v=p2HzZkd2A40&amp;t=1272s\" target=\"_blank\" rel=\"noreferrer noopener\">Real-time communication with WebRTC: Google I/O 2013</a></li>\n<li><a  href=\"https://www.youtube.com/watch?v=8I2axE6j204&amp;t=632s\" target=\"_blank\" rel=\"noreferrer noopener\">How Does WebRTC Work? | Crash Course</a></li>\n<li><a  href=\"https://ably.com/topic/webrtc-vs-websocket\" target=\"_blank\" rel=\"noreferrer noopener\">WebRTC vs. WebSocket: Key differences and which to use</a></li>\n</ul>\n","toc":{"title":"[Note] WebRTC 與他的名詞們","subtitles":["前言","WebRTC","Peer-To-Peer Connection (P2P)","NAT","STUN 服務器","TURN 服務器","ICE - 交互式連接建立","SDP - 會話描述協議","Signaling Server - 信令服務器","WebRTC 連接流程","參考資料"]}}