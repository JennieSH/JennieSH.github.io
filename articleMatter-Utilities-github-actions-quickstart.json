{"info":{"title":"GitHub Actions - Creating My First Workflow (CI/CD)","fileName":"github-actions-quickstart","description":"能躺著就不要坐著，能坐著就不要站著，能一個指令解決的，就不要用兩個！利用 GitHub Actions 打造專案的 CI/CD。","createdAt":"2021-11-19T00:00:00.000Z","updatedAt":"2021-11-19T00:00:00.000Z","tags":["GitHub","GitHub Action","GitHub Page","CI/CD","DevOps"]},"content":"<h1 id=\"GitHub Actions - Creating My First Workflow (CI/CD)\" title=\"GitHub Actions - Creating My First Workflow (CI/CD)\">GitHub Actions - Creating My First Workflow (CI/CD)</h1>\n<p><code>CI/CD</code> 幾乎是公司每個專案的標配了，但因為都是初期就要設定完成，所以基本上接手的專案都已經有設定檔，沒什麼機會自己寫，藉由這次架部落格的機會，練習使用 <code>GitHub Action</code>，為自己的專案設定自動化流程。</p>\n<p>條列出這次想透過 <code>GitHub Action</code> 解決的需求，文章中會紀錄如何寫出對應的 Workflow 設定檔。</p>\n<p><strong>流程主要需求：</strong></p>\n<ol>\n<li><code>git push</code> 到主分支時自動測試</li>\n<li>測試成功時，產生靜態檔案</li>\n<li>使用靜態檔案自動部署 <code>GitHub Page</code></li>\n</ol>\n<p><img src=\"https://i.imgur.com/ueoi8QH.png\" alt=\"Github Actions flow\" /></p>\n<h2 id=\"What is CI/CD ?\" title=\"What is CI/CD ?\"><a href=\"#What is CI/CD ?\">What is CI/CD ?</a></h2>\n<p><code>CI/CD</code> 分別代表持續整合 (<code>Continuous Integration</code>) 和持續部署 (<code>Continuous Deployment</code>)，簡單來說就是將程式的流程自動化，可以降低人員操作疏失的風險和減少手動操作的重複步驟，常見有 <a  href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noreferrer noopener\"><code>Travis CI</code></a>、<a  href=\"https://www.jenkins.io/\" target=\"_blank\" rel=\"noreferrer noopener\"><code>Jenkins</code></a>、<a  href=\"https://aws.amazon.com/codepipeline/\" target=\"_blank\" rel=\"noreferrer noopener\"><code>AWS CodePipeline</code></a> 等。</p>\n<h3>- 持續整合 (<code>Continuous Integration</code>)</h3>\n<p>當程式被合併到分支時，會開始自動化 <code>build</code>、自動化測試，確保此次提交的程式異動都有通過測試，也可以指定環境版本，避免不同電腦的開發環境不同，而造成功能異常。</p>\n<h3>- 持續部署 (<code>Continuous Deployment</code>)</h3>\n<p>在 CI 流程過後，只要不失敗，程式碼屬於可被部署的狀態，接著就會自動化執行部署的動作。</p>\n<h2 id=\"What is Github Actions ?\" title=\"What is Github Actions ?\"><a href=\"#What is Github Actions ?\">What is Github Actions ?</a></h2>\n<p>透過在 <code>repository</code> 內配置檔案，能夠彈性客製各種自動化的工作流程，當然也包括 <code>CI/CD</code>，而且在 <code>GitHub</code> 內就可以看到即時的自動化結果和報告，不需要透過第三方工具。</p>\n<h2 id=\"如何添加設定檔？\" title=\"如何添加設定檔？\"><a href=\"#如何添加設定檔？\">如何添加設定檔？</a></h2>\n<p><code>Github Actions</code> 設定文件會放在根目錄的 <code>.github/workflows</code> 下，檔名可自取，內容需要以 YAML 語法來撰寫，可以有一個以上的 <code>workflow</code> 設定檔。</p>\n<pre class=\"hljs\"><code>── .github\n    └── workflows\n        ├── cicd.yml\n        └── slack-notification.yml\n</code></pre>\n<h2 id=\"基本概念\" title=\"基本概念\"><a href=\"#基本概念\">基本概念</a></h2>\n<p>設定檔使用到的 <code>Workflow</code>、<code>Job</code>、<code>Step</code>、<code>Action</code>，是存在從屬關係的，需要先稍微理解這塊。</p>\n<p><img src=\"https://i.imgur.com/dqGfdz7.png\" alt=\"Github Actions Elements\" /></p>\n<h3>- Workflow (工作流程)</h3>\n<p>指一個完整的自動化過程，會涵蓋一個以上的 <code>Job</code></p>\n<ul>\n<li><strong><code>name</code></strong> (optional)： 在 <code>Actions</code> 的 <code>Workflows</code> 下，會顯示設定的 <code>Workflow name</code>，預設為檔名</li>\n<li><strong><code>on</code></strong> ：指定特定的 <code>event</code> 來觸發 <code>Workflow</code></li>\n</ul>\n<p><img src=\"https://i.imgur.com/xvEJKHI.png\" alt=\"Workflow-name\" /></p>\n<pre class=\"hljs\"><code><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-comment\"># 在對 main branch 發 PR 或 git push 時，會觸發 workflow</span>\n  <span class=\"hljs-attr\">push:</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span>\n  <span class=\"hljs-attr\">pull_request:</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span>\n\n  <span class=\"hljs-comment\"># 每天在 5:30 和 17:30 UTC，會觸發 workflow</span>\n  <span class=\"hljs-attr\">schedule:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">cron:</span>  <span class=\"hljs-string\">&#x27;30 5,17 * * *&#x27;</span>\n\n  <span class=\"hljs-comment\"># git push 至啟用的 GitHub Pages 的分支（page_build 事件)，會觸發 workflow</span>\n  <span class=\"hljs-attr\">page_build:</span>\n\n</code></pre>\n<div class=\"info\">\n<p>🔗 <strong>補充</strong></p>\n<p>更多 <code>events</code> 可以參考 <a  href=\"https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows\" target=\"_blank\" rel=\"noreferrer noopener\">Events that trigger workflows</a></p>\n</div>\n<div class=\"warning\">\n<p>❗ <strong>注意</strong></p>\n<p><code>Workflow</code> 設定檔案 (<code>.yml</code>) 需要存在於 <code>default branch</code>，才會觸發整個自動化流程。</p>\n</div>\n<h3>- Job（工作項目 / 任務）</h3>\n<p><code>Workflow</code> 可以包括一個或多個 <code>Job</code>，<code>Job</code> 預設是<strong>同時</strong>執行。</p>\n<ul>\n<li><a  href=\"https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idruns-on\" target=\"_blank\" rel=\"noreferrer noopener\"><strong><code>runs-on</code></strong></a>：指定運行的虛擬機環境 (<code>Runners</code>)</li>\n<li><a  href=\"https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idneeds\" target=\"_blank\" rel=\"noreferrer noopener\"><strong><code>needs</code></strong></a> : 用於設定有依賴項的 <code>Job</code>，如果某個 <code>Job</code> 作業失敗，則所有需要它的 <code>Job</code> 都會被跳過，除非設置<a  href=\"https://docs.github.com/cn/actions/learn-github-actions/expressions#job-status-check-functions\" target=\"_blank\" rel=\"noreferrer noopener\">條件表達式</a>。</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\"># 要求按照順序且相關 Job 要執行成功</span>\n<span class=\"hljs-comment\"># 執行順序： job1 =&gt; job2 =&gt; job3</span>\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">job1:</span>\n  <span class=\"hljs-attr\">job2:</span>\n    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">job1</span>\n  <span class=\"hljs-attr\">job3:</span>\n    <span class=\"hljs-attr\">needs:</span> [<span class=\"hljs-string\">job1</span>, <span class=\"hljs-string\">job2</span>]\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\"># 只要求按照順序</span>\n<span class=\"hljs-comment\"># job3 使用 always() 條件表達式，因此他始終在 job1 和 job2 完成後執行，但不管它們是否成功。</span>\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">job1:</span>\n  <span class=\"hljs-attr\">job2:</span>\n    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">job1</span>\n  <span class=\"hljs-attr\">job3:</span>\n    <span class=\"hljs-attr\">if:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">always()</span> <span class=\"hljs-string\">}}</span>\n    <span class=\"hljs-attr\">needs:</span> [<span class=\"hljs-string\">job1</span>, <span class=\"hljs-string\">job2</span>]\n</code></pre>\n<h3>- Step（步驟）</h3>\n<p><code>Job</code> 可以包括一個以上的 <code>Step</code>，步驟會<strong>依序執行</strong>，只要其中一個步驟失敗，後面步驟皆不會被執行。</p>\n<ul>\n<li><a  href=\"\" target=\"_blank\" rel=\"noreferrer noopener\"><strong><code>run</code></strong></a>：用於在虛擬機使用 <code>shell comman</code></li>\n<li><a  href=\"\" target=\"_blank\" rel=\"noreferrer noopener\"><strong><code>uses</code></strong></a>：用於使用別人寫好的 <code>Action</code> 檔案</li>\n</ul>\n<p><code>Step</code> 因為處於同一個虛擬機環境，所以在同一個 <code>Job</code> 下的步驟，彼此可以共享 data。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-comment\"># job name</span>\n  <span class=\"hljs-attr\">github-action-example:</span>\n\n    <span class=\"hljs-comment\"># job 運行的虛擬機</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-comment\"># 使用別人寫好的 action - actions/checkout@v2</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span>\n\n      <span class=\"hljs-comment\"># 設定 node 環境並指定版本</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v2</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">node-version:</span> <span class=\"hljs-string\">&#x27;14&#x27;</span>\n\n      <span class=\"hljs-comment\"># 執行指令</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">install</span>\n</code></pre>\n<h3>- Action (動作)</h3>\n<p><code>Step</code> 可以依序執行一個以上的 <code>Action</code>。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">workflow-command-job:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">disable</span> <span class=\"hljs-string\">workflow</span> <span class=\"hljs-string\">commands</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|\n          echo &#x27;::warning:: this is a warning&#x27;\n          echo &quot;::stop-commands::`echo -n ${{ github.token }} | sha256sum | head -c 64`&quot;\n          echo &#x27;::warning:: this will NOT be a warning&#x27;\n          echo &quot;::`echo -n ${{ github.token }} | sha256sum | head -c 64`::&quot;\n          echo &#x27;::warning:: this is a warning again&#x27;\n</span></code></pre>\n<div class=\"info\">\n<p>💡 <strong>補充</strong></p>\n<p>GitHub 有提供 <a  href=\"https://github.com/marketplace\" target=\"_blank\" rel=\"noreferrer noopener\">marketplace</a>，裡面存放了許多別人寫好的 <code>Action</code>，相當於 <code>Action</code> 版的 <code>GitHub</code>，把一些常用的步驟指令都打包好了，可以直接 <code>uses</code> 做使用。</p>\n</div>\n<h2 id=\"實作\" title=\"實作\"><a href=\"#實作\">實作</a></h2>\n<p>再回憶一下這次自動化想包含的需求：</p>\n<ol>\n<li><code>git push</code> 到主分支時自動測試</li>\n<li>測試成功時，產生靜態檔案</li>\n<li>使用靜態檔案自動部署 <code>GitHub Page</code></li>\n</ol>\n<p>&lt;br/&gt;</p>\n<p>轉成 <code>Workflow</code> 設定檔的完整原始碼：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">push:</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master</span>\n    <span class=\"hljs-attr\">paths-ignore:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&#x27;README.md&#x27;</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">deploy-github-page:</span>\n    <span class=\"hljs-comment\"># The type of runner that the job will run on</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n\n    <span class=\"hljs-comment\"># Steps represent a sequence of tasks that will be executed as part of the job</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Setup</span> <span class=\"hljs-string\">node</span> <span class=\"hljs-string\">env</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v2</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Install</span> <span class=\"hljs-string\">dependencies</span> <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">Yarn</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">yarn</span> <span class=\"hljs-string\">--frozen-lockfile</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Run</span> <span class=\"hljs-string\">test</span> <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">Jest</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">yarn</span> <span class=\"hljs-string\">test</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Generate</span> <span class=\"hljs-string\">Static</span> <span class=\"hljs-string\">Site</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">yarn</span> <span class=\"hljs-string\">generate</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">JamesIves/github-pages-deploy-action@4.1.5</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">gh-pages</span> <span class=\"hljs-comment\"># The branch the action should deploy to.</span>\n          <span class=\"hljs-attr\">folder:</span> <span class=\"hljs-string\">dist</span> <span class=\"hljs-comment\"># The folder the action should deploy.</span>\n</code></pre>\n<h3>Step 1. Workflow</h3>\n<ol>\n<li><code>git push origin master</code> 會觸發 <code>Workflow</code></li>\n<li>使用 <code>paths-ignore</code> 過濾特定路徑，即如果單獨更改 <code>README.md</code>，即使推到 <code>master</code> 分支，也不會觸發自動化</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\"># Workflow 名字</span>\n<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span>\n\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">push:</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master</span>\n    <span class=\"hljs-attr\">paths-ignore:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&#x27;README.md&#x27;</span>\n</code></pre>\n<h3>Step 2. Job</h3>\n<ol>\n<li>指定虛擬機環境 <code>ubuntu-latest</code></li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-comment\"># Job 名字</span>\n  <span class=\"hljs-attr\">deploy-github-page:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n</code></pre>\n<h3>Step 3. Step &amp; Action</h3>\n<ol>\n<li>\n<p><code>Checkout</code>:<br />\n使用 <a  href=\"https://github.com/marketplace/actions/checkout\" target=\"_blank\" rel=\"noreferrer noopener\"><code>actions/checkout@v2</code></a>，它會下載一份專案程式碼至運行的虛擬機上。</p>\n<p>如果工作流程有涉及使用到專案原始碼，或執行定義在專案上的 script，都是需要使用 <code>checkout action</code>。</p>\n</li>\n<li>\n<p><code>Setup node env</code> + <code>Install dependencies with Yarn</code>：<br />\n使用 <a  href=\"https://github.com/marketplace/actions/setup-node-js-environment\" target=\"_blank\" rel=\"noreferrer noopener\">setup-node@v2</a> 設置 node 環境，並依據 <code>yarn.lock</code> 安裝專案依賴套件 <a  href=\"https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs-or-python\" target=\"_blank\" rel=\"noreferrer noopener\">(npm 可參考這裡)</a></p>\n</li>\n<li>\n<p><code>Run test with Jest</code>：<br />\n使用定義在專案內的 test script</p>\n</li>\n<li>\n<p><code>Generate Static Site</code> + <code>Deploy</code>：<br />\n產生靜態檔案並部署至 Github Page，CD 直接使用 <a  href=\"https://github.com/marketplace/actions/deploy-to-github-pages\" target=\"_blank\" rel=\"noreferrer noopener\">JamesIves/github-pages-deploy-action@4.1.5</a></p>\n</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-attr\">steps:</span>\n     <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span>\n       <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span>\n\n     <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Setup</span> <span class=\"hljs-string\">node</span> <span class=\"hljs-string\">env</span>\n       <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v2</span>\n\n     <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Install</span> <span class=\"hljs-string\">dependencies</span> <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">Yarn</span>\n       <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">yarn</span> <span class=\"hljs-string\">--frozen-lockfile</span>\n\n     <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Run</span> <span class=\"hljs-string\">test</span> <span class=\"hljs-string\">with</span> <span class=\"hljs-string\">Jest</span>\n       <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">yarn</span> <span class=\"hljs-string\">test</span>\n\n     <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Generate</span> <span class=\"hljs-string\">Static</span> <span class=\"hljs-string\">Site</span>\n       <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">yarn</span> <span class=\"hljs-string\">generate</span>\n\n     <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span>\n       <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">JamesIves/github-pages-deploy-action@4.1.5</span>\n       <span class=\"hljs-attr\">with:</span>\n         <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">gh-pages</span> <span class=\"hljs-comment\"># 指定要 deploy 的分支</span>\n         <span class=\"hljs-attr\">folder:</span> <span class=\"hljs-string\">dist</span> <span class=\"hljs-comment\"># 指定要 deploy 的資料夾</span>\n</code></pre>\n<h3>實際測試</h3>\n<h4>✔️ Case: 單元測試成功</h4>\n<p>在 Actions 頁面可以看到整個 Workflow，以及每個步驟的執行狀態，因為單元測試是成功的，後續網站也有順利被部署。</p>\n<p><img src=\"https://i.imgur.com/lKkrg3q.png\" alt=\"run test action\" /></p>\n<p>Repository 的首頁也可以看到成功的綠色小勾勾 ✔️</p>\n<p><img src=\"https://i.imgur.com/MVFcVdV.png\" alt=\"run test home\" /></p>\n<p>&lt;br/&gt;</p>\n<h4>❎ Case: 單元測試失敗</h4>\n<p>接著試試單元測試失敗的情境，可以看到 <code>Run test with Jest</code> 這個步驟失敗後，後續的 <code>Generate Static Site</code> 和 <code>Deploy</code> 直接不執行。</p>\n<p>點開 <code>Run test with Jest</code> 詳細訊息，也可以看到是哪個測試出錯和整個測試報告。</p>\n<p><img src=\"https://i.imgur.com/2jbtqOD.png\" alt=\"fail test\" /></p>\n<p>&lt;br/&gt;</p>\n<div class=\"info\">\n<p>💡 補充</p>\n<p>我在 <code>README.md</code> 有添加 <strong><code>workflow status badge</code></strong>，可以看到 Workflow 的狀態，但它不是即時更新，跑完 Workflow 後，需要再等個幾分鐘。</p>\n<p>支援 <code>query parameters</code>，可以顯示特定 <code>branch</code> 或 <code>event</code> 的 Workflow 狀態，詳細設定可參見<a  href=\"https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/adding-a-workflow-status-badge\" target=\"_blank\" rel=\"noreferrer noopener\">官網</a>。</p>\n<p><img src=\"https://i.imgur.com/No01pI0.png\" alt=\"workflow status badge\" /></p>\n<pre class=\"hljs\"><code>&lt;!-- 基本語法 --&gt;\n\n![<span class=\"hljs-string\">example workflow</span>](<span class=\"hljs-link\">https://github.com/&lt;OWNER&gt;/&lt;REPOSITORY&gt;/actions/workflows/&lt;WORKFLOW_FILE&gt;/badge.svg</span>)\n\n&lt;!-- 範例 --&gt;\n\n![<span class=\"hljs-string\">Deploy</span>](<span class=\"hljs-link\">https://github.com/JennieSH/github-action-demo/actions/workflows/deploy.yml/badge.svg</span>)\n</code></pre>\n</div>\n<h2 id=\"總結\" title=\"總結\"><a href=\"#總結\">總結</a></h2>\n<p><a  href=\"https://docs.github.com/en/actions\" target=\"_blank\" rel=\"noreferrer noopener\">GitHub Actions 官方文件</a> 還有超級多設定可以使用，因為這次需求也沒很複雜，作為初探 Action，是還不錯的經驗 🎉，下次有機會，會再嘗試建立其他的 Workflow。</p>\n<hr />\n<h2 id=\"參考資料\" title=\"參考資料\"><a href=\"#參考資料\">參考資料</a></h2>\n<ol>\n<li><a  href=\"https://docs.github.com/en/actions\" target=\"_blank\" rel=\"noreferrer noopener\">GitHub Actions Docs</a></li>\n<li><a  href=\"https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html\" target=\"_blank\" rel=\"noreferrer noopener\">GitHub Actions 入门教程</a></li>\n<li><a  href=\"https://medium.com/starbugs/%E5%AF%A6%E4%BD%9C%E9%96%8B%E6%BA%90%E5%B0%8F%E5%B7%A5%E5%85%B7-%E8%88%87-github-actions-%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87-3dd2d70eeb\" target=\"_blank\" rel=\"noreferrer noopener\">實作開源小工具，與 Github Actions 的第一次相遇！</a></li>\n</ol>\n<h6>tags: <code>DevOps</code>、<code>CI/CD</code>、<code>GitHub</code>、<code>GitHub Action</code>、<code>GitHub Page</code></h6>\n","toc":{"title":"GitHub Actions - Creating My First Workflow (CI/CD)","subtitles":["What is CI/CD ?","What is Github Actions ?","如何添加設定檔？","基本概念","實作","總結","參考資料"]}}