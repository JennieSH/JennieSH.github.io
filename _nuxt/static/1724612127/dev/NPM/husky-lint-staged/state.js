window.__NUXT__=(function(a,b){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1724612127",layout:"default",error:a,serverRendered:true,routePath:"\u002Fdev\u002FNPM\u002Fhusky-lint-staged",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}},globalRefs:{},ssrRefs:{"articleMatter-NPM-husky-lint-staged":{info:{title:b,fileName:"husky-lint-staged",description:"Don't let 💩 slip into your code base！ 如何在專案中使用 husky 和 lint-staged，提交 commit 前就找出錯誤！",createdAt:"2021-11-17T00:00:00.000Z",updatedAt:"2023-08-09T00:00:00.000Z",tags:["NPM","package","husky","lint-staged","ESLint","Stylelint"]},content:"\u003Ch6\u003Etags: \u003Ccode\u003Elinter\u003C\u002Fcode\u003E、\u003Ccode\u003ENPM\u003C\u002Fcode\u003E、\u003Ccode\u003Epackage\u003C\u002Fcode\u003E、\u003Ccode\u003Elint-staged\u003C\u002Fcode\u003E、\u003Ccode\u003Ehusky\u003C\u002Fcode\u003E、\u003Ccode\u003EESLint\u003C\u002Fcode\u003E、\u003Ccode\u003Estylelint\u003C\u002Fcode\u003E\u003C\u002Fh6\u003E\n\u003Ch1 id=\"程式碼守門員 - Husky + Lint-Staged\" title=\"程式碼守門員 - Husky + Lint-Staged\"\u003E程式碼守門員 - Husky + Lint-Staged\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Cstrong\u003EDon’t let 💩 slip into your code base！\u003C\u002Fstrong\u003E 這段話出自 \u003Ca  href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Flint-staged\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E\u003Ccode\u003Elint-staged\u003C\u002Fcode\u003E\u003C\u002Fa\u003E，非常符合這篇文章想傳達的主旨。\u003C\u002Fp\u003E\n\u003Cp\u003E此文是紀錄筆者在專案上如何使用 \u003Ccode\u003Ehusky\u003C\u002Fcode\u003E + \u003Ccode\u003Elint-staged\u003C\u002Fcode\u003E，主要需求有：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E每次 \u003Ccode\u003Egit commit\u003C\u002Fcode\u003E 前自動執行\u003C\u002Fli\u003E\n\u003Cli\u003E自動修正 lint 錯誤和程式碼排版\u003C\u002Fli\u003E\n\u003Cli\u003E檢查失敗且不能自動修復時，不要 commit\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch2 id=\"介紹\" title=\"介紹\"\u003E\u003Ca href=\"#介紹\"\u003E介紹\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E- \u003Ca  href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fhusky\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E\u003Ccode\u003Ehusky\u003C\u002Fcode\u003E\u003C\u002Fa\u003E 🐶\u003C\u002Fh3\u003E\n\u003Cp\u003E可以讓我們在 \u003Ccode\u003Egit commit\u003C\u002Fcode\u003E、\u003Ccode\u003Egit push\u003C\u002Fcode\u003E 等 git action 執行前，預先處理我們指定的任務。\u003C\u002Fp\u003E\n\u003Ch3\u003E- \u003Ca  href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Flint-staged\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E\u003Ccode\u003Elint-staged\u003C\u002Fcode\u003E\u003C\u002Fa\u003E 🚫 💩\u003C\u002Fh3\u003E\n\u003Cp\u003E指定檢查範圍，只針對有變動的檔案，而非整個專案，也可以依據檔案類型，分別設置不同指令。\u003C\u002Fp\u003E\n\u003Ch2 id=\"Installation\" title=\"Installation\"\u003E\u003Ca href=\"#Installation\"\u003EInstallation\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Enpm install husky lint-staged -D\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"husky 設定\" title=\"husky 設定\"\u003E\u003Ca href=\"#husky 設定\"\u003Ehusky 設定\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E- 初始化設定:\u003C\u002Fh3\u003E\n\u003Cp\u003E專案最初設定一次即可，會在根目錄下產生一個 \u003Ccode\u003E.husky\u003C\u002Fcode\u003E 資料夾，存放 husky 的相關腳本。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Enpm set-script prepare \u003Cspan class=\"hljs-string\"\u003E&quot;husky install&quot;\u003C\u002Fspan\u003E\nnpm run prepare\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E- 增加 hook:\u003C\u002Fh3\u003E\n\u003Cp\u003E指定在 \u003Ccode\u003Egit commit\u003C\u002Fcode\u003E 前先跑過 \u003Ccode\u003Enpx lint-staged\u003C\u002Fcode\u003E 腳本，如果失敗的話，\u003Ccode\u003Egit commit\u003C\u002Fcode\u003E 不會被執行。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Enpx husky add .husky\u002Fpre-commit \u003Cspan class=\"hljs-string\"\u003E&quot;npx lint-staged&quot;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E輸入完上面指令後，會在 \u003Ccode\u003E.husky\u003C\u002Fcode\u003E 資料夾下面產生一個 \u003Ccode\u003Epre-commit\u003C\u002Fcode\u003E 檔案，如果有想到其他腳本想加入，比如說單元測試腳本，都可以直接在下一行新增。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-meta\"\u003E#!\u002Fbin\u002Fsh\u003C\u002Fspan\u003E\n. \u003Cspan class=\"hljs-string\"\u003E&quot;\u003Cspan class=\"hljs-subst\"\u003E$(dirname \u003Cspan class=\"hljs-string\"\u003E&quot;\u003Cspan class=\"hljs-variable\"\u003E$0\u003C\u002Fspan\u003E&quot;\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E\u002F_\u002Fhusky.sh&quot;\u003C\u002Fspan\u003E\n\nnpx lint-staged\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"info\"\u003E\n\u003Cp\u003E💡 \u003Cstrong\u003E補充\u003C\u002Fstrong\u003E\u003Cbr \u002F\u003E\n如果對其他的 git hooks 有興趣的話，可以參考 \u003Ca  href=\"https:\u002F\u002Fgit-scm.com\u002Fdocs\u002Fgithooks#_hooks\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Egit 官網文件\u003C\u002Fa\u003E。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch2 id=\"lint-staged 設定\" title=\"lint-staged 設定\"\u003E\u003Ca href=\"#lint-staged 設定\"\u003Elint-staged 設定\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E這邊設定是根據檔案類型，分別需要經過 linter 檢查和 prettier format，可依照自己的需求調整。\u003C\u002Fp\u003E\n\u003Cp\u003E提供兩種設置方法，擇一即可：\u003C\u002Fp\u003E\n\u003Ch3\u003E1. \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F package.json\u003C\u002Fspan\u003E\n\n \u003Cspan class=\"hljs-attr\"\u003E&quot;lint-staged&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003E&quot;*.{ts,js,vue}&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-punctuation\"\u003E[\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-string\"\u003E&quot;eslint --fix&quot;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003E&quot;*.{html,scss,css,vue}&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-punctuation\"\u003E[\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-string\"\u003E&quot;prettier --write&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-string\"\u003E&quot;stylelint --fix&quot;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-punctuation\"\u003E]\u003C\u002Fspan\u003E\n \u003Cspan class=\"hljs-punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E2. \u003Ccode\u003E.lintstagedrc.json\u003C\u002Fcode\u003E\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F .lintstagedrc.json\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003E&quot;*.{ts,js,vue}&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-punctuation\"\u003E[\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-string\"\u003E&quot;eslint --fix&quot;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003E&quot;*.{html,scss,css,vue}&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-punctuation\"\u003E[\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-string\"\u003E&quot;prettier --write&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-string\"\u003E&quot;stylelint --fix&quot;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"Usage\" title=\"Usage\"\u003E\u003Ca href=\"#Usage\"\u003EUsage\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E每次 \u003Ccode\u003Egit commit\u003C\u002Fcode\u003E 就會自動觸發，程式碼都要符合 \u003Ccode\u003Eeslint\u003C\u002Fcode\u003E、\u003Ccode\u003Estylelint\u003C\u002Fcode\u003E 的設定檔規則，確保程式碼都是跟團隊規範保持一致的。\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Cp\u003E可以先試打一段可怕的程式碼，可以看到 \u003Ccode\u003Eeslint\u003C\u002Fcode\u003E 哀嚎不已：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FvQgu8v3.png\" alt=\"\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E接著把這份檔案直接 \u003Ccode\u003Egit commit\u003C\u002Fcode\u003E 後，排版自動變整齊，error 也被自動修復了 🎉。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FLwLf8br.png\" alt=\"\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Cp\u003E但也是有不能被自動修復的情境，例如下圖中 \u003Ccode\u003Ebar\u003C\u002Fcode\u003E 宣告了，卻沒有使用，這時會顯示錯誤訊息，如果馬上 \u003Ccode\u003Egit commit\u003C\u002Fcode\u003E ，就會直接失敗，不會進入 git history 中，直到手動修正錯誤。\u003C\u002Fp\u003E\n\u003Cp\u003E主要也是要阻擋這類的程式碼被 commit 進入 code base 中，因為現在幾乎都會設定 \u003Ccode\u003EVScode\u003C\u002Fcode\u003E 在存檔時，自動修正和 format，大部分的錯誤在開發中就會被解決了，但這類的錯誤，只要檔案沒被開啟，\u003Ccode\u003EVScode\u003C\u002Fcode\u003E linter 插件就無法及時提供警告。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002Fqml0GDx.png\" alt=\"\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"總結\" title=\"總結\"\u003E\u003Ca href=\"#總結\"\u003E總結\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ccode\u003Ehusky\u003C\u002Fcode\u003E + \u003Ccode\u003Elint-staged\u003C\u002Fcode\u003E 的搭配，相當多了位 \u003Ccode\u003ECode Reviewer\u003C\u002Fcode\u003E 把關程式碼，也可以減輕團隊 code review 的壓力，確保不會有 error 會被推到 repository，且程式碼也是符合團隊規範。\u003C\u002Fp\u003E\n\u003Cp\u003E如果一開始就能修正，後期維護會輕鬆些，不然隨著專案變大，錯誤和警告數量一多，也是很頭疼的。\u003C\u002Fp\u003E\n\u003Ch2 id=\"參考資料\" title=\"參考資料\"\u003E\u003Ca href=\"#參考資料\"\u003E參考資料\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fgithub.com\u002Ftypicode\u002Fhusky\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Ehusky GitHub\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fgithub.com\u002Fokonet\u002Flint-staged\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Elint-staged GitHub\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fmedium.com\u002F@danielhu95\u002Fset-up-eslint-pipeline-zh-tw-990d7d9eb68e\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E使用 ESLint, Prettier, Husky, Lint-staged 以及 Commitizen 提升專案品質及一致性\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n",toc:{title:b,subtitles:["介紹","Installation","husky 設定","lint-staged 設定","Usage","總結","參考資料"]}}}}}(null,"程式碼守門員 - Husky + Lint-Staged"));