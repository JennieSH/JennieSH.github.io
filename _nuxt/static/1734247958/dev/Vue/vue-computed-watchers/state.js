window.__NUXT__=(function(a,b){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1734247958",layout:"default",error:a,serverRendered:true,routePath:"\u002Fdev\u002FVue\u002Fvue-computed-watchers",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}},globalRefs:{},ssrRefs:{"articleMatter-Vue-vue-computed-watchers":{info:{title:"[Note] Vue (part 2) - Computed Properties & Watchers",fileName:"vue-computed-watchers",description:"Vue 的學習筆記 part 2",createdAt:b,updatedAt:b,tags:["Vue"]},content:"\u003Ch1 id=\"[Note] Vue (part2) - Computed Properties &amp; Watchers\" title=\"[Note] Vue (part2) - Computed Properties &amp; Watchers\"\u003E[Note] Vue (part2) - Computed Properties &amp; Watchers\u003C\u002Fh1\u003E\n\u003Ch2 id=\"Computed Properties 計算屬性\" title=\"Computed Properties 計算屬性\"\u003E\u003Ca href=\"#Computed Properties 計算屬性\"\u003EComputed Properties 計算屬性\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003E處理複雜邏輯\u003C\u002Fli\u003E\n\u003Cli\u003E計算屬性的 getter 函數是沒有副作用(side effect)的\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E注意 :\u003C\u002Fstrong\u003E 這裡是屬性，不是函式，不需要 \u003Ccode\u003E()\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E有緩存機制，只觀察他所觀察的屬性，其屬性有變化才會執行對應的 func\u003C\u002Fli\u003E\n\u003Cli\u003E效能比 \u003Ccode\u003Emethod\u003C\u002Fcode\u003E 好\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ecomputed\u003C\u002Fcode\u003E 屬性中的 \u003Ccode\u003Efunction\u003C\u002Fcode\u003E 無法使用參數，要使用參數改用 \u003Ccode\u003Emethod\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003EBasic Example\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E聲明了一個計算屬性 \u003Ccode\u003EreversedMessage\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E提供的函數將用作 property \u003Ccode\u003Evm.reversedMessage\u003C\u002Fcode\u003E 的\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;div id=&quot;example&quot;&gt;\n  &lt;p&gt;Original message: &quot;{{ message }}&quot;&lt;\u002Fp&gt;\n  &lt;p&gt;Computed reversed message: &quot;{{ reversedMessage }}&quot;&lt;\u002Fp&gt;\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E vm = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Eel\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;#example&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Emessage\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Hello&#x27;\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-attr\"\u003Ecomputed\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F a computed getter\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003EreversedMessage\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) {\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F `this` points to the vm instance\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003Emessage\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Esplit\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-title function_\"\u003Ereverse\u003C\u002Fspan\u003E().\u003Cspan class=\"hljs-title function_\"\u003Ejoin\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E)\n    }\n  }\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EVue 知道 \u003Ccode\u003Evm.reversedMessage\u003C\u002Fcode\u003E 依賴於 \u003Ccode\u003Evm.message\u003C\u002Fcode\u003E，因此當 \u003Ccode\u003Evm.message\u003C\u002Fcode\u003E 發生改變時，所有依賴 \u003Ccode\u003Evm.reversedMessage\u003C\u002Fcode\u003E 的綁定也會更新。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(vm.\u003Cspan class=\"hljs-property\"\u003EreversedMessage\u003C\u002Fspan\u003E) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F =&gt; &#x27;olleH&#x27;\u003C\u002Fspan\u003E\nvm.\u003Cspan class=\"hljs-property\"\u003Emessage\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&#x27;Goodbye&#x27;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(vm.\u003Cspan class=\"hljs-property\"\u003EreversedMessage\u003C\u002Fspan\u003E) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F =&gt; &#x27;eybdooG&#x27;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003EComputed Caching vs Methods 計算屬性緩存 vs 方法\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;!-- 寫法一：屬性 --&gt;\n&lt;p&gt;Reversed message: &quot;{{ reversedMessage }}&quot;&lt;\u002Fp&gt;\n\n&lt;script&gt;\n\u002F\u002F 在组件中\n  computed: {\n    reversedMessage: function () {\n      return this.message.split('').reverse().join('')\n    }\n  }\n&lt;\u002Fscript&gt;\n\n\n&lt;!-- 寫法二：方法 --&gt;\n&lt;p&gt;Reversed message: &quot;{{ reversedMessage() }}&quot;&lt;\u002Fp&gt;\n\n&lt;script&gt;\n\u002F\u002F 在组件中\n    methods: {\n      reversedMessage: function () {\n        return this.message.split('').reverse().join('')\n      }\n    }\n&lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E相同：\u003C\u002Fh4\u003E\n\u003Cul\u003E\n\u003Cli\u003E可以將同一函數定義為一個方法而不是一個計算屬性。兩種方式的最終結果確實是完全相同的\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch4\u003E相異：\u003C\u002Fh4\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003E計算屬性是基於它們的響應式依賴進行緩存的\u003C\u002Fstrong\u003E。只在相關響應式依賴發生改變時它們才會重新求值\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003EComputed:\u003C\u002Fstrong\u003E 只要 message 還沒有發生改變，多次訪問 reversedMessage 計算屬性會立即返回之前的計算結果，而不必再次執行函數。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EMethods:\u003C\u002Fstrong\u003E 每當觸發重新渲染時，調用方法將總會再次執行函數。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch4\u003EWhy：\u003C\u002Fh4\u003E\n\u003Cp\u003E假設我們有一個性能開銷比較大的計算屬性 A，它需要遍歷一個巨大的數組並做大量的計算。然後我們可能有其他的計算屬性依賴於 A。如果沒有緩存，我們將不可避免的多次執行 A 的 getter！\u003C\u002Fp\u003E\n\u003Ch4\u003E注意：\u003C\u002Fh4\u003E\n\u003Cul\u003E\n\u003Cli\u003E資料沒響應式依賴又要時常更新的，勿放 Computed\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 計算屬性將不再更新，因為Date.now()不是響應式依賴：\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-attr\"\u003Ecomputed\u003C\u002Fspan\u003E: {\n  \u003Cspan class=\"hljs-attr\"\u003Enow\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EDate\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Enow\u003C\u002Fspan\u003E()\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003E不希望有緩存，請用方法來替代\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003EComputed vs Watched Property 計算屬性 vs 偵聽屬性\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cstrong\u003E偵聽屬性 :\u003C\u002Fstrong\u003E 觀察和響應 Vue 實例上的數據變動\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E[ 注意 ]：\u003C\u002Fstrong\u003E 但如果有一些數據需要隨著其它數據變動而變動時，很容易濫用\u003Ccode\u003Ewatch\u003C\u002Fcode\u003E &gt;\u003Cstrong\u003E[ 解法 ]：\u003C\u002Fstrong\u003E 使用計算屬性而不是命令式的 watch callback\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;div id=&quot;demo&quot;&gt;{{ fullName }}&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 偵聽屬性\u003C\u002Fspan\u003E\n \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F是命令式且重複的\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E vm = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Eel\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;#demo&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003EfirstName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Foo&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003ElastName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Bar&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003EfullName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Foo Bar&#x27;\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-attr\"\u003Ewatch\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003EfirstName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003Eval\u003C\u002Fspan\u003E) {\n      \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003EfullName\u003C\u002Fspan\u003E = val + \u003Cspan class=\"hljs-string\"\u003E&#x27; &#x27;\u003C\u002Fspan\u003E + \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003ElastName\u003C\u002Fspan\u003E\n    },\n    \u003Cspan class=\"hljs-attr\"\u003ElastName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003Eval\u003C\u002Fspan\u003E) {\n      \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003EfullName\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003EfirstName\u003C\u002Fspan\u003E + \u003Cspan class=\"hljs-string\"\u003E&#x27; &#x27;\u003C\u002Fspan\u003E + val\n    }\n  }\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 計算屬性\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F better\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E vm = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Eel\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;#demo&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003EfirstName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Foo&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003ElastName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Bar&#x27;\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-attr\"\u003Ecomputed\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003EfullName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) {\n      \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003EfirstName\u003C\u002Fspan\u003E + \u003Cspan class=\"hljs-string\"\u003E&#x27; &#x27;\u003C\u002Fspan\u003E + \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003ElastName\u003C\u002Fspan\u003E\n    }\n  }\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003EComputed Setter 計算屬性的 setter\u003C\u002Fh3\u003E\n\u003Cp\u003E計算屬性默認只有 getter，不過在需要時你也可以提供一個 setter:\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-attr\"\u003Ecomputed\u003C\u002Fspan\u003E: {\n  \u003Cspan class=\"hljs-attr\"\u003EfullName\u003C\u002Fspan\u003E: { \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F object 形式\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F getter\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Eget\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) {\n      \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003EfirstName\u003C\u002Fspan\u003E + \u003Cspan class=\"hljs-string\"\u003E&#x27; &#x27;\u003C\u002Fspan\u003E + \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003ElastName\u003C\u002Fspan\u003E\n    },\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F setter\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Eset\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003EnewValue\u003C\u002Fspan\u003E) {\n      \u003Cspan class=\"hljs-keyword\"\u003Evar\u003C\u002Fspan\u003E names = newValue.\u003Cspan class=\"hljs-title function_\"\u003Esplit\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27; &#x27;\u003C\u002Fspan\u003E)\n      \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003EfirstName\u003C\u002Fspan\u003E = names[\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E]\n      \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003ElastName\u003C\u002Fspan\u003E = names[names.\u003Cspan class=\"hljs-property\"\u003Elength\u003C\u002Fspan\u003E - \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E]\n    }\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E現在再運行 \u003Ccode\u003Evm.fullName = 'John Doe'\u003C\u002Fcode\u003E 時，setter 會被調用，\u003Ccode\u003Evm.firstName\u003C\u002Fcode\u003E 和 \u003Ccode\u003Evm.lastName\u003C\u002Fcode\u003E 也會相應地被更新。\u003C\u002Fp\u003E\n\u003Ch2 id=\"Watchers\" title=\"Watchers\"\u003E\u003Ca href=\"#Watchers\"\u003EWatchers\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003E用於數據變化時執行異步（ex 打 API）或開銷較大的操作\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;div id=&quot;watch-example&quot;&gt;\n  &lt;p&gt;\n    Ask a yes\u002Fno question:\n    &lt;input v-model=&quot;question&quot;&gt;\n  &lt;\u002Fp&gt;\n  &lt;p&gt;{{ answer }}&lt;\u002Fp&gt;\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;script src=&quot;https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Faxios@0.12.0\u002Fdist\u002Faxios.min.js&quot;&gt;&lt;\u002Fscript&gt;\n&lt;script src=&quot;https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Flodash@4.13.1\u002Flodash.min.js&quot;&gt;&lt;\u002Fscript&gt;\n&lt;script&gt;\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    \u002F\u002F 如果 `question` 發生改變，這個函數就會運行\n    question: function (newQuestion, oldQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.debouncedGetAnswer()\n    }\n  },\n  created: function () {\n    \u002F\u002F `_.debounce` 是一個通過 Lodash 限制操作頻率的函數。\n\n    \u002F\u002F 在這個例子中，我們希望限制訪問 yesno.wtf\u002Fapi 的頻率\n    \u002F\u002F AJAX 請求直到用户輸入完畢才會發出。\n\n    \u002F\u002F `_.debounce` 函數 (及其近親 `_.throttle`) 的知識，\n    \u002F\u002F 請參考：https:\u002F\u002Flodash.com\u002Fdocs#debounce\n    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)\n  },\n  methods: {\n    getAnswer: function () {\n      if (this.question.indexOf('?') === -1) {\n        this.answer = 'Questions usually contain a question mark. ;-)'\n        return\n      }\n      this.answer = 'Thinking...'\n      var vm = this\n      axios.get('https:\u002F\u002Fyesno.wtf\u002Fapi')\n        .then(function (response) {\n          vm.answer = _.capitalize(response.data.answer)\n        })\n        .catch(function (error) {\n          vm.answer = 'Error! Could not reach the API. ' + error\n        })\n    }\n  }\n})\n&lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E使用 watch 選項允許我們執行異步操作(訪問一個 API)，限制我們執行該操作的頻率，並在我們得到最終結果前，設置中間狀態。這些都是計算屬性無法做到的。\u003C\u002Fp\u003E\n\u003Cp\u003E除了 \u003Ccode\u003Ewatch\u003C\u002Fcode\u003E 之外，還可以使用命令式的 \u003Ca  href=\"https:\u002F\u002Fcn.vuejs.org\u002Fv2\u002Fapi\u002F#vm-watch\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Evm.$watch API\u003C\u002Fa\u003E。\u003C\u002Fp\u003E\n",toc:{title:"[Note] Vue (part2) - Computed Properties &amp; Watchers",subtitles:["Computed Properties 計算屬性","Watchers"]},wordCount:990}}}}(null,"2024-12-15T00:00:00.000Z"));