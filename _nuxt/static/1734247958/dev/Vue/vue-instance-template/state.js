window.__NUXT__=(function(a,b){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1734247958",layout:"default",error:a,serverRendered:true,routePath:"\u002Fdev\u002FVue\u002Fvue-instance-template",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}},globalRefs:{},ssrRefs:{"articleMatter-Vue-vue-instance-template":{info:{title:"[Note] Vue (part 1) - Instance & Template",fileName:"vue-instance-template",description:"Vue 的學習筆記 part 1",createdAt:b,updatedAt:b,tags:["Vue"]},content:"\u003Ch6\u003Etags: \u003Ccode\u003EVue\u003C\u002Fcode\u003E\u003C\u002Fh6\u003E\n\u003Ch1 id=\"[Note] Vue (part 1) - Instance &amp; Template\" title=\"[Note] Vue (part 1) - Instance &amp; Template\"\u003E[Note] Vue (part 1) - Instance &amp; Template\u003C\u002Fh1\u003E\n\u003Ch2 id=\"安裝套件\" title=\"安裝套件\"\u003E\u003Ca href=\"#安裝套件\"\u003E安裝套件\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003ECDN\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;script src=&quot;https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fvue\u002Fdist\u002Fvue.js&quot;&gt;&lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Col start=\"2\"\u003E\n\u003Cli\u003ENPM\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Enpm install vue\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003EVue Devtools\u003C\u002Fh3\u003E\n\u003Cp\u003EVue 開發者必裝！可以再開發者工具查看 Vue 各項資料和調試\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fgithub.com\u002Fvuejs\u002Fvue-devtools#vue-devtools\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Evue-devtools repo\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2 id=\"Declarative Rendering 聲名式渲染\" title=\"Declarative Rendering 聲名式渲染\"\u003E\u003Ca href=\"#Declarative Rendering 聲名式渲染\"\u003EDeclarative Rendering 聲名式渲染\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003EVue app 會將其掛載到一個 DOM 元素上，然後對其進行完全控制。HTML \u003Cstrong\u003E(el : ‘#app’)\u003C\u002Fstrong\u003E 是我們的入口，但其餘都會發生在新創建的 Vue 實例內部。\u003C\u002Fli\u003E\n\u003Cli\u003E讓 data 與 HTML 牽起友誼的小手，做到即時更新\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003EDOM 文本 : 雙花括號 {{ text }}\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;div id=&quot;app&quot;&gt;\n  {{ message }}\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E app = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Eel\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;#app&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Emessage\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Hello Vue!&#x27;\u003C\u002Fspan\u003E\n  }\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003Eattribute: v-bind:attribute=“args”\u003C\u002Fh3\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E前綴 v- 開頭字為 Vue 指令，表示 Vue 提供的特殊 attribute，它們會在渲染的 DOM 上應用特殊的響應式行為。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;div id=&quot;app-2&quot;&gt;\n  &lt;span v-bind:title=&quot;message&quot;&gt;\n    Hover your mouse over me for a few seconds\n    to see my dynamically bound title!\n  &lt;\u002Fspan&gt;\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E app2 = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Eel\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;#app-2&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Emessage\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;You loaded this page on &#x27;\u003C\u002Fspan\u003E + \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EDate\u003C\u002Fspan\u003E().\u003Cspan class=\"hljs-title function_\"\u003EtoLocaleString\u003C\u002Fspan\u003E()\n  }\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003ETwo-way Binding 雙向綁定: v-model\u003C\u002Fh3\u003E\n\u003Cp\u003E實現表單輸入和應用狀態之間的雙向綁定\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;div id=&quot;app-6&quot;&gt;\n  &lt;p&gt;{{ message }}&lt;\u002Fp&gt;\n  &lt;input v-model=&quot;message&quot;&gt;\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E app6 = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Eel\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;#app-6&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Emessage\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Hello Vue!&#x27;\u003C\u002Fspan\u003E\n  }\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003EDOM 結構: Conditionals and Loops 條件與循環\u003C\u002Fh3\u003E\n\u003Ch4\u003E- 條件： v-if=“agrs”\u003C\u002Fh4\u003E\n\u003Cp\u003E控制切換一個元素是否顯示\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;div id=&quot;app-3&quot;&gt;\n  &lt;p v-if=&quot;seen&quot;&gt;Now you see me&lt;\u002Fp&gt;\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E app3 = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Eel\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;#app-3&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Eseen\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E\n  }\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E- 循環： v-for=“todo in todos”\u003C\u002Fh4\u003E\n\u003Cp\u003E綁定數組的數據來渲染一個項目列表\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;div id=&quot;app-4&quot;&gt;\n  &lt;ol&gt;\n    &lt;li v-for=&quot;todo in todos&quot;&gt;\n      {{ todo.text }}\n    &lt;\u002Fli&gt;\n  &lt;\u002Fol&gt;\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E app4 = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Eel\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;#app-4&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Etodos\u003C\u002Fspan\u003E: [\n      { \u003Cspan class=\"hljs-attr\"\u003Etext\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Learn JavaScript&#x27;\u003C\u002Fspan\u003E },\n      { \u003Cspan class=\"hljs-attr\"\u003Etext\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Learn Vue&#x27;\u003C\u002Fspan\u003E },\n      { \u003Cspan class=\"hljs-attr\"\u003Etext\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Build something awesome&#x27;\u003C\u002Fspan\u003E }\n    ]\n  }\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"Event Listeners 事件監聽器\" title=\"Event Listeners 事件監聽器\"\u003E\u003Ca href=\"#Event Listeners 事件監聽器\"\u003EEvent Listeners 事件監聽器\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E用 v-on 指令添加一個事件監聽器，通過它調用在 Vue instances 中定義 methods\u003C\u002Fp\u003E\n\u003Ch3\u003Ev-on:[action]=“funcName”\u003C\u002Fh3\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E注意在 reverseMessage 方法中，我們更新了應用的狀態，但沒有觸碰 DOM——所有的 DOM 操作都由 Vue 來處理，你編寫的代碼只需要關注邏輯層面即可。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;div id=&quot;app-5&quot;&gt;\n  &lt;p&gt;{{ message }}&lt;\u002Fp&gt;\n  &lt;button v-on:click=&quot;reverseMessage&quot;&gt;Reverse Message&lt;\u002Fbutton&gt;\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E app5 = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Eel\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;#app-5&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Emessage\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Hello Vue.js!&#x27;\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-attr\"\u003Emethods\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003EreverseMessage\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) {\n      \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003Emessage\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003Emessage\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Esplit\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-title function_\"\u003Ereverse\u003C\u002Fspan\u003E().\u003Cspan class=\"hljs-title function_\"\u003Ejoin\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E)\n    }\n  }\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"Composing with Components 組件化應用構建\" title=\"Composing with Components 組件化應用構建\"\u003E\u003Ca href=\"#Composing with Components 組件化應用構建\"\u003EComposing with Components 組件化應用構建\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E組件系統允許我們使用小型、獨立和通常可複用的組件構建大型應用。\u003C\u002Fp\u003E\n\u003Ch3\u003Ecomponent 使用\u003C\u002Fh3\u003E\n\u003Ch4\u003E1. 註冊 component\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F In Vue, a component is essentially a Vue instance with pre-defined options.\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Define a new component called todo-item\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Ecomponent\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;todo-item&#x27;\u003C\u002Fspan\u003E, {\n  \u003Cspan class=\"hljs-attr\"\u003Etemplate\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;&lt;li&gt;This is a todo&lt;\u002Fli&gt;&#x27;\u003C\u002Fspan\u003E\n})\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E app = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E(...)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E2. 應用 component\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;ol&gt;\n  &lt;!-- Create an instance of the todo-item component --&gt;\n  &lt;todo-item&gt;&lt;\u002Ftodo-item&gt;\n&lt;\u002Fol&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003Eprops down\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E父組件透過 props 向下對子組件傳遞資料\u003C\u002Fli\u003E\n\u003Cli\u003E子組件 component 需要用 props 去聲明它所獲得的資料\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E[ 注意 ]:\u003C\u002Fstrong\u003E 父組件的 template 模板中，傳送 data 的屬性名需要用串燒命名撰寫\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca  href=\"https:\u002F\u002Fcodertw.com\u002F%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\u002F231848\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Eprops 補充\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Ecomponent\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;todo-item&#x27;\u003C\u002Fspan\u003E, {\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F The todo-item component now accepts a\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F &quot;prop&quot;, which is like a custom attribute.\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F This prop is called todo.\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Eprops\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-string\"\u003E&#x27;todo&#x27;\u003C\u002Fspan\u003E], \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 子組件 component 聲明接收到的 props\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Etemplate\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;&lt;li&gt;{{ todo.text }}&lt;\u002Fli&gt;&#x27;\u003C\u002Fspan\u003E\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E搭配 v-bind 屬性綁定，改寫如下：\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E[ 注意 ]:\u003C\u002Fstrong\u003E v-for 記得搭配 key\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;div id=&quot;app-7&quot;&gt;\n  &lt;ol&gt;\n    &lt;!--\n      Now we provide each todo-item with the todo object\n      it's representing, so that its content can be dynamic.\n      We also need to provide each component with a &quot;key&quot;\n    --&gt;\n    &lt;todo-item\n      v-for=&quot;(item, index) in groceryList&quot;\n      v-bind:todo=&quot;item&quot;\n      v-bind:key=&quot;index&quot;\n    &gt;&lt;\u002Ftodo-item&gt;\n  &lt;\u002Fol&gt;\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Ecomponent\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;todo-item&#x27;\u003C\u002Fspan\u003E, { \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 子組件\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Eprops\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-string\"\u003E&#x27;todo&#x27;\u003C\u002Fspan\u003E],\n  \u003Cspan class=\"hljs-attr\"\u003Etemplate\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;&lt;li&gt;{{ todo.text }}&lt;\u002Fli&gt;&#x27;\u003C\u002Fspan\u003E\n})\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E app7 = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 父組件\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Eel\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;#app-7&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003EgroceryList\u003C\u002Fspan\u003E: [\n      { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Etext\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Vegetables&#x27;\u003C\u002Fspan\u003E },\n      { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Etext\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Cheese&#x27;\u003C\u002Fspan\u003E },\n      { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Etext\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Whatever else humans are supposed to eat&#x27;\u003C\u002Fspan\u003E }\n    ]\n  }\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"Vue Instance 實例\" title=\"Vue Instance 實例\"\u003E\u003Ca href=\"#Vue Instance 實例\"\u003EVue Instance 實例\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E建立 Vue Instance\u003C\u002Fh3\u003E\n\u003Cp\u003E所有的 Vue 組件都是 Vue Instance，都是通過用 Vue 函數創建。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E vm = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F options\u003C\u002Fspan\u003E\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003EData &amp; Methods\u003C\u002Fh3\u003E\n\u003Cp\u003E當一個 Vue Instance 被創建時，它將 data object 中的所有的 property 加入到 Vue 的\u003Cstrong\u003E響應式系統\u003C\u002Fstrong\u003E中。當這些 property 的值發生改變時，視圖將會產生“響應”，即匹配更新為新的值。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F data object\u003C\u002Fspan\u003E\nley data = { \u003Cspan class=\"hljs-attr\"\u003Ea\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E }\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 該對象被加入到一個 Vue instance\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E vm = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: data\n})\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Getting the property on the instance\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F returns the one from the original data\u003C\u002Fspan\u003E\nvm.\u003Cspan class=\"hljs-property\"\u003Ea\u003C\u002Fspan\u003E == data.\u003Cspan class=\"hljs-property\"\u003Ea\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F =&gt; true\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 更改 Vue Instance 的 property，會影響原始 data\u003C\u002Fspan\u003E\nvm.\u003Cspan class=\"hljs-property\"\u003Ea\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E\ndata.\u003Cspan class=\"hljs-property\"\u003Ea\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F =&gt; 2\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 反之亦然\u003C\u002Fspan\u003E\ndata.\u003Cspan class=\"hljs-property\"\u003Ea\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E3\u003C\u002Fspan\u003E\nvm.\u003Cspan class=\"hljs-property\"\u003Ea\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F =&gt; 3\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E[ 注意 ]\u003C\u002Fstrong\u003E: \u003Cstrong\u003E只有\u003C\u002Fstrong\u003E當 Instance 被創建時就已經存在於 data 中的 property 才是\u003Cstrong\u003E響應式\u003C\u002Fstrong\u003E的，當這些 data 改變時，view 會進行重新渲染。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E也就是說你添加一個新的 property，比如：\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Evm.\u003Cspan class=\"hljs-property\"\u003Eb\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&#x27;hi&#x27;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E那麼對 b 的改動將不會觸發任何 view 的更新。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch4\u003E進階應用\u003C\u002Fh4\u003E\n\u003Cul\u003E\n\u003Cli\u003E初始值設定\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E但是一開始它為空或不存在，那麼你僅需要設置一些初始值。\u003Cbr \u002F\u003E\n例如：\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: {\n  \u003Cspan class=\"hljs-attr\"\u003EnewTodoText\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003EvisitCount\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003EhideCompletedTodos\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Etodos\u003C\u002Fspan\u003E: [],\n  \u003Cspan class=\"hljs-attr\"\u003Eerror\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003EObject.freeze()\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E阻止修改現有的 property，也意味著響應系統無法再追踪變化。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E obj = {\n  \u003Cspan class=\"hljs-attr\"\u003Efoo\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;bar&#x27;\u003C\u002Fspan\u003E\n}\n\n\u003Cspan class=\"hljs-title class_\"\u003EObject\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Efreeze\u003C\u002Fspan\u003E(obj)\n\n\u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Eel\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;#app&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: obj\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;div id=&quot;app&quot;&gt;\n  &lt;p&gt;{{ foo }}&lt;\u002Fp&gt;\n  &lt;!-- this will no longer update `foo`! --&gt;\n  &lt;button v-on:click=&quot;foo = 'baz'&quot;&gt;Change it&lt;\u002Fbutton&gt;\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003EVue 內建的 instance properties 和 methods\u003Cbr \u002F\u003E\n它們都有前綴$，以便與用戶定義的 property 區分開來。\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca  href=\"https:\u002F\u002Fcn.vuejs.org\u002Fv2\u002Fapi\u002F#%E5%AE%9E%E4%BE%8B-property\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EAPI 參考\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E data = { \u003Cspan class=\"hljs-attr\"\u003Ea\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E }\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E vm = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Eel\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;#example&#x27;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: data\n})\n\nvm.\u003Cspan class=\"hljs-property\"\u003E$data\u003C\u002Fspan\u003E === data \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F =&gt; true\u003C\u002Fspan\u003E\nvm.\u003Cspan class=\"hljs-property\"\u003E$el\u003C\u002Fspan\u003E === \u003Cspan class=\"hljs-variable language_\"\u003Edocument\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003EgetElementById\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;example&#x27;\u003C\u002Fspan\u003E) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F =&gt; true\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F $watch is an instance method\u003C\u002Fspan\u003E\nvm.$watch(\u003Cspan class=\"hljs-string\"\u003E&#x27;a&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003EnewValue, oldValue\u003C\u002Fspan\u003E) {\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F This callback will be called when `vm.a` changes\u003C\u002Fspan\u003E\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003ELifecycle Diagram\u003C\u002Fh3\u003E\n\u003Cimg src=\"https:\u002F\u002Fvuejs.org\u002Fassets\u002Flifecycle.MuZLBFAS.png\" width=600\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E圖片來源：\u003Ca  href=\"https:\u002F\u002Fvuejs.org\u002Fguide\u002Fessentials\u002Flifecycle#lifecycle-diagram\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EVue 官方\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3\u003EInstance Lifecycle Hooks\u003C\u002Fh3\u003E\n\u003Cp\u003E每個 Vue Instance 在被創建時都要經過一系列的初始化過程——例如，需要\u003Cstrong\u003E設置數據監聽\u003C\u002Fstrong\u003E、\u003Cstrong\u003E編譯模板\u003C\u002Fstrong\u003E、將\u003Cstrong\u003E實例掛載到 DOM\u003C\u002Fstrong\u003E並在數據變化時\u003Cstrong\u003E更新 DOM\u003C\u002Fstrong\u003E等。在不同生命階段，可以調用不同的 Lifecycle Hooks。\u003C\u002Fp\u003E\n\u003Cp\u003ELifecycle Hooks 的 this 上下文指向調用它的 Vue Instance。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F created 可以用來在一個 Instance 被創建之後執行代碼：\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EVue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Edata\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Ea\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-attr\"\u003Ecreated\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F `this` 指向 vm instance\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;a is: &#x27;\u003C\u002Fspan\u003E + \u003Cspan class=\"hljs-variable language_\"\u003Ethis\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003Ea\u003C\u002Fspan\u003E)\n  }\n})\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F =&gt; &quot;a is: 1&quot;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E[ 注意 ]：\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E不要在選項 property 或 callback 上使用\u003Cstrong\u003E箭頭函數\u003C\u002Fstrong\u003E，比如 created: () =&gt; console.log(this.a) 或 vm.$watch(‘a’, newValue =&gt; this.myMethod())。\u003C\u002Fp\u003E\n\u003Cp\u003E因為箭頭函數並沒有 this，this 會作為變量一直向上級詞法作用域查找，直至找到為止，經常導致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之類的錯誤。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"Template Syntax 模板語法\" title=\"Template Syntax 模板語法\"\u003E\u003Ca href=\"#Template Syntax 模板語法\"\u003ETemplate Syntax 模板語法\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003EVue.js 使用了基於 HTML 的模板語法，Vue 將模板編譯成虛擬 DOM 渲染函數。結合響應系統，Vue 能計算出最少需要重新渲染多少組件，並把 DOM 操作次數減到最少。\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E如果你熟悉虛擬 DOM 並且偏愛 JavaScript 的原始力量，你也可以不用模板，直接寫渲染(render)函數，使用可選的 JSX 語法。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3\u003EInterpolations 插值\u003C\u002Fh3\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ccode\u003EText 文本 - {{ text }}\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E綁定的 property 與插值處的內容是連動的，一有變化都會即時更新\u003C\u002Fli\u003E\n\u003Cli\u003E使用“Mustache”語法(雙大括號) 的文本插值\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;span&gt;\u003Cspan class=\"hljs-title class_\"\u003EMessage\u003C\u002Fspan\u003E: {{ text }}&lt;\u002Fspan&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Ev-once\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E執行一次性地插值，當數據改變時，插值處的內容不會更新。但請留心這會影響到該節點上的其它數據綁定。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;span v-once&gt;\u003Cspan class=\"hljs-title class_\"\u003EThis\u003C\u002Fspan\u003E will never \u003Cspan class=\"hljs-attr\"\u003Echange\u003C\u002Fspan\u003E: {{ msg }}&lt;\u002Fspan&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u002F\u003E\n\u003Col start=\"2\"\u003E\n\u003Cli\u003E\n\u003Cp\u003E原始 HTML - \u003Ccode\u003Ev-html\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E雙大括號會將數據解釋為普通文本，而非 HTML 代碼。為了輸出真正的 HTML，你需要使用 \u003Cstrong\u003Ev-html\u003C\u002Fstrong\u003E 指令：\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;p&gt;Using mustaches: {{ rawHtml }}&lt;\u002Fp&gt;\n&lt;p&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;\u002Fspan&gt;&lt;\u002Fp&gt;\n\n&lt;!--- Using mustaches: &lt;span style=&quot;color:red&quot;&gt;This should be red.&lt;\u002Fspan&gt;\n      Using v-html directive: This should be red. ---&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E[ 注意 ]:\u003C\u002Fstrong\u003E\u003Cbr \u002F\u003E\n你的站點上動態渲染的任意 HTML 可能會非常危險，因為它很容易導致*\u003Cem\u003EXSS 攻擊\u003C\u002Fem\u003E，絕不要對用戶提供的內容使用插值。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cbr\u002F\u003E\n\u003Col start=\"3\"\u003E\n\u003Cli\u003E\n\u003Cp\u003EAttribute - \u003Ccode\u003Ev-bind:[attri]=&quot;args&quot;\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EMustache 語法不能作用在 HTML attribute 上，遇到這種情況應該使用\u003Cstrong\u003Ev-bind\u003C\u002Fstrong\u003E指令：\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;div v-\u003Cspan class=\"hljs-attr\"\u003Ebind\u003C\u002Fspan\u003E:id=\u003Cspan class=\"hljs-string\"\u003E&quot;dynamicId&quot;\u003C\u002Fspan\u003E&gt;&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003Ev-bind + boolean\n\u003Cul\u003E\n\u003Cli\u003E如果 isButtonDisabled 的值是 null、undefined 或 false，則 disabledattribute 甚至不會被包含在渲染出來的&lt;button&gt;元素中。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Col start=\"4\"\u003E\n\u003Cli\u003E使用 JavaScript 表達式\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n&lt;div v-bind:id=&quot;'list-' + id&quot;&gt;&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E但有個限制就是，每個綁定都只能包含單個表達式，所以下面的例子都不會生效。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;!-- 這是語句，不是表達式 --&gt;\n{{ \u003Cspan class=\"hljs-keyword\"\u003Evar\u003C\u002Fspan\u003E a = \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E }}\n\n&lt;!-- 流程控制也不會生效，要改用三元運算子 --&gt;\n{{ \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (ok) { \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E message } }}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E[ 注意 ]：\u003C\u002Fstrong\u003E Vue 有一個有一個\u003Ca  href=\"https:\u002F\u002Fgithub.com\u002Fvuejs\u002Fvue\u002Fblob\u002Fv2.6.10\u002Fsrc\u002Fcore\u002Finstance\u002Fproxy.js#L9\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E全局變量白名單\u003C\u002Fa\u003E，如 Math 和 Date 。你不應該在模板表達式中試圖訪問用戶定義的全局變量。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3\u003EDirectives 指令\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E帶有 \u003Ccode\u003Ev-\u003C\u002Fcode\u003E 前綴的特殊 attribute\u003C\u002Fli\u003E\n\u003Cli\u003E值預期是單個 JavaScript 表達式 ( v-for 是例外)\u003C\u002Fli\u003E\n\u003Cli\u003E當表達式的值\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch4\u003EArgument 參數\u003C\u002Fh4\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E一些指令能夠接收一個“參數”，在指令名稱之後以冒號表示。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cul\u003E\n\u003Cli\u003Eattribute 綁定\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;!-- v-bind 指令可以用於響應式地更新 HTML attribute --&gt;\n&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;\u002Fa&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003E監聽 DOM 事件\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;!-- 這裡的參數是監聽的事件名 --&gt;\n&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;\u002Fa&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003EDynamic Arguments 動態參數\u003C\u002Fh4\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E從 2.6.0 開始，可以用方括號括起來的 JavaScript 表達式作為一個指令的參數\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003Eattribute 動態綁定\u003C\u002Fp\u003E\n\u003Cp\u003EattributeName 會被作為一個 JavaScript 表達式進行動態求值，求得的值將會作為最終的參數來使用。\u003C\u002Fp\u003E\n\u003Cp\u003E例如，如果你的 Vue 實例有一個 dataproperty attributeName，其值為 “href”，那麼這個綁定將等價於 v-bind:href。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;!-- Note that there are some constraints to the argument expression --&gt;\n&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;\u002Fa&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003E事件名處理函數動態綁定\u003C\u002Fp\u003E\n\u003Cp\u003E當 eventName 的值為&quot;focus&quot;時，v-on:[eventName] 將等於 v-on:focus。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;a v-on:[eventName]=&quot;doSomething&quot;&gt; ... &lt;\u002Fa&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003E動態參數的值的約束\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003E動態參數預期會求出一個字符串，異常情況下值為 null。這個特殊的 null 值可以被顯性地用於移除綁定。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E非字符串類型的值都將會觸發一個警告\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E動態參數表達式的約束\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Col\u003E\n\u003Cli\u003E某些字符，如空格和引號，放在 HTML attribute 名里是無效的\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;!-- 會觸發編譯警告 --&gt;\n&lt;a v-bind:['foo' + bar]=&quot;value&quot;&gt; ... &lt;\u002Fa&gt;\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E[ Solution ] :\u003C\u002Fstrong\u003E 使用沒有空格或引號的表達式，或用計算屬性替代這種複雜表達式。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Col start=\"2\"\u003E\n\u003Cli\u003E在 DOM 中使用模板時(直接在一個 HTML 文件裡撰寫模板)，還需要\u003Cstrong\u003E避免使用大寫字符來命名鍵名，因為瀏覽器會把 attribute 名全部強制轉為小寫。\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;!--\n在 DOM 中使用模板時這段代碼會被轉換成 `v-bind:[someattr]`。\n\n除非在實例中有一個名為“someattr”的 property，否則代碼不會作用。\n--&gt;\n&lt;a v-bind:[someAttr]=&quot;value&quot;&gt; ... &lt;\u002Fa&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003EModifiers 修飾符\u003C\u002Fh4\u003E\n\u003Cp\u003E修飾符 ( modifier ) 是以半角句號 ==.== 指明的特殊後綴，用於指出一個指令應該以特殊方式綁定。\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E.prevent 修飾符告訴 v-on 指令對於觸發的事件調用 event.preventDefault()：\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;...&lt;\u002Fform&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003EShorthands 縮寫\u003C\u002Fh3\u003E\n\u003Ch4\u003Ev-bind 縮寫\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;!-- full syntax --&gt;\n&lt;a v-bind:href=&quot;url&quot;&gt; ... &lt;\u002Fa&gt;\n\n&lt;!-- shorthand --&gt;\n&lt;a :href=&quot;url&quot;&gt; ... &lt;\u002Fa&gt;\n\n&lt;!-- shorthand with dynamic argument (2.6.0+) --&gt;\n&lt;a :[key]=&quot;url&quot;&gt; ... &lt;\u002Fa&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003Ev-on 縮寫\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;!-- full syntax --&gt;\n&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;\u002Fa&gt;\n\n&lt;!-- shorthand --&gt;\n&lt;a @click=&quot;doSomething&quot;&gt; ... &lt;\u002Fa&gt;\n\n&lt;!-- shorthand with dynamic argument (2.6.0+) --&gt;\n&lt;a @[event]=&quot;doSomething&quot;&gt; ... &lt;\u002Fa&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n",toc:{title:"[Note] Vue (part 1) - Instance &amp; Template",subtitles:["安裝套件","Declarative Rendering 聲名式渲染","Event Listeners 事件監聽器","Composing with Components 組件化應用構建","Vue Instance 實例","Template Syntax 模板語法"]},wordCount:2139}}}}(null,"2024-12-15T00:00:00.000Z"));