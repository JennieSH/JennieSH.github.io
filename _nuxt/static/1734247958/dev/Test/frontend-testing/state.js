window.__NUXT__=(function(a,b,c){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1734247958",layout:"default",error:a,serverRendered:true,routePath:"\u002Fdev\u002FTest\u002Ffrontend-testing",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}},globalRefs:{},ssrRefs:{"articleMatter-Test-frontend-testing":{info:{title:b,fileName:"frontend-testing",description:"初探前端測試的世界～",createdAt:c,updatedAt:c,tags:["Test"]},content:"\u003Ch6\u003Etags: \u003Ccode\u003ETest\u003C\u002Fcode\u003E\u003C\u002Fh6\u003E\n\u003Ch1 id=\"前端常見測試類型\" title=\"前端常見測試類型\"\u003E前端常見測試類型\u003C\u002Fh1\u003E\n\u003Ch2 id=\"前言\" title=\"前言\"\u003E\u003Ca href=\"#前言\"\u003E前言\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E針對功能性測試（Functional Testing）類型有很多種，\u003Ccode\u003EUnit Testing\u003C\u002Fcode\u003E、\u003Ccode\u003EEnd-to-End (E2E) Testing\u003C\u002Fcode\u003E 、\u003Ccode\u003EIntegration Testing\u003C\u002Fcode\u003E、\u003Ccode\u003ESnapshot Testing\u003C\u002Fcode\u003E …等。\u003C\u002Fp\u003E\n\u003Cp\u003E以前端來說，最常見功能性測試會被劃分成這三個，組成一個測試金字塔：\u003C\u002Fp\u003E\n\u003Cimg decoding=\"async\" loading=\"lazy\" src=\"https:\u002F\u002Fsemaphoreci.com\u002Fwp-content\u002Fuploads\u002F2022\u002F03\u002Fpyramid-cost.jpg\" alt=\"Testing Pyramid\" class=\"img_ev3q\"\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E圖片來源： \u003Ca  href=\"https:\u002F\u002Fkeploy.io\u002Fdocs\u002Fconcepts\u002Freference\u002Fglossary\u002Fintegration-testing\u002F#heading\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EIntegration Testing With Keploy\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"單元測試 - Unit Testing\" title=\"單元測試 - Unit Testing\"\u003E\u003Ca href=\"#單元測試 - Unit Testing\"\u003E單元測試 - Unit Testing\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E針對個別單元（或程式碼區塊）進行的測試，這些單元可以是函式、React 中的 Hook、Vue 中的 Composable，或是某個元件。\u003C\u002Fp\u003E\n\u003Cp\u003E此類測試具有範圍小、成本低、效率高、執行快速等特點。透過練習撰寫單元測試，也可以幫助撰寫出更容易測試的程式碼（e.g. 盡量撰寫 Pure 的 Function，並避免 Side Effects 的產生），間接提升程式的易讀性與可維護性。\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cstrong\u003E撰寫時機\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E當對功能沒有信心時或邏輯複雜到無法一眼看透\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E\u003Cstrong\u003E推薦工具\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fjestjs.io\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EJest\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fvite.dev\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EVitest\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2 id=\"整合測試 - Integration Testing\" title=\"整合測試 - Integration Testing\"\u003E\u003Ca href=\"#整合測試 - Integration Testing\"\u003E整合測試 - Integration Testing\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E測試多個單元如何協同工，可以是元件、API 呼叫和函式的組合測試。可以更貼近使用者實際操作和互動，注重測試個別的 User Flow。\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cstrong\u003E撰寫時機\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E需要組件間互動後的預期結果(模擬點擊等事件、API 回傳資料後畫面…)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E\u003Cstrong\u003E推薦工具\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E如果需要測試到 DOM 渲染， 除了上面 unit test 本身套件外，依照專案使用的前端框架，要再安裝對應的相關套件：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fjsdom\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Ejsdom\u003C\u002Fa\u003E \u002F \u003Ca  href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fhappy-dom\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Ehappy-dom\u003C\u002Fa\u003E：提供 Browser API 模擬瀏覽器環境\u003C\u002Fli\u003E\n\u003Cli\u003E前端框架測試套件\n\u003Cul\u003E\n\u003Cli\u003EReact - \u003Ca  href=\"https:\u002F\u002Ftesting-library.com\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EReact Testing Library\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003EVue - \u003Ca  href=\"https:\u002F\u002Ftest-utils.vuejs.org\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EVue Test Utils\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2 id=\"端對端測試 - End-to-End (E2E)\" title=\"端對端測試 - End-to-End (E2E)\"\u003E\u003Ca href=\"#端對端測試 - End-to-End (E2E)\"\u003E端對端測試 - End-to-End (E2E)\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E模擬真實用戶場景的環境中(瀏覽器)的用戶流程。有時候單元和整合測試獨立測試都沒問題，但是各種交互後，有預期以外的情境發生，但因為是黑箱測試關係，有時候會比較難快速找到問題點，可搭配其他測試，加快 debug 速度。\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cstrong\u003E撰寫時機\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E測試完整 user 操作流程(從開啟瀏覽器開始)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E\u003Cstrong\u003E推薦工具\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fwww.cypress.io\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ECypress\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fplaywright.dev\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EPlaywright\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2 id=\"結語\" title=\"結語\"\u003E\u003Ca href=\"#結語\"\u003E結語\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E如果想開始寫第一個測試，沒有頭緒或時間有限下，可以挑選功能很重要的來寫測試，如註冊、購買等，接下來再慢慢補齊其他的測試。\u003C\u002Fp\u003E\n",toc:{title:b,subtitles:["前言","單元測試 - Unit Testing","整合測試 - Integration Testing","端對端測試 - End-to-End (E2E)","結語"]},wordCount:270}}}}(null,"前端常見測試類型","2024-12-15T00:00:00.000Z"));