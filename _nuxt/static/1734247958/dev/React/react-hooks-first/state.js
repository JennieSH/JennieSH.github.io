window.__NUXT__=(function(a,b){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1734247958",layout:"default",error:a,serverRendered:true,routePath:"\u002Fdev\u002FReact\u002Freact-hooks-first",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}},globalRefs:{},ssrRefs:{"articleMatter-React-react-hooks-first":{info:{title:"[Note] React Hooks 整理 (上)",fileName:"react-hooks-first",description:"內容為 useState、useEffect、useLayoutEffect、useMemo、useCallback 的整理。",createdAt:b,updatedAt:b,tags:["React","React Hooks"]},content:"\u003Ch6\u003Etags: \u003Ccode\u003EReact\u003C\u002Fcode\u003E、\u003Ccode\u003EReact Hooks\u003C\u002Fcode\u003E\u003C\u002Fh6\u003E\n\u003Ch1 id=\"[Note] React Hooks 整理（上）\" title=\"[Note] React Hooks 整理（上）\"\u003E[Note] React Hooks 整理（上）\u003C\u002Fh1\u003E\n\u003Cp\u003E最近開始學習 React Hooks，趁這次機會整理常見的 Hooks，目前尚缺兩個額外 Hooks (\u003Ca  href=\"https:\u002F\u002Fzh-hant.reactjs.org\u002Fdocs\u002Fhooks-reference.html#useimperativehandle\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E\u003Ccode\u003EuseImperativeHandle\u003C\u002Fcode\u003E\u003C\u002Fa\u003E &amp; \u003Ca  href=\"https:\u002F\u002Fzh-hant.reactjs.org\u002Fdocs\u002Fhooks-reference.html#usedebugvalue\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E\u003Ccode\u003EuseDebugValue\u003C\u002Fcode\u003E\u003C\u002Fa\u003E)，內容慢慢增加中 🏃\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003E文章\u003C\u002Fth\u003E\n\u003Cth\u003EHooks\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca  href=\"https:\u002F\u002Fjenniesh.github.io\u002Fdev\u002FReact\u002Freact-hooks-first\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EReact Hooks 整理 (上)\u003C\u002Fa\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003EuseState、useEffect、useLayoutEffect、useMemo、useCallback\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca  href=\"https:\u002F\u002Fjenniesh.github.io\u002Fdev\u002FReact\u002Freact-hooks-second\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EReact Hooks 整理 (下)\u003C\u002Fa\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003EuseRef、useContext、useReducer\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003Ch2 id=\"Why Hook?\" title=\"Why Hook?\"\u003E\u003Ca href=\"#Why Hook?\"\u003EWhy Hook?\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003E更方便在 component 之間共用 stateful 的邏輯\u003C\u002Fli\u003E\n\u003Cli\u003E解決 lifecycle 方法常常將不相關的邏輯混合在一起 e.g. event listener 和抓取資料設置在同個 \u003Ccode\u003EcomponentDidMount\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E降低初學者學習門檻，class 需要記得綁定和事先了解 \u003Ccode\u003Ethis\u003C\u002Fcode\u003E 在 JavaScript 中如何運作\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2 id=\"Hook 通用規則\" title=\"Hook 通用規則\"\u003E\u003Ca href=\"#Hook 通用規則\"\u003EHook 通用規則\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003E只在 \u003Cstrong\u003EReact function componen\u003C\u002Fstrong\u003Et 或\u003Cstrong\u003E自定義的 Hook\u003C\u002Fstrong\u003E 呼叫 Hook\u003C\u002Fli\u003E\n\u003Cli\u003E只在\u003Cstrong\u003E最上層\u003C\u002Fstrong\u003E呼叫 Hook：不要在迴圈、判斷式、或是嵌套 function 中呼叫 Hook\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 🚫： 不能放入條件式裡面\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EApp\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [count, setCount] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E);\n  }\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n    \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EReact\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  );\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"useState\" title=\"useState\"\u003E\u003Ca href=\"#useState\"\u003EuseState\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E使用方法\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 語法： const [state, setState] = useState(初始值)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [count, setCount] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E重點\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E使用陣列解構賦值，回傳的第一個值 \u003Ccode\u003Ecount\u003C\u002Fcode\u003E 為當前的 state，第二個值 \u003Ccode\u003EsetCount\u003C\u002Fcode\u003E 為可更新 state 的方法\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003EsetState\u003C\u002Fcode\u003E 可直接傳值，也可以傳入 function\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 兩種寫法都有相同效果，一樣都會 +1\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 寫法一：直接傳值\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Eincrease\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n    \u003Cspan class=\"hljs-title function_\"\u003EsetCount\u003C\u002Fspan\u003E(count + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E);\n };\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 寫法二： function 可拿到 previous value\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Eincrease\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n    \u003Cspan class=\"hljs-title function_\"\u003EsetCount\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E(\u003Cspan class=\"hljs-params\"\u003EprevCount\u003C\u002Fspan\u003E)=&gt;\u003C\u002Fspan\u003E prevCount + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E);\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdetails class='spoiler'\u003E\u003Csummary\u003EsetState 補充\u003C\u002Fsummary\u003E\n\u003Cdiv class=\"info\"\u003E\n\u003Cp\u003E\u003Cstrong\u003E💡 \u003Ccode\u003EsetState\u003C\u002Fcode\u003E 使用 function 時機：\u003Cbr \u002F\u003E\n如果是有使用到 \u003Ccode\u003Eprevious value\u003C\u002Fcode\u003E 來設置新的 \u003Ccode\u003Evalue\u003C\u002Fcode\u003E 或彼此間有依賴關係。\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E雖然上面兩個寫法都可達到 \u003Cstrong\u003E+1\u003C\u002Fstrong\u003E，但在下面的例子就不適合直接傳值：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Eincrease\u003C\u002Fcode\u003E 內呼叫兩次 \u003Ccode\u003EsetCount\u003C\u002Fcode\u003E，當 \u003Ccode\u003Eincrease\u003C\u002Fcode\u003E 被觸發後，我們預期 \u003Ccode\u003Ecount\u003C\u002Fcode\u003E 會等於 2，但實際得到 \u003Cstrong\u003E1\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E因為 \u003Ccode\u003EsetCount(count + 1)\u003C\u002Fcode\u003E，裡面的 \u003Ccode\u003Ecount\u003C\u002Fcode\u003E 都還是當前 render 值 \u003Cstrong\u003E0\u003C\u002Fstrong\u003E，所以等於執行兩次 \u003Ccode\u003EsetCount(0 + 1)\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003ECount\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [count, setCount] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 預期為 2，但實際得到 1\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Eincrease\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n    \u003Cspan class=\"hljs-title function_\"\u003EsetCount\u003C\u002Fspan\u003E(count + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 此時 count 為 0，相當於 setCount(0 + 1)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-title function_\"\u003EsetCount\u003C\u002Fspan\u003E(count + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 此時 count 為 0，相當於 setCount(0 + 1)\u003C\u002Fspan\u003E\n  };\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n    \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{count}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonClick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{increase}\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E+\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  );\n};\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E這時改用 function 寫法， 確保是使用 \u003Ccode\u003Ecount\u003C\u002Fcode\u003E 的 \u003Ccode\u003Eprevious value\u003C\u002Fcode\u003E 而不是當前 render 後的值，就會如預期得到 \u003Cstrong\u003E2\u003C\u002Fstrong\u003E :\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003ECount\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [count, setCount] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Eincrease\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n    \u003Cspan class=\"hljs-title function_\"\u003EsetCount\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003EprevCount\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E prevCount + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 相當於 setCount(0 + 1)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-title function_\"\u003EsetCount\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003EprevCount\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E prevCount + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 相當於 setCount(1 + 1)\u003C\u002Fspan\u003E\n  };\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n    \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{count}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonClick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{increase}\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E+\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  );\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003E初始值有兩種表示方式，可直接傳入值，也可以用 function\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cdetails class='spoiler'\u003E\u003Csummary\u003E初始值 補充\u003C\u002Fsummary\u003E\n\u003Cdiv class=\"info\"\u003E\n\u003Cp\u003E💡 \u003Cstrong\u003E初始值使用 function 寫法的時機：\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E因為每次 render 時候都會重新執行 \u003Ccode\u003EuseSate\u003C\u002Fcode\u003E，如果\u003Cstrong\u003E初始值是需要非常複雜計算時\u003C\u002Fstrong\u003E，每次更新需要重新計算，就會降低效能，這時就需要傳入 function，\u003Cstrong\u003E該 function 只會在初始 render 時被調用\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 直接傳值：\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EcomplexCompute\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n \u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;execution&quot;\u003C\u002Fspan\u003E);\n \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n};\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003ECount\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 每次按 +1 時，都會印出 ‘execution’\u003C\u002Fspan\u003E\n \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [count, setCount] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-title function_\"\u003EcomplexCompute\u003C\u002Fspan\u003E());\n\n \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Eincrease\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n   \u003Cspan class=\"hljs-title function_\"\u003EsetCount\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003EpreCount\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E preCount + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E);\n };\n\n \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n   \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;&gt;\u003C\u002Fspan\u003E\n     \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{count}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n     \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonClick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{increase}\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E+\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n   \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n );\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 改用 function\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003ECount\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 首次渲染印出 ‘execution’，後續按 +1 時，不會在印出字了\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [count, setCount] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EcomplexCompute\u003C\u002Fspan\u003E());\n\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Eincrease\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n    \u003Cspan class=\"hljs-title function_\"\u003EsetCount\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003EpreCount\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E preCount + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E);\n  };\n\n    ...\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdetails\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003EsetState\u003C\u002Fcode\u003E 是完全覆蓋 state，而非 merge\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 直接整個覆寫 fruitDate\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EFruit\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [fruitDate, setFruitDate] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E({ \u003Cspan class=\"hljs-attr\"\u003Eamount\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Efruit\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;banana&quot;\u003C\u002Fspan\u003E });\n\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Echange\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n    \u003Cspan class=\"hljs-title function_\"\u003EsetFruitDate\u003C\u002Fspan\u003E({ \u003Cspan class=\"hljs-attr\"\u003Efruit\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;apple&quot;\u003C\u002Fspan\u003E }); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 觸發後，fruitDate 為 { fruit: &quot;apple&quot; }\u003C\u002Fspan\u003E\n  };\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonClick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{change}\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003Echange fruit\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 使用擴展運算子，保留物件內其他屬性\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EFruit\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [fruitDate, setFruitDate] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E({ \u003Cspan class=\"hljs-attr\"\u003Eamount\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Efruit\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;banana&quot;\u003C\u002Fspan\u003E });\n\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Echange\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n    \u003Cspan class=\"hljs-title function_\"\u003EsetFruitDate\u003C\u002Fspan\u003E({ ...fruitData, \u003Cspan class=\"hljs-attr\"\u003Efruit\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;apple&quot;\u003C\u002Fspan\u003E }); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 觸發後，fruitDate 為 { amount: 1 fruit: &quot;apple&quot; }\u003C\u002Fspan\u003E\n  };\n\n  ...\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"useEffect\" title=\"useEffect\"\u003E\u003Ca href=\"#useEffect\"\u003EuseEffect\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E使用方法\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 語法： useEffect(()=&gt;{},[依賴項])\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-title function_\"\u003EuseEffect\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 每次畫面重新渲染後都會執行\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;executed&quot;\u003C\u002Fspan\u003E)\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E重點\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E處理 side effect 事件，e.g. ajax、EventLister\u003C\u002Fli\u003E\n\u003Cli\u003EDOM 改變 =&gt; 渲染畫面 =&gt; 調用 \u003Ccode\u003EuseEffect\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E可以有多個依賴項，皆放在陣列中 \u003Ccode\u003EuseEffect(()=&gt;{ ... },[a, b, c])\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E搭配第二參數傳入依賴和 return function，可達到原先 React 生命週期 \u003Ccode\u003EcomponentDidMount\u003C\u002Fcode\u003E、\u003Ccode\u003EcomponentDidUpdate\u003C\u002Fcode\u003E 和 \u003Ccode\u003EcomponentWillUnmount\u003C\u002Fcode\u003E 的效果\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EFruit\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [fruit, setFruit] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;banana&quot;\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [count, setCount] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F A. 第二參數不帶入，每次畫面重新渲染，都會執行\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-title function_\"\u003EuseEffect\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 當 fruit 或 count 值改變，畫面重新渲染，都會印出 “changed”\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;changed&quot;\u003C\u002Fspan\u003E);\n  });\n\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F B. 第二參數，傳入空陣列 []，只有在第一次渲染時執行\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-title function_\"\u003EuseEffect\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 只在第一次渲染會印出 &quot;init&quot;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;init&quot;\u003C\u002Fspan\u003E);\n  }, []);\n\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F C. 第二參數，傳入依賴項，只有在依賴項改變時才執行\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-title function_\"\u003EuseEffect\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 只有 count 值改變，畫面更新，才會印出 &quot;count changed&quot;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 如果是 fruit 值改變則不觸發\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;count changed&quot;\u003C\u002Fspan\u003E);\n  }, [count]);\n\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F D. return 的 function 會在組件移除後會觸發\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-title function_\"\u003EuseEffect\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 初次渲染時，建立 setInterval\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E timer = \u003Cspan class=\"hljs-built_in\"\u003EsetInterval\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n      \u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;hello world&quot;\u003C\u002Fspan\u003E);\n    }, \u003Cspan class=\"hljs-number\"\u003E1000\u003C\u002Fspan\u003E);\n\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 在組件移除後會執行 clearInterval\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003EclearInterval\u003C\u002Fspan\u003E(timer);\n  }, []);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n    \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonClick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E setFruit(&quot;apple&quot;)}&gt;change fruit - {fruit}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E;\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonClick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E setCount(prev =&gt; prev + 1)}&gt;increase count - {count}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  );\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"useLayoutEffect\" title=\"useLayoutEffect\"\u003E\u003Ca href=\"#useLayoutEffect\"\u003EuseLayoutEffect\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E使用方法\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 語法： useLayoutEffect(()=&gt;{},[依賴項])\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-title function_\"\u003EuseLayoutEffect\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n     \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 每次畫面重新渲染前都會執行\u003C\u002Fspan\u003E\n     \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 對 DOM 操作 ....\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;executed&quot;\u003C\u002Fspan\u003E)\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E重點\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003EDOM 改變 =&gt; 調用 \u003Ccode\u003EuseLayoutEffect\u003C\u002Fcode\u003E =&gt; 渲染畫面\u003C\u002Fli\u003E\n\u003Cli\u003E謹慎使用，會影響使用者體驗，因為需要等待 \u003Ccode\u003EuseLayoutEffect\u003C\u002Fcode\u003E 內程式實行完，才會渲染出畫面\u003C\u002Fli\u003E\n\u003Cli\u003E使用時機：需要基於 DOM 的 Layout 做額外操作 e.g. 測量 DOM\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E範例 (useEffect v.s. useLayoutEffect)\u003C\u002Fh3\u003E\n\u003Ch4\u003E- 使用 useEffect\u003C\u002Fh4\u003E\n\u003Cp\u003E在慢動作的 gif 裡面可以看到一開始的 \u003Ccode\u003Ehi\u003C\u002Fcode\u003E (\u003Ccode\u003Etop: 0\u003C\u002Fcode\u003E) 先出現在按鈕旁邊，在下一個畫面才套用 \u003Ccode\u003Etop: 100px\u003C\u002Fcode\u003E，如果用正常速度看，就會看到第一個 hi 會閃爍一下，這對使用者體驗很不好。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 使用 useEffect\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EFoo\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [show, setShow] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E greetRef = \u003Cspan class=\"hljs-title function_\"\u003EuseRef\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-title function_\"\u003EuseEffect\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (greetRef.\u003Cspan class=\"hljs-property\"\u003Ecurrent\u003C\u002Fspan\u003E === \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E) \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E;\n\n    (greetRef.\u003Cspan class=\"hljs-property\"\u003Ecurrent\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EHTMLSpanElement\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-property\"\u003Estyle\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003Etop\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;100px&quot;\u003C\u002Fspan\u003E;\n  }, [show]);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n    \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonClick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E setShow(prev =&gt; !prev)}&gt; toggle Button\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      {show &amp;&amp; (\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eref\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{greetRef}\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Estyle\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{{\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eposition:\u003C\u002Fspan\u003E &quot;\u003Cspan class=\"hljs-attr\"\u003Eabsolute\u003C\u002Fspan\u003E&quot; }}&gt;\u003C\u002Fspan\u003E\n          hi\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      )}\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  );\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FgGzLETq.gif\" alt=\"useEffect\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E- 使用 useLayoutEffect\u003C\u002Fh4\u003E\n\u003Cp\u003E因為在渲染畫面前，先執行完好 \u003Ccode\u003Ehi\u003C\u002Fcode\u003E 的 \u003Ccode\u003Etop: 100px\u003C\u002Fcode\u003E，所以在看到畫面時，已經所設定的位置上了。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 使用 useLayoutEffect\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EFoo\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [show, setShow] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E greetRef = \u003Cspan class=\"hljs-title function_\"\u003EuseRef\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-title function_\"\u003EuseLayoutEffect\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (greetRef.\u003Cspan class=\"hljs-property\"\u003Ecurrent\u003C\u002Fspan\u003E === \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E) \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E;\n\n    (greetRef.\u003Cspan class=\"hljs-property\"\u003Ecurrent\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EHTMLSpanElement\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-property\"\u003Estyle\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003Etop\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;100px&quot;\u003C\u002Fspan\u003E;\n  }, [show]);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n    \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonClick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E setShow(prev =&gt; !prev)}&gt; toggle Button\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      {show &amp;&amp; (\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eref\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{greetRef}\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Estyle\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{{\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eposition:\u003C\u002Fspan\u003E &quot;\u003Cspan class=\"hljs-attr\"\u003Eabsolute\u003C\u002Fspan\u003E&quot; }}&gt;\u003C\u002Fspan\u003E\n          hi\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      )}\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  );\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002Fk5IHSoW.gif\" alt=\"useLayoutEffect\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"useMemo\" title=\"useMemo\"\u003E\u003Ca href=\"#useMemo\"\u003EuseMemo\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E使用方法\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 語法： const data = useMemo(()=&gt;{ return 值 },[依賴項])\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E memoizedValue = \u003Cspan class=\"hljs-title function_\"\u003EuseMemo\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EcomputeExpensiveValue\u003C\u002Fspan\u003E(a, b), [a, b]);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003E可以將\u003Cstrong\u003E函式返回值 cached\u003C\u002Fstrong\u003E（跟 Vue 的 computed 很像)，並回傳一個 \u003Ca  href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FMemoization\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Ememoized\u003C\u002Fa\u003E 的值\u003C\u002Fli\u003E\n\u003Cli\u003EuseMemo 的 function 會在 render 期間執行\u003C\u002Fli\u003E\n\u003Cli\u003E可傳入依賴 array，當依賴改變時才重新計算，不提供則每次都計算\u003C\u002Fli\u003E\n\u003Cli\u003E需額外記憶體儲存變數，相當於以空間換時間，所以簡單的計算 \u002F 值，要避免濫用\u003C\u002Fli\u003E\n\u003Cli\u003E使用情境：當值需要昂貴計算得到，但不需要每次 render 都進行重新計算，可使用 useMemo 來優化\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E範例\u003C\u002Fh3\u003E\n\u003Cp\u003E由於每次畫面更新渲染都會執行 \u003Ccode\u003EslowFunc\u003C\u002Fcode\u003E，即使我們只想 toggle theme 時，還是要等待 for 迴圈結束，導致 dark theme 的畫面更新會有延遲。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 模擬複雜計算\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EslowFunc\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003Enum\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E i = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E; i &lt;= \u003Cspan class=\"hljs-number\"\u003E1000000000\u003C\u002Fspan\u003E; i++) {}\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E num * \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E;\n};\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EFruit\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [num, setNumber] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [dark, setDark] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E doubleNumber = \u003Cspan class=\"hljs-title function_\"\u003EslowFunc\u003C\u002Fspan\u003E(num); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 每次渲染都會執行\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E theme = {\n    \u003Cspan class=\"hljs-attr\"\u003Ecolor\u003C\u002Fspan\u003E: dark ? \u003Cspan class=\"hljs-string\"\u003E&quot;white&quot;\u003C\u002Fspan\u003E : \u003Cspan class=\"hljs-string\"\u003E&quot;black&quot;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003EbackgroundColor\u003C\u002Fspan\u003E: dark ? \u003Cspan class=\"hljs-string\"\u003E&quot;black&quot;\u003C\u002Fspan\u003E : \u003Cspan class=\"hljs-string\"\u003E&quot;white&quot;\u003C\u002Fspan\u003E\n  };\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n    \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Einput\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Etype\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;number&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Evalue\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{num}\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonChange\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{e\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E setNumber(parseInt(e.target.value))} \u002F&gt;\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{doubleNumber}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonClick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E setDark(!dark)} style={theme}&gt;\n        toggle theme\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  );\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E使用 useMemo 改寫並指定依賴後，在 toggle theme 就不會再進入 for 迴圈，能及時變更顏色了\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EslowFunc\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003Enum\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E i = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E; i &lt;= \u003Cspan class=\"hljs-number\"\u003E1000000000\u003C\u002Fspan\u003E; i++) {}\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E num * \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E;\n};\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EFruit\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [num, setNumber] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [dark, setDark] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 指定 num 為依賴的值，只有 num 改變值，才呼叫 slowFunc\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E doubleNumber = \u003Cspan class=\"hljs-title function_\"\u003EuseMemo\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EslowFunc\u003C\u002Fspan\u003E(num), [num]);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E theme = {\n    \u003Cspan class=\"hljs-attr\"\u003Ecolor\u003C\u002Fspan\u003E: dark ? \u003Cspan class=\"hljs-string\"\u003E&quot;white&quot;\u003C\u002Fspan\u003E : \u003Cspan class=\"hljs-string\"\u003E&quot;black&quot;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003EbackgroundColor\u003C\u002Fspan\u003E: dark ? \u003Cspan class=\"hljs-string\"\u003E&quot;black&quot;\u003C\u002Fspan\u003E : \u003Cspan class=\"hljs-string\"\u003E&quot;white&quot;\u003C\u002Fspan\u003E\n  };\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (...);\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"useCallback\" title=\"useCallback\"\u003E\u003Ca href=\"#useCallback\"\u003EuseCallback\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E使用方法\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 語法： const cb = useCallback(callback, [依賴項])\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E memoizedCallback = \u003Cspan class=\"hljs-title function_\"\u003EuseCallback\u003C\u002Fspan\u003E(\n  \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-title function_\"\u003EdoSomething\u003C\u002Fspan\u003E(a, b);\n  },\n  [a, b],\n);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003E與 \u003Ccode\u003EuseMemo\u003C\u002Fcode\u003E 概念大致相同，\u003Cstrong\u003E\u003Ccode\u003EuseMemo\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 儲存 function \u003Cstrong\u003Ereturn 回來的值\u003C\u002Fstrong\u003E，\u003Cstrong\u003E\u003Ccode\u003EuseCallback\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 儲存\u003Cstrong\u003E整個 function\u003C\u002Fstrong\u003E，\u003Ccode\u003EuseCallback(fn, deps)\u003C\u002Fcode\u003E 相等於 \u003Ccode\u003EuseMemo(() =&gt; fn, deps)\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E可傳入依賴 array，當依賴改變時才重新宣告跟建立 function\u003C\u002Fli\u003E\n\u003Cli\u003E使用情境：當子組件有依賴父組件傳遞 function，父組件的 function 可使用 \u003Ccode\u003EuseCallback\u003C\u002Fcode\u003E 優化，來防止不必要的 render\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E範例\u003C\u002Fh3\u003E\n\u003Cp\u003E當每次 Parent Component(\u003Ccode\u003E&lt;Foo&gt;\u003C\u002Fcode\u003E)的 \u003Ccode\u003Enum\u003C\u002Fcode\u003E 或 \u003Ccode\u003Edark\u003C\u002Fcode\u003E 值變動時， 畫面會重新渲染，\u003Ccode\u003E&lt;Foo&gt;\u003C\u002Fcode\u003E 內的 \u003Ccode\u003EgetItems\u003C\u002Fcode\u003E 也跟著被重新宣告跟建立，等於 Child Component(\u003Ccode\u003E&lt;List&gt;\u003C\u002Fcode\u003E) 每次接收不同的 \u003Ccode\u003EgetItems\u003C\u002Fcode\u003E，也跟著重新渲染（即使值不變，只有 \u003Ccode\u003Edark\u003C\u002Fcode\u003E 變動的情境）。\u003C\u002Fp\u003E\n\u003Ch4\u003E- 不使用 useCallback\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Child Component\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EList\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E{ getItems }\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [items, setItems] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E([]);\n\n  \u003Cspan class=\"hljs-title function_\"\u003EuseEffect\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-title function_\"\u003EsetItems\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-title function_\"\u003EgetItems\u003C\u002Fspan\u003E());\n    \u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;executed&quot;\u003C\u002Fspan\u003E); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F num 或 dark 值變動時，&lt;List&gt; 都會 rerender，印出 executed\u003C\u002Fspan\u003E\n  }, [getItems]);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E items.\u003Cspan class=\"hljs-title function_\"\u003Emap\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Eitem\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ekey\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{item}\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{item}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n};\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Parent Component\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EFoo\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [num, setNumber] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [dark, setDark] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 一般宣告函式\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EgetItems\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; [num, num + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, num + \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E];\n\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E theme = {\n    \u003Cspan class=\"hljs-attr\"\u003Ecolor\u003C\u002Fspan\u003E: dark ? \u003Cspan class=\"hljs-string\"\u003E&quot;white&quot;\u003C\u002Fspan\u003E : \u003Cspan class=\"hljs-string\"\u003E&quot;black&quot;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003EbackgroundColor\u003C\u002Fspan\u003E: dark ? \u003Cspan class=\"hljs-string\"\u003E&quot;black&quot;\u003C\u002Fspan\u003E : \u003Cspan class=\"hljs-string\"\u003E&quot;white&quot;\u003C\u002Fspan\u003E\n  };\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n    \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Einput\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Etype\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;number&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Evalue\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{num}\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonChange\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{e\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E setNumber(parseInt(e.target.value))} \u002F&gt;\n\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonClick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E setDark(prev =&gt; !prev)} style={theme}&gt;\n        toggle theme\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EList\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EgetItems\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{getItems}\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  );\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E- 使用 useCallback\u003C\u002Fh4\u003E\n\u003Cp\u003E使用 useCallback，並傳入 \u003Ccode\u003Enum\u003C\u002Fcode\u003E 當作依賴項，接下來當 \u003Ccode\u003Enum\u003C\u002Fcode\u003E 值改變時，\u003Ccode\u003EgetItems\u003C\u002Fcode\u003E 這個 function 才會重新被建立。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Child Component\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EList\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E{ getItems }: { getItems: () =&gt; number[] }\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [items, setItems] = useState&lt;number[]&gt;([]);\n\n  \u003Cspan class=\"hljs-title function_\"\u003EuseEffect\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-title function_\"\u003EsetItems\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-title function_\"\u003EgetItems\u003C\u002Fspan\u003E());\n    \u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;executed&quot;\u003C\u002Fspan\u003E); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 只有在 num 值變動時，才印出 executed\u003C\u002Fspan\u003E\n  }, [getItems]);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E items.\u003Cspan class=\"hljs-title function_\"\u003Emap\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-params\"\u003Eitem\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ekey\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{item}\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{item}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n};\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Parent Component\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EFoo\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [num, setNumber] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [dark, setDark] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 使用 useCallback\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E getItems = \u003Cspan class=\"hljs-title function_\"\u003EuseCallback\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E [num, num + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, num + \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E], [num]);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E theme = { ... };\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n    \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Einput\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Etype\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;number&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Evalue\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{num}\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonChange\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{e\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E setNumber(parseInt(e.target.value))} \u002F&gt;\n\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonClick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E setDark(prev =&gt; !prev)} style={theme}&gt;\n        toggle theme\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EList\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EgetItems\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{getItems}\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  );\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"參考資料\" title=\"參考資料\"\u003E\u003Ca href=\"#參考資料\"\u003E參考資料\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Freactjs.org\u002Fdocs\u002Fgetting-started.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EReact 官方文件\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fwww.youtube.com\u002Fplaylist?list=PLZlA0Gpn_vH8EtggFGERCwMY5u5hOjf-h\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EWeb Dev Simplified - React Hooks\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n",toc:{title:"[Note] React Hooks 整理（上）",subtitles:["Why Hook?","Hook 通用規則","useState","useEffect","useLayoutEffect","useMemo","useCallback","參考資料"]},wordCount:2669}}}}(null,"2021-12-08T00:00:00.000Z"));