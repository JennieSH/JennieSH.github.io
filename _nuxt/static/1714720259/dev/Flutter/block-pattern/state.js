window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1714720259",layout:"default",error:a,serverRendered:true,routePath:"\u002Fdev\u002FFlutter\u002Fblock-pattern",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}},globalRefs:{},ssrRefs:{"articleMatter-Flutter-block-pattern":{info:{title:b,fileName:"block-pattern",description:"Flutter 用於處理 State Management 的設計模式之一，將業務邏輯與 View 邏輯拆開，更易於開發與維護。",createdAt:c,updatedAt:c,tags:["Flutter","Bloc Pattern","Bloc",d]},content:"\u003Ch6\u003Etags: \u003Ccode\u003EFlutter\u003C\u002Fcode\u003E、\u003Ccode\u003EBloc Pattern\u003C\u002Fcode\u003E、\u003Ccode\u003EBloc\u003C\u002Fcode\u003E、\u003Ccode\u003EStream\u003C\u002Fcode\u003E\u003C\u002Fh6\u003E\n\u003Ch1 id=\"[Note] BLoC Pattern\" title=\"[Note] BLoC Pattern\"\u003E[Note] BLoC Pattern\u003C\u002Fh1\u003E\n\u003Ch2 id=\"前言\" title=\"前言\"\u003E\u003Ca href=\"#前言\"\u003E前言\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003EBLoC（Business Logic Component）Pattern 是一種用於 Flutter 開發的設計模式，它將應用程序分成三個主要部分：界面、資料層和業務邏輯，並利用 Streams 管理資料流，以實現組件之間的解耦和資料共享。\u003C\u002Fp\u003E\n\u003Cp\u003E用原生 widgets 就可以實作，也有基於 BLoC Pattern 而開發的套件 - \u003Ca  href=\"https:\u002F\u002Fpub.dev\u002Fpackages\u002Fflutter_bloc\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E\u003Cstrong\u003Eflutter_bloc\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E，將方法封裝更容易維護和開發。\u003C\u002Fp\u003E\n\u003Cp\u003E首先要先了解 Stream 概念，因為 BLoC Pattern 核心是 Streams。\u003C\u002Fp\u003E\n\u003Ch2 id=\"Stream\" title=\"Stream\"\u003E\u003Ca href=\"#Stream\"\u003EStream\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003EFlutter 用來管理非同步的處理事件序列的概念，可想像 Stream 是一條河流或是通道，\u003Ccode\u003ESender\u003C\u002Fcode\u003E 經由 Stream 傳遞任何東西給 \u003Ccode\u003EReceiver\u003C\u002Fcode\u003E，\u003Ccode\u003EReceiver\u003C\u002Fcode\u003E 不會知道 \u003Ccode\u003ESender\u003C\u002Fcode\u003E 送的東西什麼時候會到和送什麼東西，只有能被動等東西到達。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003E\u003Ccode\u003EShipped Data\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E：可以是任何形式 data\u002Fevent\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E\u003Ccode\u003ESender\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E：傳送資料(傳遞的源頭)\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E\u003Ccode\u003EReceiver\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E：接收資料(傳遞的終點)，無法預期何時接收到資料\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E非同步行為\u003C\u002Fstrong\u003E，因為傳遞會需要消耗時間\u003C\u002Fli\u003E\n\u003Cli\u003E有順序性，\u003Cstrong\u003E先進先出\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FfSoh33V.png\" alt=\"\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E用 Stream 專有名詞表示：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E這條河流 ➡️ \u003Cstrong\u003E\u003Ccode\u003EStreamController\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003ESender\u003C\u002Fcode\u003E ➡️ \u003Cstrong\u003E\u003Ccode\u003ESink\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003EStreamController\u003C\u002Fcode\u003E 的入口\u003C\u002Fli\u003E\n\u003Cli\u003E使用 \u003Ccode\u003Eadd\u003C\u002Fcode\u003E 方法，將要傳送東西傳送出去\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003EReceiver\u003C\u002Fcode\u003E ➡️ \u003Cstrong\u003E\u003Ccode\u003EStream\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E，\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003EStreamController\u003C\u002Fcode\u003E 的出口\u003C\u002Fli\u003E\n\u003Cli\u003E使用 \u003Ccode\u003Elisten\u003C\u002Fcode\u003E 方法，監聽是否接收到東西\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FpOoN5Q8.png\" alt=\"\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"BLoC Pattern 優點\" title=\"BLoC Pattern 優點\"\u003E\u003Ca href=\"#BLoC Pattern 優點\"\u003EBLoC Pattern 優點\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Cstrong\u003E解耦\u003C\u002Fstrong\u003E：界面、業務邏輯和資料層分開，使它們可以獨立開發、測試和維護\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E可測試性\u003C\u002Fstrong\u003E：業務邏輯分離到單獨的組件中，可以方便地進行 Unit Test\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003Ecode 共用性\u003C\u002Fstrong\u003E：將業務邏輯分離到單獨的組件中，可以在多個 View 中重用\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E易維護\u003C\u002Fstrong\u003E：有良好的結構和清晰的職責分工，易於維護和擴展功能\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch2 id=\"BLoC pattern 實作\" title=\"BLoC pattern 實作\"\u003E\u003Ca href=\"#BLoC pattern 實作\"\u003EBLoC pattern 實作\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E範例原始碼：\u003Ca  href=\"https:\u002F\u002Fgithub.com\u002FJennieSH\u002Fflutter-appworks\u002Ftree\u002Ffeature\u002Fbloc-pattern\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ERepo 網址\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3\u003E目標\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FKxNUqct.png\" alt=\"\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E實作簡單的 Counter\u003C\u002Fli\u003E\n\u003Cli\u003E支援 \u003Ccode\u003E加一\u003C\u002Fcode\u003E、\u003Ccode\u003E減一\u003C\u002Fcode\u003E、\u003Ccode\u003EReset\u003C\u002Fcode\u003E，這三個功能\u003C\u002Fli\u003E\n\u003Cli\u003E由兩個 \u003Ccode\u003EStreamController\u003C\u002Fcode\u003E 組成 (\u003Ccode\u003EState StreamController\u003C\u002Fcode\u003E &amp; \u003Ccode\u003EEvent StreamController\u003C\u002Fcode\u003E)。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E首先專注做 \u003Ccode\u003EState StreamController\u003C\u002Fcode\u003E 和\u003Ccode\u003E加一\u003C\u002Fcode\u003E 功能。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002F6fWkPYS.png\" alt=\"\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FXUCjA0Y.png\" alt=\"\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003EStep1. 新增 Bloc 檔案，建立 State StreamController\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E定義 \u003Ccode\u003EStreamController\u003C\u002Fcode\u003E，因為預期 in\u002Fout 皆為數字， Type 為 \u003Ccode\u003Eint\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003E_XXXStreamController.sink\u003C\u002Fcode\u003E 可取得 Input proterty\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003E_XXXStreamController.stream\u003C\u002Fcode\u003E 可取得 Output proterty\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F counter_bloc.dart\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003ECounterBloc\u003C\u002Fspan\u003E \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F pipe\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Efinal\u003C\u002Fspan\u003E _stateStreamController = StreamController&lt;\u003Cspan class=\"hljs-built_in\"\u003Eint\u003C\u002Fspan\u003E&gt;();\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F input\u003C\u002Fspan\u003E\n  StreamSink&lt;\u003Cspan class=\"hljs-built_in\"\u003Eint\u003C\u002Fspan\u003E&gt; \u003Cspan class=\"hljs-keyword\"\u003Eget\u003C\u002Fspan\u003E counterSink =&gt; _stateStreamController.sink;\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F output\u003C\u002Fspan\u003E\n  Stream&lt;\u003Cspan class=\"hljs-built_in\"\u003Eint\u003C\u002Fspan\u003E&gt; \u003Cspan class=\"hljs-keyword\"\u003Eget\u003C\u002Fspan\u003E counterStream =&gt; _stateStreamController.stream;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003EStep2. 按鈕點擊時，利用 \u003Ccode\u003EcounterSink\u003C\u002Fcode\u003E 的 \u003Ccode\u003Eadd\u003C\u002Fcode\u003E 方法，傳遞 \u003Ccode\u003E_counter\u003C\u002Fcode\u003E 值\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003EcounterBloc.counterSink.add(_counter);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E此時點擊 “+”，數字不會增加，即使 onPressed 會觸發 _counter++，讓 \u003Ccode\u003E_counter\u003C\u002Fcode\u003E 值增加，但因為沒有使用如 \u003Ccode\u003EsetState\u003C\u002Fcode\u003E 等方法，去強迫 rebuild wiget，所以 Text 的內容永遠都會初次 mounted 的值，即為 0。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F main.dart\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003ECounter\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EStatefulWidget\u003C\u002Fspan\u003E \u003C\u002Fspan\u003E{ ... }\n\n\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003E_CounterState\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EState\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-title\"\u003ECounter\u003C\u002Fspan\u003E&gt; \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-built_in\"\u003Eint\u003C\u002Fspan\u003E _counter = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 1. 宣告 counterBloc\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Efinal\u003C\u002Fspan\u003E counterBloc = CounterBloc();\n\n  \u003Cspan class=\"hljs-meta\"\u003E@override\u003C\u002Fspan\u003E\n  Widget build(BuildContext context) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E Scaffold(\n      ...,\n      body: Center(\n        child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [\n          Text(\u003Cspan class=\"hljs-string\"\u003E&#x27;\u003Cspan class=\"hljs-subst\"\u003E$_counter\u003C\u002Fspan\u003E&#x27;\u003C\u002Fspan\u003E),\n          \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E SizedBox(\n            height: \u003Cspan class=\"hljs-number\"\u003E16\u003C\u002Fspan\u003E,\n          ),\n          IconButton(\n            onPressed: () {\n              _counter++;\n              \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 2. add state\u003C\u002Fspan\u003E\n              counterBloc.counterSink.add(_counter);\n            },\n            icon: \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E Icon(Icons.add_circle),\n            iconSize: \u003Cspan class=\"hljs-number\"\u003E36\u003C\u002Fspan\u003E,\n          )\n        ]),\n      ),\n    );\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003EStep3. 使用 \u003Ccode\u003EStreamBuilder\u003C\u002Fcode\u003E，監聽 \u003Ccode\u003E_counter\u003C\u002Fcode\u003E 值\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Ccode\u003EStreamBuilder\u003C\u002Fcode\u003E 中的參數:\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Estream\u003C\u002Fcode\u003E：傳入(欲 listen) target stream，只要監聽的資料改變，會 rebuild widget\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ebuilder\u003C\u002Fcode\u003E：回傳 widget\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E當在點擊 “+” 按鈕時，顯示的數字已經會如預期往上加了\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F main.dart\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003ECounter\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EStatefulWidget\u003C\u002Fspan\u003E \u003C\u002Fspan\u003E{ ... }\n\n\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003E_CounterState\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EState\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-title\"\u003ECounter\u003C\u002Fspan\u003E&gt; \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-built_in\"\u003Eint\u003C\u002Fspan\u003E _counter = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n\n  \u003Cspan class=\"hljs-keyword\"\u003Efinal\u003C\u002Fspan\u003E counterBloc = CounterBloc();\n\n  \u003Cspan class=\"hljs-meta\"\u003E@override\u003C\u002Fspan\u003E\n  Widget build(BuildContext context) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E Scaffold(\n      ...,\n      body: Center(\n        child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [\n          \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 1. wrap with StreamBuilder\u003C\u002Fspan\u003E\n          StreamBuilder(\n            \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 2. use builder and return widget\u003C\u002Fspan\u003E\n            stream:\n                counterBloc.counterStream,\n            builder: (context, snapshot) =&gt; Text(\n              \u003Cspan class=\"hljs-string\"\u003E&#x27;\u003Cspan class=\"hljs-subst\"\u003E$_counter\u003C\u002Fspan\u003E&#x27;\u003C\u002Fspan\u003E,\n              style: \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E TextStyle(fontSize: \u003Cspan class=\"hljs-number\"\u003E48\u003C\u002Fspan\u003E, fontWeight: FontWeight.bold),\n            ),\n          ),\n          \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E SizedBox(\n            height: \u003Cspan class=\"hljs-number\"\u003E16\u003C\u002Fspan\u003E,\n          ),\n          IconButton(\n            onPressed: () {\n              _counter++;\n              counterBloc.counterSink.add(_counter);\n            },\n            icon: \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E Icon(Icons.add_circle),\n            iconSize: \u003Cspan class=\"hljs-number\"\u003E36\u003C\u002Fspan\u003E,\n          )\n        ]),\n      ),\n    );\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cp\u003E接下來是建立 \u003Ccode\u003EEvent StreamController\u003C\u002Fcode\u003E，並實作 \u003Ccode\u003E減一\u003C\u002Fcode\u003E、\u003Ccode\u003EReset\u003C\u002Fcode\u003E 倆功能。\u003C\u002Fp\u003E\n\u003Cp\u003E大致流程如下：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E點擊 Button 會傳送 \u003Cstrong\u003E\u003Ccode\u003ECounterAction\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E \u003Cem\u003E(@ widget)\u003C\u002Fem\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E\u003Ccode\u003EeventStream\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 監聽 \u003Cstrong\u003E\u003Ccode\u003ECounterAction\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E \u003Cem\u003E(@ CounterBloc)\u003C\u002Fem\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E\u003Ccode\u003EcounterSink\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 傳遞 \u003Cstrong\u003E\u003Ccode\u003Ecounter\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 值 \u003Cem\u003E(@ CounterBloc)\u003C\u002Fem\u003E\u003C\u002Fli\u003E\n\u003Cli\u003Ewidget 使用 \u003Cstrong\u003E\u003Ccode\u003Esnapshot.data\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E，取得 \u003Cstrong\u003E\u003Ccode\u003Ecounter\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 值 \u003Cem\u003E(@ widget)\u003C\u002Fem\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E在\u003Ccode\u003EEvent StreamController\u003C\u002Fcode\u003E stream 接收到的資料會直接由 \u003Ccode\u003EState StreamController\u003C\u002Fcode\u003E sink 傳入，這段是在 \u003Ccode\u003ECounterBloc\u003C\u002Fcode\u003E 內實作，外面使用的 widget 都不需要知道實作細節。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002F6DuL2fC.png\" alt=\"\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FKxNUqct.png\" alt=\"\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003EStep4. \u003Ccode\u003ECounterBloc\u003C\u002Fcode\u003E 內建立 Event StreamController\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E新增 action 的 enum\n\u003Cblockquote\u003E\n\u003Cp\u003Eaction 和 event 這邊概念是共通的，也可取名叫 CounterAction\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E宣告 counter 變數\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E\u003Ccode\u003EeventStream\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 使用 listen 方法，監聽 \u003Cstrong\u003E\u003Ccode\u003ECounterAction\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E\u003Ccode\u003EcounterSink\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 使用 add 方法，傳遞運算過後 \u003Cstrong\u003E\u003Ccode\u003Ecounter\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 值\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F counter_bloc.dart\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 定義出 counter actions\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eenum\u003C\u002Fspan\u003E CounterAction { INCREMENT, DECREMENT, RESET }\n\n\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003ECounterBloc\u003C\u002Fspan\u003E \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-keyword\"\u003Elate\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Eint\u003C\u002Fspan\u003E counter;\n\n  \u003Cspan class=\"hljs-keyword\"\u003Efinal\u003C\u002Fspan\u003E _stateStreamController = StreamController&lt;\u003Cspan class=\"hljs-built_in\"\u003Eint\u003C\u002Fspan\u003E&gt;();\n  StreamSink&lt;\u003Cspan class=\"hljs-built_in\"\u003Eint\u003C\u002Fspan\u003E&gt; \u003Cspan class=\"hljs-keyword\"\u003Eget\u003C\u002Fspan\u003E counterSink =&gt; _stateStreamController.sink;\n  Stream&lt;\u003Cspan class=\"hljs-built_in\"\u003Eint\u003C\u002Fspan\u003E&gt; \u003Cspan class=\"hljs-keyword\"\u003Eget\u003C\u002Fspan\u003E counterStream =&gt; _stateStreamController.stream;\n\n  \u003Cspan class=\"hljs-keyword\"\u003Efinal\u003C\u002Fspan\u003E _eventStreamController = StreamController&lt;CounterAction&gt;();\n  StreamSink&lt;CounterAction&gt; \u003Cspan class=\"hljs-keyword\"\u003Eget\u003C\u002Fspan\u003E eventSink =&gt; _eventStreamController.sink;\n  Stream&lt;CounterAction&gt; \u003Cspan class=\"hljs-keyword\"\u003Eget\u003C\u002Fspan\u003E eventStream =&gt; _eventStreamController.stream;\n\n  CounterBloc() {\n    counter = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F listen change in the stream (CounterAction)\u003C\u002Fspan\u003E\n    eventStream.listen((event) {\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (event == CounterAction.INCREMENT) {\n        counter++;\n      } \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (event == CounterAction.DECREMENT) {\n        counter--;\n      } \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (event == CounterAction.RESET) {\n        counter = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n      }\n\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 傳遞運算過後的 counter 值\u003C\u002Fspan\u003E\n      counterSink.add(counter);\n    });\n  }\n}\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003EStep5. 按鈕點擊時，利用 \u003Ccode\u003EeventSink\u003C\u002Fcode\u003E 的 \u003Ccode\u003Eadd\u003C\u002Fcode\u003E 方法，傳遞 \u003Ccode\u003ECounterAction\u003C\u002Fcode\u003E\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E移除 widget 內的 \u003Ccode\u003E_counter\u003C\u002Fcode\u003E，新增 \u003Cstrong\u003E\u003Ccode\u003EinitialData\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ccode\u003EinitialData\u003C\u002Fcode\u003E：初始值，不設定的話，一開始會為 null\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E從 \u003Cstrong\u003E\u003Ccode\u003EStreamBuilder\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 的 \u003Cstrong\u003E\u003Ccode\u003Esnapshot.data\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 取得 \u003Cstrong\u003E\u003Ccode\u003Ecounter\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 值\u003C\u002Fli\u003E\n\u003Cli\u003EonPress 觸發的函式，改成由 \u003Cstrong\u003E\u003Ccode\u003EeventSink\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 傳遞 \u003Cstrong\u003E\u003Ccode\u003ECounterAction\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F main.dart\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003ECounter\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EStatefulWidget\u003C\u002Fspan\u003E \u003C\u002Fspan\u003E{...}\n\n\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003E_CounterState\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EState\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-title\"\u003ECounter\u003C\u002Fspan\u003E&gt; \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-keyword\"\u003Efinal\u003C\u002Fspan\u003E counterBloc = CounterBloc();\n\n  \u003Cspan class=\"hljs-meta\"\u003E@override\u003C\u002Fspan\u003E\n  Widget build(BuildContext context) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E Scaffold(\n      ...,\n      body: Center(\n        child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [\n          StreamBuilder(\n            stream: counterBloc.counterStream,\n            \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 不給 init data，一開始會拿到 null\u003C\u002Fspan\u003E\n            initialData: \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E,\n            \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F get value via snapshot.data\u003C\u002Fspan\u003E\n            builder: (context, snapshot) =&gt; Text(\n              \u003Cspan class=\"hljs-string\"\u003E&#x27;\u003Cspan class=\"hljs-subst\"\u003E${snapshot.data}\u003C\u002Fspan\u003E&#x27;\u003C\u002Fspan\u003E,\n              style: \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E TextStyle(fontSize: \u003Cspan class=\"hljs-number\"\u003E48\u003C\u002Fspan\u003E, fontWeight: FontWeight.bold),\n            ),\n          ),\n          \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E SizedBox(\n            height: \u003Cspan class=\"hljs-number\"\u003E16\u003C\u002Fspan\u003E,\n          ),\n          Row(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              IconButton(\n                onPressed: () {\n                  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F INCREMENT 事件\u003C\u002Fspan\u003E\n                  counterBloc.eventSink.add(CounterAction.INCREMENT);\n                },\n                icon: \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E Icon(Icons.add_circle),\n                iconSize: \u003Cspan class=\"hljs-number\"\u003E36\u003C\u002Fspan\u003E,\n              ),\n              IconButton(\n                onPressed: () {\n                  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F DECREMENT 事件\u003C\u002Fspan\u003E\n                  counterBloc.eventSink.add(CounterAction.DECREMENT);\n                },\n                icon: \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E Icon(Icons.remove_circle),\n                iconSize: \u003Cspan class=\"hljs-number\"\u003E36\u003C\u002Fspan\u003E,\n              ),\n              IconButton(\n                onPressed: () {\n                 \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F RESET 事件\u003C\u002Fspan\u003E\n                  counterBloc.eventSink.add(CounterAction.RESET);\n                },\n                icon: \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E Icon(Icons.loop_outlined),\n                iconSize: \u003Cspan class=\"hljs-number\"\u003E36\u003C\u002Fspan\u003E,\n              ),\n            ],\n          )\n         ]\n        ),\n      ),\n    );\n  }\n}\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"參考資料\" title=\"參考資料\"\u003E\u003Ca href=\"#參考資料\"\u003E參考資料\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=K6ETAfGZl4k\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EBLoC Pattern with Flutter\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=w6XWjpBK4W8&amp;list=PLptHs0ZDJKt_T-oNj_6Q98v-tBnVf-S_o&amp;index=1\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EIntroduction to “BLoC - from Zero To HERO” Series\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fjuejin.cn\u002Fpost\u002F6844903689082109960\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EFlutter | 状态管理探索篇——BLoC(三)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n",toc:{title:b,subtitles:["前言",d,"BLoC Pattern 優點","BLoC pattern 實作","參考資料"]}}}}}(null,"[Note] BLoC Pattern","2023-04-14T00:00:00.000Z","Stream"));