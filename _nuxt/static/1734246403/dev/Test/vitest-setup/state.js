window.__NUXT__=(function(a,b,c){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1734246403",layout:"default",error:a,serverRendered:true,routePath:"\u002Fdev\u002FTest\u002Fvitest-setup",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}},globalRefs:{},ssrRefs:{"articleMatter-Test-vitest-setup":{info:{title:b,fileName:"vitest-setup",description:"什麼是 Vitest？",createdAt:c,updatedAt:c,tags:["Test","Vitest"]},content:"\u003Ch1 id=\"Vitest - 介紹和建置\" title=\"Vitest - 介紹和建置\"\u003EVitest - 介紹和建置\u003C\u002Fh1\u003E\n\u003Ch2 id=\"什麼是 Vitest ?\" title=\"什麼是 Vitest ?\"\u003E\u003Ca href=\"#什麼是 Vitest ?\"\u003E什麼是 Vitest ?\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003EVitest 是一個基於 Vite 構建的測試框架，不僅可以與 Vite 搭配使用，統一開發、測試、建構的設定，也可以\u003Cstrong\u003E獨立使用，不需要依賴 Vite\u003C\u002Fstrong\u003E。功能包括單元測試時，最常見的模擬、快照和覆蓋率報告等。\u003C\u002Fp\u003E\n\u003Cp\u003E與前端另外一個常見的單元測試框架 Jest 相比，是個急起直追的後起之秀，並解決使用 Jest 遇到的幾個痛點，也高兼容了 Jest 的 API。\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EVitest 啟發於在 Vite 開發測試時，現有單元測試框架中，想用來測試 Vite 都會存在一些問題，無法完美被解決，所以才有誕生 Vitest 的想法，可以參考 Vitest 團隊中 Anthony Fu 在 \u003Ca  href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=FDEf3iWEgFI\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EFast Unit Testing With Vitest\u003C\u002Fa\u003E 2:45 的訪談。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"Vitest v.s. Jest\" title=\"Vitest v.s. Jest\"\u003E\u003Ca href=\"#Vitest v.s. Jest\"\u003EVitest v.s. Jest\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E1. Performance（效能）\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003EVitest\u003C\u002Fstrong\u003E：支援熱模組替換（HMR）和 ESM，不需要經過 bundle，測試執行速度通常比 Jest 更快。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003EJest\u003C\u002Fstrong\u003E：模組解析較複雜，功能較多，可能在大型專案中稍慢。需要額外的轉換步驟來處理程式碼，且不支援 async 轉換和 ESM，需維護兩套設定檔。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E2. Payload（負載）\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003EVitest\u003C\u002Fstrong\u003E：約 26 MB \u002F 61 個依賴套件\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003EJest\u003C\u002Fstrong\u003E：約 32 MB \u002F 196 個依賴套件\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E3. API\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E兩者 API 高度相似，間接降低遷移的難度。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E4. Configuration（配置）\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003EVitest\u003C\u002Fstrong\u003E：較為簡單，如果有使用 Vite，甚至可以共用設定文件。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003EJest\u003C\u002Fstrong\u003E：較為靈活，但相對複雜，需要單獨的設定文件。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E範例：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E使用 TypeScript，Vitest 可以開箱即用，但 Jest 需要再做轉譯的設定。\u003C\u002Fli\u003E\n\u003Cli\u003EVitest 在開發環境下跑測試時，預設為監聽模式（watch mode），在 CI 階段自動轉換為單次運行模式（single run mode），Jest 則需要另外加參數設定。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E5. ESM Support（ESM 支援）\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003EVitest\u003C\u002Fstrong\u003E：原生支持 ESM。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003EJest\u003C\u002Fstrong\u003E：尚未支援，\u003Ca  href=\"https:\u002F\u002Fgithub.com\u002Fjestjs\u002Fjest\u002Fissues\u002F9430\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E相關功能\u003C\u002Fa\u003E還在開發中。在瀏覽器環境下，模組需先轉換成 CommonJS 才能執行。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E6. Community（社群）\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003EVitest\u003C\u002Fstrong\u003E：社群相對較新，文件和教學文略少於 Jest。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003EJest\u003C\u002Fstrong\u003E：老牌測試框架，擁有大量的插件、教學文和豐富的生態系，遇到問題時更容易找到解決方案。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2 id=\"環境建置\" title=\"環境建置\"\u003E\u003Ca href=\"#環境建置\"\u003E環境建置\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E安裝\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Enpm install -D vitest\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E如果想直接創新的專案練習，可以改用下面的指令，或使用\u003Ca  href=\"https:\u002F\u002Fstackblitz.com\u002Fedit\u002Fvitest-dev-vitest-1f6vvm?file=README.md&amp;initialPath=__vitest__\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E線上版 Vitest\u003C\u002Fa\u003E\u003Cstrong\u003E：\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E# 使用 vite 創建一個新專案\u003C\u002Fspan\u003E\nnpm create vite\n\u003Cspan class=\"hljs-comment\"\u003E# 選擇完專案設定後，再安裝 vitest\u003C\u002Fspan\u003E\nnpm install -D vitest\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E[補充]：\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E版本要求： Vite &gt;=v5.0.0 和 Node &gt;=v18.0.0\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3\u003E新增測試指令\u003C\u002Fh3\u003E\n\u003Cp\u003E在 \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E，新增測試指令：\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F package.json\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003E&quot;scripts&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003E&quot;dev&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;next dev&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003E&quot;build&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;next build&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003E&quot;test&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;vitest&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 新增這行\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E,\u003C\u002Fspan\u003E\n  ...\n\u003Cspan class=\"hljs-punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E新增 Vitest 設定檔\u003C\u002Fh3\u003E\n\u003Cp\u003E在根目錄中新增 \u003Ccode\u003Evitest.config.ts\u003C\u002Fcode\u003E 檔案，並在 \u003Ccode\u003Etest\u003C\u002Fcode\u003E 屬性下，新增相關的測試設定：\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F vitest.config.ts\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { defineConfig } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&#x27;vitest\u002Fconfig&#x27;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EdefineConfig\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Etest\u003C\u002Fspan\u003E: {\n      ...  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 在此新增測試相關的設定\u003C\u002Fspan\u003E\n  },\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cstrong\u003E常見的設定：\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003Eglobal\u003C\u002Fstrong\u003E - 預設為 \u003Ccode\u003Efalse\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E預設使用時，Vitest 並沒有直接提供全域 API，都需要指定 import。如果要把 API 暴露在全域，可以新增 \u003Ccode\u003Eglobals: true\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EdefineConfig\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Etest\u003C\u002Fspan\u003E: {\n      ...,\n      \u003Cspan class=\"hljs-attr\"\u003Eglobals\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 當 API 調用時，不需要再指定引入\u003C\u002Fspan\u003E\n    },\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E為了讓全域 API 可以支援 TypeScript，需要將 \u003Ccode\u003Evitest\u002Fglobals\u003C\u002Fcode\u003E 添加到 \u003Ccode\u003Etsconfig.json\u003C\u002Fcode\u003E 中的 \u003Ccode\u003Etypes\u003C\u002Fcode\u003E 的選項中：\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F tsconfig.json\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003E&quot;compilerOptions&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-punctuation\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003E&quot;types&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-string\"\u003E&quot;vitest\u002Fglobals&quot;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-punctuation\"\u003E]\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003Eenvironment -\u003C\u002Fstrong\u003E 預設為 \u003Ccode\u003Enode\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E測試的執行環境，如果是寫前端，可以使用 jsdom 或 happy-dom：\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EdefineConfig\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Etest\u003C\u002Fspan\u003E: {\n      ...,\n      \u003Cspan class=\"hljs-attr\"\u003Eenvironment\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;jsdom&quot;\u003C\u002Fspan\u003E,\n    },\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E[補充]\u003C\u002Fstrong\u003E &gt; \u003Ca  href=\"https:\u002F\u002Fcn.vitest.dev\u002Fconfig\u002F#environmentmatchglobs\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EenvironmentMatchGlobs\u003C\u002Fa\u003E 可以針對不同檔案跑在不同環境上。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E[補充]\u003C\u002Fstrong\u003E\u003Cbr \u002F\u003E\n如果專案有使用 Vite，Vitest 會自動讀取根目錄的 \u003Ccode\u003Evite.config.ts\u003C\u002Fcode\u003E，可與 Vite 共用統一的設定檔。如果想配置不同設定，可以另外新增 \u003Ccode\u003Evitest.config.ts\u003C\u002Fcode\u003E，該檔案優先級為最高。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E更多設定可參考 @\u003Ca  href=\"https:\u002F\u002Fvitest.dev\u002Fconfig\u002F#configuring-vitest\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EConfiguring Vitest\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"測試檔案名規則\" title=\"測試檔案名規則\"\u003E\u003Ca href=\"#測試檔案名規則\"\u003E測試檔案名規則\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E測試檔案文件名，需要包含 \u003Ccode\u003E.test.\u003C\u002Fcode\u003E 或 \u003Ccode\u003E.spec.\u003C\u002Fcode\u003E，例如：\u003Ccode\u003Esum.test.js\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Ch2 id=\"運行測試\" title=\"運行測試\"\u003E\u003Ca href=\"#運行測試\"\u003E運行測試\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E在開發環境下預設為\u003Cstrong\u003E監聽模式(watch mode)\u003C\u002Fstrong\u003E，當修改源程式碼或測試文件時，\u003Cstrong\u003E只會自動重新運行相關的測試\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Enpm run \u003Cspan class=\"hljs-built_in\"\u003Etest\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"測試覆蓋率 - Coverage\" title=\"測試覆蓋率 - Coverage\"\u003E\u003Ca href=\"#測試覆蓋率 - Coverage\"\u003E測試覆蓋率 - Coverage\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E安裝套件\u003C\u002Fh3\u003E\n\u003Cp\u003E要覆蓋率報告，需要另外安裝相應套件包：\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E# For v8\u003C\u002Fspan\u003E\nnpm i -D @vitest\u002Fcoverage-v8\n\n\u003Cspan class=\"hljs-comment\"\u003E# For istanbul\u003C\u002Fspan\u003E\nnpm i -D @vitest\u002Fcoverage-istanbul\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E常用設定\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Eprovider\u003C\u002Fcode\u003E - 覆蓋率報告的提供者，預設是 v8\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ereporter\u003C\u002Fcode\u003E - 覆蓋率報告輸出的類型\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003EreportsDirectory\u003C\u002Fcode\u003E - 覆蓋率報告檔案的位置，預設是在根目錄創建一個 \u003Ccode\u003Ecoverage\u003C\u002Fcode\u003E 的資料夾存放\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F vitest.config.ts\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { defineConfig } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&#x27;vitest\u002Fconfig&#x27;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EdefineConfig\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Etest\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Ecoverage\u003C\u002Fspan\u003E: {\n      \u003Cspan class=\"hljs-attr\"\u003Eprovider\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;v8&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 支援 istanbul 或自定義\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Ereporter\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-string\"\u003E&quot;json&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;html&quot;\u003C\u002Fspan\u003E],\n      \u003Cspan class=\"hljs-attr\"\u003EreportsDirectory\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;.\u002Ftests\u002Funit\u002Fcoverage&quot;\u003C\u002Fspan\u003E\n    },\n  },\n  ...\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E更多覆蓋率報告的設定可參考 @\u003Ca  href=\"https:\u002F\u002Fvitest.dev\u002Fconfig\u002F#coverage\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EVitest Coverage\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3\u003E產生覆蓋率報告\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Enpx vitest --coverage\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"\u003Cstrong\u003EVS Code\u003C\u002Fstrong\u003E Extension\" title=\"\u003Cstrong\u003EVS Code\u003C\u002Fstrong\u003E Extension\"\u003E\u003Ca href=\"#\u003Cstrong\u003EVS Code\u003C\u002Fstrong\u003E Extension\"\u003E\u003Cstrong\u003EVS Code\u003C\u002Fstrong\u003E Extension\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E如果不習慣用終端機下指令，推薦安裝官方 VScode 套件 - \u003Ca  href=\"https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=vitest.explorer\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EVitest\u003C\u002Fa\u003E，錯誤會直接顯示 VScode 上。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.ibb.co\u002FbJCbCf2\u002F202203292020.gif\" alt=\"\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"\u003Cstrong\u003E參考資料\u003C\u002Fstrong\u003E\" title=\"\u003Cstrong\u003E參考資料\u003C\u002Fstrong\u003E\"\u003E\u003Ca href=\"#\u003Cstrong\u003E參考資料\u003C\u002Fstrong\u003E\"\u003E\u003Cstrong\u003E參考資料\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fvitest.dev\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EVitest 官方\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=FDEf3iWEgFI\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EFast Unit Testing With Vitest\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=G-4zgIPsjkU\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EHow to use Vitest with Jest-DOM and React Testing Library\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=adBPXEUhj6Q\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ESwitching From Jest To Vitest - Should You Take The Step?\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n",toc:{title:b,subtitles:["什麼是 Vitest ?","Vitest v.s. Jest","環境建置","測試檔案名規則","運行測試","測試覆蓋率 - Coverage","VS Code Extension","參考資料"]},wordCount:906}}}}(null,"Vitest - 介紹和建置","2024-12-15T00:00:00.000Z"));