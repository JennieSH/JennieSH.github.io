window.__NUXT__=(function(a,b,c){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1734246403",layout:"default",error:a,serverRendered:true,routePath:"\u002Fdev\u002FTypeScript\u002Ftypescript-basic-types",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}},globalRefs:{},ssrRefs:{"articleMatter-TypeScript-typescript-basic-types":{info:{title:b,fileName:"typescript-basic-types",description:"TypeScript 基本型別複習筆記。",createdAt:c,updatedAt:c,tags:["TypeScript"]},content:"\u003Ch1 id=\"[Note] TypeScript - The Basic Types\" title=\"[Note] TypeScript - The Basic Types\"\u003E[Note] TypeScript - The Basic Types\u003C\u002Fh1\u003E\n\u003Ch2 id=\"Why TypeScript?\" title=\"Why TypeScript?\"\u003E\u003Ca href=\"#Why TypeScript?\"\u003EWhy TypeScript?\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003E在編譯階段避免掉型別錯誤\u003C\u002Fli\u003E\n\u003Cli\u003E更好的語法支持 (autocompletion)\u003C\u002Fli\u003E\n\u003Cli\u003E可讀性、可維護性高\u003C\u002Fli\u003E\n\u003Cli\u003E更好開發體驗 (debugging)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2 id=\"原始資料型別 - The primitives\" title=\"原始資料型別 - The primitives\"\u003E\u003Ca href=\"#原始資料型別 - The primitives\"\u003E原始資料型別 - The primitives\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E布林值 boolean\u003C\u002Fh3\u003E\n\u003Cp\u003E使用 \u003Ccode\u003Eboolean\u003C\u002Fcode\u003E 定義布林值型別\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EisDone\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Eboolean\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"warning\"\u003E\n\u003Cp\u003E注意：使用建構函式 Boolean 建立的物件\u003Cstrong\u003E不是\u003C\u002Fstrong\u003E布林值，\u003Ccode\u003Enew Boolean()\u003C\u002Fcode\u003E 返回的是一個 Boolean 物件。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Type &#x27;Boolean&#x27; is not assignable to type &#x27;boolean&#x27;.\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F &#x27;boolean&#x27; is a primitive, but &#x27;Boolean&#x27; is a wrapper object. Prefer using &#x27;boolean&#x27; when possible.\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EcreatedByNewBoolean\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Eboolean\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EBoolean\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch3\u003E數值 number\u003C\u002Fh3\u003E\n\u003Cp\u003E使用 \u003Ccode\u003Enumber\u003C\u002Fcode\u003E 定義數值型別\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EdecLiteral\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E6\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EhexLiteral\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E0xf00d\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EbinaryLiteral\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E0b1010\u003C\u002Fspan\u003E; \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 10, 二進位制表示法\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EoctalLiteral\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E0o744\u003C\u002Fspan\u003E; \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 484, 八進位制表示法\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EnotANumber\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-title class_\"\u003ENa\u003C\u002Fspan\u003EN; \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Not A Number 是數值型別 ！！\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EinfinityNumber\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-title class_\"\u003EInfinity\u003C\u002Fspan\u003E;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E字串 string\u003C\u002Fh3\u003E\n\u003Cp\u003E使用 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 定義字串型別\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Egreet\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&#x27;Hello&#x27;\u003C\u002Fspan\u003E;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E空值 void\u003C\u002Fh3\u003E\n\u003Cp\u003E使用 \u003Ccode\u003Evoid\u003C\u002Fcode\u003E 表示沒有任何返回值的\u003Cstrong\u003E函式\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Eprint\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Evoid\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Hello&quot;\u003C\u002Fspan\u003E);\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"info\"\u003E\n\u003Cp\u003E\u003Ccode\u003Evoid\u003C\u002Fcode\u003E 用於函式，不能賦值給其他型別的變數\u003Cbr \u002F\u003E\n\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F incorrect\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eu\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Evoid\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Enum\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = u;\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Type &#x27;void&#x27; is not assignable to type &#x27;number&#x27;.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch3\u003ENull 和 Undefined\u003C\u002Fh3\u003E\n\u003Cp\u003E使用 \u003Ccode\u003Enull\u003C\u002Fcode\u003E 和 \u003Ccode\u003Eundefined\u003C\u002Fcode\u003E 定義變數\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eu\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003En\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"info\"\u003E\n\u003Cp\u003E\u003Ccode\u003Eundefined\u003C\u002Fcode\u003E 和 \u003Ccode\u003Enull\u003C\u002Fcode\u003E 是所有型別的子型別，可以賦值給 \u003Ccode\u003Enumber\u003C\u002Fcode\u003E 型別的變數。\u003Cbr \u002F\u003E\n\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F correct\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Enum\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch2 id=\"任意值 - any\" title=\"任意值 - any\"\u003E\u003Ca href=\"#任意值 - any\"\u003E任意值 - any\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E使用 \u003Ccode\u003Eany\u003C\u002Fcode\u003E 表示允許賦值為任意型別\u003C\u002Fp\u003E\n\u003Ch3\u003E可任意改變型別\u003C\u002Fh3\u003E\n\u003Cp\u003E如果是一個普通型別，在賦值或宣告型別後，再改變型別是不被允許的，但如果是 any 型別，則允許被賦值為任意型別。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F TypeSceipt 不會報錯\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EmyFavoriteNumber\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&#x27;seven&#x27;\u003C\u002Fspan\u003E;\nmyFavoriteNumber = \u003Cspan class=\"hljs-number\"\u003E7\u003C\u002Fspan\u003E;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E\u003Ccode\u003Eany\u003C\u002Fcode\u003E 返回的內容的型別都是 \u003Ccode\u003Eany\u003C\u002Fcode\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E宣告一個變數為任意值之後，對它的任何操作，返回的內容的型別都是任意值。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F TypeSceipt 不會報錯，跟使用 js 效果是一樣\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EanyThing\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&#x27;hello&#x27;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(anyThing.\u003Cspan class=\"hljs-property\"\u003EmyName\u003C\u002Fspan\u003E);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E未宣告型別的變數，視同 \u003Ccode\u003Eany\u003C\u002Fcode\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E變數如果在宣告的時候，未指定其型別，那麼它會被識別為任意值型別。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E something; \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 等同於 let something: any\u003C\u002Fspan\u003E\nsomething = \u003Cspan class=\"hljs-string\"\u003E&#x27;seven&#x27;\u003C\u002Fspan\u003E;\nsomething = \u003Cspan class=\"hljs-number\"\u003E7\u003C\u002Fspan\u003E;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"型別註解 - Type Annotation\" title=\"型別註解 - Type Annotation\"\u003E\u003Ca href=\"#型別註解 - Type Annotation\"\u003E型別註解 - Type Annotation\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E透過手動註解的方式，明確宣告資料型別，在變數、參數或屬性後面加上冒號 \u003Ccode\u003E:型別\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Egreet\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&#x27;Hello&#x27;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Emax\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E100\u003C\u002Fspan\u003E;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"型別推論 - Type Inference\" title=\"型別推論 - Type Inference\"\u003E\u003Ca href=\"#型別推論 - Type Inference\"\u003E型別推論 - Type Inference\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E如果沒有明確的指定型別，會依照型別推論的規則推斷出一個型別\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E myFavoriteNumber = \u003Cspan class=\"hljs-string\"\u003E&#x27;seven&#x27;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 等同於 let myFavoriteNumber: string = &#x27;seven&#x27;;\u003C\u002Fspan\u003E\nmyFavoriteNumber = \u003Cspan class=\"hljs-number\"\u003E7\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F index.ts(2,1): error TS2322: Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"聯合型別 - Union Types\" title=\"聯合型別 - Union Types\"\u003E\u003Ca href=\"#聯合型別 - Union Types\"\u003E聯合型別 - Union Types\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E聯合型別使用 \u003Ccode\u003E|\u003C\u002Fcode\u003E 分隔每個型別，表示取值可以為多種型別中的一種\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 代表 myFavoriteNumber 只能是 string 或者 number，其他型別會報錯\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EmyFavoriteNumber\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E | \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\nmyFavoriteNumber = \u003Cspan class=\"hljs-string\"\u003E&#x27;seven&#x27;\u003C\u002Fspan\u003E;\nmyFavoriteNumber = \u003Cspan class=\"hljs-number\"\u003E7\u003C\u002Fspan\u003E;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E存取聯合型別的屬性或方法\u003C\u002Fh3\u003E\n\u003Cp\u003E因 TypeScript 不確定一個聯合型別的變數到底是哪個型別，\u003Cstrong\u003E只能存取此聯合型別的所有型別裡共有的屬性或方法\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EgetLength\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Esomething: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E | \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E something.\u003Cspan class=\"hljs-property\"\u003Elength\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F index.ts(2,22): error TS2339: Property &#x27;length&#x27; does not exist on type &#x27;string | number&#x27;.\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F   Property &#x27;length&#x27; does not exist on type &#x27;number&#x27;.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Elength\u003C\u002Fcode\u003E 不是 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 和 \u003Ccode\u003Enumber\u003C\u002Fcode\u003E 的共有屬性，所以會報錯。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EmyFavoriteNumber\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E | \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\nmyFavoriteNumber = \u003Cspan class=\"hljs-string\"\u003E&#x27;seven&#x27;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(myFavoriteNumber.\u003Cspan class=\"hljs-property\"\u003Elength\u003C\u002Fspan\u003E); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 5\u003C\u002Fspan\u003E\nmyFavoriteNumber = \u003Cspan class=\"hljs-number\"\u003E7\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(myFavoriteNumber.\u003Cspan class=\"hljs-property\"\u003Elength\u003C\u002Fspan\u003E); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 編譯時報錯\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F index.ts(5,30): error TS2339: Property &#x27;length&#x27; does not exist on type &#x27;number&#x27;.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E第二行的 \u003Ccode\u003EmyFavoriteNumber\u003C\u002Fcode\u003E 被推斷成了 \u003Ccode\u003Estring\u003C\u002Fcode\u003E，可以存取 length 屬性。\u003C\u002Fp\u003E\n\u003Cp\u003E第四行的 \u003Ccode\u003EmyFavoriteNumber\u003C\u002Fcode\u003E 被推斷成了 \u003Ccode\u003Enumber\u003C\u002Fcode\u003E，\u003Ccode\u003Enumber\u003C\u002Fcode\u003E \u003Ccode\u003E無length\u003C\u002Fcode\u003E 屬性時就報錯了。\u003C\u002Fp\u003E\n\u003Ch2 id=\"物件的型別 介面 - Interface\" title=\"物件的型別 介面 - Interface\"\u003E\u003Ca href=\"#物件的型別 介面 - Interface\"\u003E物件的型別 介面 - Interface\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E使用介面（Interfaces）來定義物件的型別，具體如何行動則需要由類別（classes）去實現（implement）\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E介面一般首字母大寫\u003C\u002Fli\u003E\n\u003Cli\u003E賦值的時候，變數的形狀必須和介面的形狀保持一致\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 定義了一個介面 Person\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Eage\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 定義了一個變數 tom，它的型別是 Person\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Etom\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E = {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Tom&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Eage\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E25\u003C\u002Fspan\u003E\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Eage\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 少\u002F多 屬性皆不允許，需與 interface 一樣\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Etom\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E = {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Tom&#x27;\u003C\u002Fspan\u003E\n};\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F index.ts(6,5): error TS2322: Type &#x27;{ name: string; }&#x27; is not assignable to type &#x27;Person&#x27;.\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F   Property &#x27;age&#x27; is missing in type &#x27;{ name: string; }&#x27;.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E可選屬性 Optional Properties\u003C\u002Fh3\u003E\n\u003Cp\u003E使用 \u003Ccode\u003E?\u003C\u002Fcode\u003E 表示可選屬性，但仍然不允許新增未定義的屬性。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    age?: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Etom\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E = {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Tom&#x27;\u003C\u002Fspan\u003E\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    age?: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Etom\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E = {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Tom&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Eage\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E25\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Egender\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;male&#x27;\u003C\u002Fspan\u003E\n};\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F examples\u002Fplayground\u002Findex.ts(9,5): error TS2322: Type &#x27;{ name: string; age: number; gender: string; }&#x27; is not assignable to type &#x27;Person&#x27;.\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Object literal may only specify known properties, and &#x27;gender&#x27; does not exist in type &#x27;Person&#x27;.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E任意屬性 Indexable Types\u003C\u002Fh3\u003E\n\u003Cp\u003E如希望一個介面允許有任意的屬性，使用 \u003Ccode\u003E[propName: type]\u003C\u002Fcode\u003E 來表示任意屬性取 \u003Ccode\u003Etype\u003C\u002Fcode\u003E 型別的值\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F [propName: string] 定義了任意屬性取 string 型別的值\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    age?: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n    [\u003Cspan class=\"hljs-attr\"\u003EpropName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E]: \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Etom\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E = {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Tom&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Egender\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;male&#x27;\u003C\u002Fspan\u003E\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"warning\"\u003E\n\u003Cp\u003E一旦\u003Cstrong\u003E定義了任意屬性\u003C\u002Fstrong\u003E，那麼\u003Cstrong\u003E確定屬性和可選屬性的型別都必須是它的型別的子集\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    age?: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 使用 [propName: string] 定義了任意屬性取 string 型別的值\u003C\u002Fspan\u003E\n    [\u003Cspan class=\"hljs-attr\"\u003EpropName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E]: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Etom\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E = {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Tom&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Eage\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E25\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Egender\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;male&#x27;\u003C\u002Fspan\u003E\n};\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F index.ts(3,5): error TS2411: Property &#x27;age&#x27; of type &#x27;number&#x27; is not assignable to string index type &#x27;string&#x27;.\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F index.ts(7,5): error TS2322: Type &#x27;{ [x: string]: string | number; name: string; age: number; gender: string; }&#x27; is not assignable to type &#x27;Person&#x27;.\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F   Index signatures are incompatible.\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F     Type &#x27;string | number&#x27; is not assignable to type &#x27;string&#x27;.\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F       Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E任意屬性的值允許是 \u003Ccode\u003Estring\u003C\u002Fcode\u003E，但是可選屬性 \u003Ccode\u003Eage\u003C\u002Fcode\u003E 的值卻是 \u003Ccode\u003Enumber\u003C\u002Fcode\u003E，\u003Ccode\u003Enumber\u003C\u002Fcode\u003E 不是 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 的子屬性，所以報錯了。\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Cp\u003E如要確定 \u003Ccode\u003Einterface\u003C\u002Fcode\u003E 會存在兩個以上型別，任意屬性的型別可使用\u003Cstrong\u003E聯合型別\u003C\u002Fstrong\u003E，或是使用 \u003Cstrong\u003E\u003Ccode\u003Eany\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F age 屬性是可選的，可能為 undefined 型別\u003C\u002Fspan\u003E\n    age?: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F strict 模式一定要加上 undefined，否則會報錯\u003C\u002Fspan\u003E\n    [\u003Cspan class=\"hljs-attr\"\u003EpropName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E]: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E | \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E | \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Etom\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E = {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Tom&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Eage\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E25\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Egender\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;male&#x27;\u003C\u002Fspan\u003E\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"info\"\u003E\n\u003Cp\u003E\u003Cstrong\u003E補充：\u003C\u002Fstrong\u003E\u003Cbr \u002F\u003E\n\u003Ccode\u003E[propName: string]: string\u003C\u002Fcode\u003E 是指在 \u003Ccode\u003Einterface\u003C\u002Fcode\u003E 內的 \u003Ccode\u003Ekey\u003C\u002Fcode\u003E 的型別是 \u003Ccode\u003Estring\u003C\u002Fcode\u003E，TypeScript 會去約束確定屬性和可選屬性的 \u003Ccode\u003Ekey\u003C\u002Fcode\u003E 是 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 的型別，都必須是任意屬性的型別的子集。\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 會報錯，age 這個 key 型別是 string，所以他會被任意屬性的型別約束\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    age?: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n    [\u003Cspan class=\"hljs-attr\"\u003EpropName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E]: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E ;\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Property &#x27;age&#x27; of type &#x27;number | undefined&#x27; is not assignable to string index type &#x27;string&#x27;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 不報錯，propName 型別會是 number，不會去檢查非 number 型別的 key\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    age?: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n    [\u003Cspan class=\"hljs-attr\"\u003EpropName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E]: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E ;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Ekey 的類型會有 number 的情境，可以參考內置對象的型別 \u003Ca  href=\"https:\u002F\u002Fwillh.gitbook.io\u002Ftypescript-tutorial\u002Fbasics\u002Ftype-of-array#lei-bie-zhen-lie\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E\u003Ccode\u003EIArguments\u003C\u002Fcode\u003E\u003C\u002Fa\u003E。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch3\u003E唯讀屬性 readonly properties\u003C\u002Fh3\u003E\n\u003Cp\u003E希望物件中的一些欄位\u003Cstrong\u003E只能在建立的時候被賦值\u003C\u002Fstrong\u003E，那麼可以用 \u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E 定義唯讀屬性\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereadonly\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    age?: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n    [\u003Cspan class=\"hljs-attr\"\u003EpropName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E]: \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Etom\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E = {\n    \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E89757\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Tom&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Egender\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;male&#x27;\u003C\u002Fspan\u003E\n};\n\ntom.\u003Cspan class=\"hljs-property\"\u003Eid\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E9527\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F index.ts(14,5): error TS2540: Cannot assign to &#x27;id&#x27; because it is a constant or a read-only property.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E使用 \u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E 定義的屬性 id 初始化後，又被賦值了，所以報錯了。\u003C\u002Fp\u003E\n\u003Cdiv class=\"warning\"\u003E\n\u003Cp\u003E\u003Cstrong\u003E唯讀的約束存在於第一次給「物件」賦值的時候，而不是第一次給「唯讀屬性」賦值的時候\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereadonly\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    age?: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n    [\u003Cspan class=\"hljs-attr\"\u003EpropName\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E]: \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Etom\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003EPerson\u003C\u002Fspan\u003E = {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Tom&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003Egender\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;male&#x27;\u003C\u002Fspan\u003E\n};\n\ntom.\u003Cspan class=\"hljs-property\"\u003Eid\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E89757\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F index.ts(8,5): error TS2322: Type &#x27;{ name: string; gender: string; }&#x27; is not assignable to type &#x27;Person&#x27;.\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F   Property &#x27;id&#x27; is missing in type &#x27;{ name: string; gender: string; }&#x27;.\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F index.ts(13,5): error TS2540: Cannot assign to &#x27;id&#x27; because it is a constant or a read-only property.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E有兩個 error： 1. 對 tom 進行賦值的時候，沒有給 id 賦值 2. \u003Ccode\u003Etom.id\u003C\u002Fcode\u003E 賦值的時候，由於它是只讀屬性，所以報錯了\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch2 id=\"陣列的型別 - Array\" title=\"陣列的型別 - Array\"\u003E\u003Ca href=\"#陣列的型別 - Array\"\u003E陣列的型別 - Array\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E主要有三種表示式可以定義陣列的型別\u003C\u002Fp\u003E\n\u003Ch3\u003E型別 + []\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 數值型別的陣列，陣列內的值只允許是 number\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Efibonacci\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E[] = [\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E3\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E5\u003C\u002Fspan\u003E];\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003E陣列內的值不允許出現其他的型別\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Efibonacci\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E[] = [\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&#x27;1&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E3\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E5\u003C\u002Fspan\u003E];\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003E陣列的一些方法也會根據陣列在定義時約定的型別進行參數型別的限制\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Efibonacci\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E[] = [\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E3\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E5\u003C\u002Fspan\u003E];\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F push 方法只允許傳入 number 型別的參數，卻傳了個 string\u003C\u002Fspan\u003E\nfibonacci.\u003Cspan class=\"hljs-title function_\"\u003Epush\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;8&#x27;\u003C\u002Fspan\u003E);\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Argument of type &#x27;&quot;8&quot;&#x27; is not assignable to parameter of type &#x27;number&#x27;.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003EArray&lt;型別&gt;\u003C\u002Fh3\u003E\n\u003Cp\u003E使用陣列泛型（Array Generic) 來表示\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Efibonacci\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003EArray\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E&gt; = [\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E3\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E5\u003C\u002Fspan\u003E];\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003Einterface\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003ENumberArray\u003C\u002Fspan\u003E {\n    [\u003Cspan class=\"hljs-attr\"\u003Eindex\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E]: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Efibonacci\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003ENumberArray\u003C\u002Fspan\u003E = [\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E3\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E5\u003C\u002Fspan\u003E];\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003ENumberArray\u003C\u002Fcode\u003E 表示：只要 \u003Ccode\u003Eindex\u003C\u002Fcode\u003E 的型別是數字時，那麼值的型別必須是數字。\u003C\u002Fp\u003E\n\u003Cp\u003E很少這樣寫，通常用於特殊情境，例如：類別陣列。\u003C\u002Fp\u003E\n\u003Ch4\u003E類別陣列\u003C\u002Fh4\u003E\n\u003Cp\u003E類別陣列（Array-like Object）不是陣列型別，比如 \u003Ccode\u003Earguments\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ccode\u003Earguments\u003C\u002Fcode\u003E 為 JavaScript 的\u003Ca  href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E內建物件\u003C\u002Fa\u003E，它們直接在 TypeScript 中當做定義好了的型別。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eargs\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E[] = \u003Cspan class=\"hljs-variable language_\"\u003Earguments\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Type &#x27;IArguments&#x27; is missing the following properties from type &#x27;number[]&#x27;: pop, push, concat, join, and 24 more.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Earguments\u003C\u002Fcode\u003E 不能用普通的陣列的方式來描述，而應該用 interface，屬性可參考 \u003Ca  href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FFunctions\u002Farguments#properties\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EMDN\u003C\u002Fa\u003E。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eargs\u003C\u002Fspan\u003E: {\n        [\u003Cspan class=\"hljs-attr\"\u003Eindex\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E]: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n        \u003Cspan class=\"hljs-attr\"\u003Elength\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n        \u003Cspan class=\"hljs-attr\"\u003Ecallee\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003EFunction\u003C\u002Fspan\u003E;\n    } = \u003Cspan class=\"hljs-variable language_\"\u003Earguments\u003C\u002Fspan\u003E;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E我們除了約束當 \u003Ccode\u003Eindex\u003C\u002Fcode\u003E 的型別是數字時，值的型別必須是數字之外，也約束了它還有 \u003Ccode\u003Elength\u003C\u002Fcode\u003E 和 \u003Ccode\u003Ecallee\u003C\u002Fcode\u003E 兩個屬性，此時就不會報錯了。\u003C\u002Fp\u003E\n\u003Cdiv class=\"info\"\u003E\n\u003Cp\u003E常用的類別陣列 TypeScript 都有介面定義，如 \u003Ccode\u003EIArguments\u003C\u002Fcode\u003E、 \u003Ccode\u003ENodeList\u003C\u002Fcode\u003E、 \u003Ccode\u003EHTMLCollection\u003C\u002Fcode\u003E 等。\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F arguments 在 TypeScript 內建的介面定義為 IArguments\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E IArguments {\n    [\u003Cspan class=\"hljs-attr\"\u003Eindex\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E]: \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Elength\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Ecallee\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003EFunction\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eargs\u003C\u002Fspan\u003E: IArguments = \u003Cspan class=\"hljs-variable language_\"\u003Earguments\u003C\u002Fspan\u003E;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch4\u003Eany 陣列\u003C\u002Fh4\u003E\n\u003Cp\u003Eany 陣列內可允許出現任意型別\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Elist\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E[] = [\u003Cspan class=\"hljs-string\"\u003E&#x27;xcatliu&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E25\u003C\u002Fspan\u003E, { \u003Cspan class=\"hljs-attr\"\u003Ewebsite\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;http:\u002F\u002Fxcatliu.com&#x27;\u003C\u002Fspan\u003E }];\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"函式的型別 - Function Types\" title=\"函式的型別 - Function Types\"\u003E\u003Ca href=\"#函式的型別 - Function Types\"\u003E函式的型別 - Function Types\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca  href=\"https:\u002F\u002Fwww.cnblogs.com\u002Ffundebug\u002Fp\u002Fjavascript-first-class-function.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E函式是 JavaScript 中的一等公民\u003C\u002Fa\u003E：\u003Cbr \u002F\u003E\n它們和其他對象都一樣，可以像對待任何其他數據類型一樣對待它們，作為\u003Cstrong\u003E函數參數\u003C\u002Fstrong\u003E，可以作為\u003Cstrong\u003E函數返回值\u003C\u002Fstrong\u003E，也可以\u003Cstrong\u003E賦值給變量\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3\u003E函式宣告\u003C\u002Fh3\u003E\n\u003Cp\u003E常見的定義函式的方式 :\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E函式宣告（Function Declaration）\u003C\u002Fli\u003E\n\u003Cli\u003E函式表示式（Function Expression）\n\u003Cblockquote\u003E\n\u003Cp\u003ETypeScript 的型別定義中，\u003Ccode\u003E=&gt;\u003C\u002Fcode\u003E 用來表示函式的定義，左邊是輸入型別，需要用括號括起來，右邊是輸出型別\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F javascript\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 函式宣告（Function Declaration）\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ex, y\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x + y;\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 函式表示式（Function Expression）\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E mySum = \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003Ex, y\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x + y;\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F typescript\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 函式宣告（Function Declaration）\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E, y: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x + y;\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 函式表示式（Function Expression）\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EmySum\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-function\"\u003E(\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E, y: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E) =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E, y: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x + y;\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"info\"\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F mySum 的型別是透過賦值操作進行型別推論\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E mySum = \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E, y: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x + y;\n};\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 手動給 mySum 新增型別\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EmySum\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-function\"\u003E(\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E, y: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E) =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E, y: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x + y;\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E上面第二行的程式碼只對等號右側的匿名函式進行了型別定義，而等號左邊的 \u003Cstrong\u003E\u003Ccode\u003EmySum\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E，是透過賦值操作進行\u003Cstrong\u003E型別推論而推斷出來的\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Cul\u003E\n\u003Cli\u003E輸入多餘的（或者少於要求的）參數，是不被允許的\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E, y: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x + y;\n}\n\u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E3\u003C\u002Fspan\u003E);\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003Einterface 定義函式型別\u003C\u002Fh3\u003E\n\u003Cp\u003E使用 interface 的方式來定義一個函式需要符合的形狀\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003ESumFunc\u003C\u002Fspan\u003E {\n    (\u003Cspan class=\"hljs-attr\"\u003Ex\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ey\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E) : \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EmySum\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003ESumFunc\u003C\u002Fspan\u003E  = \u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E, y: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x + y;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E可選參數\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ch4\u003E使用 \u003Ccode\u003E?\u003C\u002Fcode\u003E 表示可選的參數\u003C\u002Fh4\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E, y?: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E(y) \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x+y;\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x ;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"warning\"\u003E\n\u003Cp\u003E\u003Cstrong\u003E使用 \u003Ccode\u003E?\u003C\u002Fcode\u003E 的情境下：\u003C\u002Fstrong\u003E\u003Cbr \u002F\u003E\n可選參數必須接在必需參數後面，\u003Cstrong\u003E可選參數後面不允許再出現必需參數\u003C\u002Fstrong\u003E。\u003Cbr \u002F\u003E\n\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ex?: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E, y: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E(x) \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x+y;\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E y ;\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F A required parameter cannot follow an optional parameter.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ch4\u003E參數預設值\u003C\u002Fh4\u003E\nTypeScript 會將添加了\u003Cstrong\u003E預設值的參數識別為可選參數\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002F2xll5gr.png\" alt=\"參數預設值\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E, y: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E {\n   \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x+y;\n}\n\n\u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 3\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E,\u003Cspan class=\"hljs-number\"\u003E5\u003C\u002Fspan\u003E) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 6\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"info\"\u003E\n\u003Cp\u003E\u003Cstrong\u003E使用預設值的情境下：\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003E不受\u003C\u002Fstrong\u003E「可選參數必須接在必需參數後面」的限制。\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E10\u003C\u002Fspan\u003E, y: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E {\n   \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x+y;\n}\n\n\u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E,\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 11\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-title function_\"\u003Esum\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E10\u003C\u002Fspan\u003E,\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 11\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch3\u003E剩餘參數\u003C\u002Fh3\u003E\n\u003Cp\u003E使用 \u003Ccode\u003E...rest\u003C\u002Fcode\u003E 的方式獲取函式中的剩餘參數\u003Ca  href=\"https:\u002F\u002Fes6.ruanyifeng.com\u002F#docs\u002Ffunction#rest%E5%BC%95%E6%95%B8\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E（rest 參數）\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F javascript\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Epush\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Earray, ...items\u003C\u002Fspan\u003E) {\n    items.\u003Cspan class=\"hljs-title function_\"\u003EforEach\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Eitem\u003C\u002Fspan\u003E) {\n        array.\u003Cspan class=\"hljs-title function_\"\u003Epush\u003C\u002Fspan\u003E(item);\n    });\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E a = [];\n\u003Cspan class=\"hljs-title function_\"\u003Epush\u003C\u002Fspan\u003E(a, \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E3\u003C\u002Fspan\u003E);\n\n\u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(a) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F [1, 2, 3]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F typescript\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Epush\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Earray: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E[], ...items: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E[]\u003C\u002Fspan\u003E) {\n    items.\u003Cspan class=\"hljs-title function_\"\u003EforEach\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Eitem\u003C\u002Fspan\u003E) {\n        array.\u003Cspan class=\"hljs-title function_\"\u003Epush\u003C\u002Fspan\u003E(item);\n    });\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ea\u003C\u002Fspan\u003E:\u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E[] = [];\n\u003Cspan class=\"hljs-title function_\"\u003Epush\u003C\u002Fspan\u003E(a, \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E3\u003C\u002Fspan\u003E);\n\n\u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(a) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F [1, 2, 3]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"warning\"\u003E\n\u003Cp\u003E注意，\u003Ca  href=\"https:\u002F\u002Fes6.ruanyifeng.com\u002F#docs\u002Ffunction#rest-%E5%8F%82%E6%95%B0\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Erest 參數\u003C\u002Fa\u003E之後不能再有其他參數（即只能是最後一個參數），否則會報錯，同 javascript ES6 規則。\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Ef\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ea:\u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E[], ...b:\u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E[], c:\u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E) {\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F ...\u003C\u002Fspan\u003E\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F A rest parameter must be last in a parameter list.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch3\u003E過載 (Function Overloads)\u003C\u002Fh3\u003E\n\u003Cp\u003E過載允許一個函式接受不同數量或型別參數時，作出不同的處理\u003C\u002Fp\u003E\n\u003Ch4\u003E聯合型別寫法\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 聯合型別\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Ereverse\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E | \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E | \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-keyword\"\u003Etypeof\u003C\u002Fspan\u003E x === \u003Cspan class=\"hljs-string\"\u003E&#x27;number&#x27;\u003C\u002Fspan\u003E) {\n        \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003ENumber\u003C\u002Fspan\u003E(x.\u003Cspan class=\"hljs-title function_\"\u003EtoString\u003C\u002Fspan\u003E().\u003Cspan class=\"hljs-title function_\"\u003Esplit\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-title function_\"\u003Ereverse\u003C\u002Fspan\u003E().\u003Cspan class=\"hljs-title function_\"\u003Ejoin\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E));\n    } \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E {\n        \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x.\u003Cspan class=\"hljs-title function_\"\u003Esplit\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-title function_\"\u003Ereverse\u003C\u002Fspan\u003E().\u003Cspan class=\"hljs-title function_\"\u003Ejoin\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E);\n    }\n}\n\n\u003Cspan class=\"hljs-title function_\"\u003Ereverse\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;abc&#x27;\u003C\u002Fspan\u003E) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F &quot;cba&quot;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-title function_\"\u003Ereverse\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E123\u003C\u002Fspan\u003E) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 321\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FZq0Ysby.png\" alt=\"聯合型別\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FCGBsFBw.png\" alt=\"聯合型別 1\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E利用聯合型別，實現數字和字串的反轉；但其\u003Cstrong\u003E缺點\u003C\u002Fstrong\u003E為，\u003Cstrong\u003E不能夠精確的表達\u003C\u002Fstrong\u003E，輸入為數字的時候，輸出也應該為數字，輸入為字串的時候，輸出也應該為字串。\u003C\u002Fp\u003E\n\u003Ch4\u003E過載定義寫法\u003C\u002Fh4\u003E\n\u003Cp\u003E使用過載定義多個 reverse 的函式型別，前幾次都是函式定義，最後一次是函式實現。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 過載定義多個 reverse 的函式型別\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Ereverse\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Ereverse\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Ereverse\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ex: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E | \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E | \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-keyword\"\u003Etypeof\u003C\u002Fspan\u003E x === \u003Cspan class=\"hljs-string\"\u003E&#x27;number&#x27;\u003C\u002Fspan\u003E) {\n        \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003ENumber\u003C\u002Fspan\u003E(x.\u003Cspan class=\"hljs-title function_\"\u003EtoString\u003C\u002Fspan\u003E().\u003Cspan class=\"hljs-title function_\"\u003Esplit\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-title function_\"\u003Ereverse\u003C\u002Fspan\u003E().\u003Cspan class=\"hljs-title function_\"\u003Ejoin\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E));\n    } \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E {\n        \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E x.\u003Cspan class=\"hljs-title function_\"\u003Esplit\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-title function_\"\u003Ereverse\u003C\u002Fspan\u003E().\u003Cspan class=\"hljs-title function_\"\u003Ejoin\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E);\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002Fmb3d1fw.png\" alt=\"過載\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FQgRqkLN.png\" alt=\"過載1\" \u002F\u003E\u003Cbr \u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FzTRooIw.png\" alt=\"過載2\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cdiv class=\"warning\"\u003E\n\u003Cp\u003E注意，TypeScript 會\u003Cstrong\u003E優先從最前面的函式定義開始匹配\u003C\u002Fstrong\u003E，所以多個函式定義如果有包含關係，需要\u003Cstrong\u003E優先把精確的定義寫在前面\u003C\u002Fstrong\u003E。\u003Ca  href=\"https:\u002F\u002Fwww.typescriptlang.org\u002Fdocs\u002Fhandbook\u002Fdeclaration-files\u002Fdo-s-and-don-ts.html#function-overloads\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E(Function Overloads - Ordering)\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch2 id=\"型別斷言 - Type Assertion\" title=\"型別斷言 - Type Assertion\"\u003E\u003Ca href=\"#型別斷言 - Type Assertion\"\u003E型別斷言 - Type Assertion\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E型別斷言可以用來手動指定一個值的型別\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 寫法一：\u003C\u002Fspan\u003E\n&lt;型別&gt;值\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 寫法二 (React 只能使用這種)：\u003C\u002Fspan\u003E\n值 \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E 型別\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E形如 \u003Ccode\u003E&lt;Foo&gt;\u003C\u002Fcode\u003E 的語法在 tsx 中表示的是一個 ReactNode，在 ts 中除了表示型別斷言之外，也可能是表示一個泛型。\u003C\u002Fp\u003E\n\u003Cp\u003E故建議大家在使用型別斷言時，統一使用\u003Ccode\u003E值 as 型別\u003C\u002Fcode\u003E這樣的語法。\u003C\u002Fp\u003E\n\u003Ch3\u003E斷言應用和特性\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E聯合型別可以被斷言為其中一個型別\u003C\u002Fli\u003E\n\u003Cli\u003E父類可以被斷言為子類\u003C\u002Fli\u003E\n\u003Cli\u003E任何型別都可以被斷言為 any\u003C\u002Fli\u003E\n\u003Cli\u003Eany 可以被斷言為任何型別\u003C\u002Fli\u003E\n\u003Cli\u003E要使得 A 能夠被斷言為 B，只需要 A 兼容 B 或 B 兼容 A 即可\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch4\u003E將一個聯合類型斷言為其中一個類型\u003C\u002Fh4\u003E\n\u003Cp\u003E當 TypeScript 不確定一個聯合類型的變量到底是哪個類型的時候，我們只能訪問此聯合類型的所有類型中共有的屬性或方法。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003ECat\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-title function_\"\u003Erun\u003C\u002Fspan\u003E(): \u003Cspan class=\"hljs-built_in\"\u003Evoid\u003C\u002Fspan\u003E;\n}\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EFish\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-title function_\"\u003Eswim\u003C\u002Fspan\u003E(): \u003Cspan class=\"hljs-built_in\"\u003Evoid\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EgetName\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Eanimal: Cat | Fish\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E animal.\u003Cspan class=\"hljs-property\"\u003Ename\u003C\u002Fspan\u003E;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E在還不確定類型的時候就訪問其中一個類型特有的屬性或方法，會報錯。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003ECat\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-title function_\"\u003Erun\u003C\u002Fspan\u003E(): \u003Cspan class=\"hljs-built_in\"\u003Evoid\u003C\u002Fspan\u003E;\n}\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EFish\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-title function_\"\u003Eswim\u003C\u002Fspan\u003E(): \u003Cspan class=\"hljs-built_in\"\u003Evoid\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F error: Cat 不存在 swim 方法\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EisFish\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Eanimal: Cat | Fish\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-keyword\"\u003Etypeof\u003C\u002Fspan\u003E animal.\u003Cspan class=\"hljs-property\"\u003Eswim\u003C\u002Fspan\u003E === \u003Cspan class=\"hljs-string\"\u003E&#x27;function&#x27;\u003C\u002Fspan\u003E) {\n        \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E;\n    }\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Property &#x27;swim&#x27; does not exist on type &#x27;Cat | Fish&#x27;.\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F   Property &#x27;swim&#x27; does not exist on type &#x27;Cat&#x27;.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E使用斷言改寫後，解決訪問 animal.swim 時報錯的問題。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003ECat\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-title function_\"\u003Erun\u003C\u002Fspan\u003E(): \u003Cspan class=\"hljs-built_in\"\u003Evoid\u003C\u002Fspan\u003E;\n}\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EFish\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-title function_\"\u003Eswim\u003C\u002Fspan\u003E(): \u003Cspan class=\"hljs-built_in\"\u003Evoid\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EisFish\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Eanimal: Cat | Fish\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-keyword\"\u003Etypeof\u003C\u002Fspan\u003E (animal \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EFish\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-property\"\u003Eswim\u003C\u002Fspan\u003E === \u003Cspan class=\"hljs-string\"\u003E&#x27;function&#x27;\u003C\u002Fspan\u003E) {\n        \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E;\n    }\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"warning\"\u003E\n\u003Cp\u003E類型斷言只能夠「欺騙」TypeScript 編譯器，無法避免運行時的錯誤，反而濫用類型斷言可能會導致運行時錯誤：\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003ECat\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-title function_\"\u003Erun\u003C\u002Fspan\u003E(): \u003Cspan class=\"hljs-built_in\"\u003Evoid\u003C\u002Fspan\u003E;\n}\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EFish\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-title function_\"\u003Eswim\u003C\u002Fspan\u003E(): \u003Cspan class=\"hljs-built_in\"\u003Evoid\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Eswim\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Eanimal: Cat | Fish\u003C\u002Fspan\u003E) {\n    (animal \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EFish\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-title function_\"\u003Eswim\u003C\u002Fspan\u003E();\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Etom\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003ECat\u003C\u002Fspan\u003E = {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;Tom&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-title function_\"\u003Erun\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) { \u003Cspan class=\"hljs-variable language_\"\u003Econsole\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003Elog\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;run&#x27;\u003C\u002Fspan\u003E) }\n};\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F tom 型別是 Cat，沒有型別 Fish 的 swim 方法\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-title function_\"\u003Eswim\u003C\u002Fspan\u003E(tom);\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 編譯時不會報錯，但在運行時會報錯\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Uncaught TypeError: animal.swim is not a function`\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E原因是 \u003Ccode\u003E(animal as Fish).swim()\u003C\u002Fcode\u003E 這段代碼隱藏了 \u003Ccode\u003Eanimal\u003C\u002Fcode\u003E 可能為 \u003Ccode\u003ECat\u003C\u002Fcode\u003E 的情況，將 \u003Ccode\u003Eanimal\u003C\u002Fcode\u003E 直接斷言為 \u003Ccode\u003EFish\u003C\u002Fcode\u003E 了，\u003Ccode\u003E而TypeScript\u003C\u002Fcode\u003E 編譯器信任了我們的斷言，故在調用 \u003Ccode\u003Eswim()\u003C\u002Fcode\u003E 時沒有編譯錯誤。\u003Cbr \u002F\u003E\n\u003Cbr\u002F\u003E\u003Cbr \u002F\u003E\n使用類型斷言時一定要格外小心，盡量避免斷言後調用方法或引用深層屬性，以減少不必要的運行時錯誤。\u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch4\u003E將一個父類斷言為更加具體的子類\u003C\u002Fh4\u003E\n\u003Cp\u003E當類之間有繼承關係時，類型斷言也是很常見的\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EApiError\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_ inherited__\"\u003EError\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ecode\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n}\n\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EHttpError\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_ inherited__\"\u003EError\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003EstatusCode\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E200\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EisApiError\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Eerror: \u003Cspan class=\"hljs-built_in\"\u003EError\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 判斷傳入的參數是不是 ApiError 型別\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-keyword\"\u003Etypeof\u003C\u002Fspan\u003E (error \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EApiError\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-property\"\u003Ecode\u003C\u002Fspan\u003E === \u003Cspan class=\"hljs-string\"\u003E&#x27;number&#x27;\u003C\u002Fspan\u003E) {\n        \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E;\n    }\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E聲明了函數 \u003Ccode\u003EisApiError\u003C\u002Fcode\u003E，它用來判斷傳入的參數是不是 \u003Ccode\u003EApiError\u003C\u002Fcode\u003E 型別，為了實現這樣一個函數，它的參數的型別肯定得是比較抽象的父類 \u003Ccode\u003EError\u003C\u002Fcode\u003E，這樣的話這個函數就能接受 \u003Ccode\u003EError\u003C\u002Fcode\u003E 或它的子類作為參數了。\u003C\u002Fp\u003E\n\u003Cp\u003E但是由於父類 \u003Ccode\u003EError\u003C\u002Fcode\u003E 中沒有 \u003Ccode\u003Ecode\u003C\u002Fcode\u003E 屬性，故直接獲取 \u003Ccode\u003Eerror.code\u003C\u002Fcode\u003E 會報錯，需要使用類型斷言獲取 \u003Ccode\u003E(error as ApiError).code\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cdiv class=\"info\"\u003E\n\u003Cp\u003E\u003Cstrong\u003Eclass 情境：\u003C\u002Fstrong\u003E(優先推薦使用 \u003Cstrong\u003E\u003Ccode\u003Einstanceof\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E)\u003C\u002Fp\u003E\n\u003Cp\u003E因 \u003Ccode\u003EApiError\u003C\u002Fcode\u003E 是 \u003Cstrong\u003E\u003Ccode\u003Eclass\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 的緣故，這裡也可使用 \u003Cstrong\u003E\u003Ccode\u003Einstanceof\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E 來判斷 \u003Ccode\u003Eerror\u003C\u002Fcode\u003E 是否是它的實例。\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EApiError\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_ inherited__\"\u003EError\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ecode\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n}\n\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EHttpError\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_ inherited__\"\u003EError\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003EstatusCode\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E200\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EisApiError\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Eerror: \u003Cspan class=\"hljs-built_in\"\u003EError\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (error \u003Cspan class=\"hljs-keyword\"\u003Einstanceof\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EApiError\u003C\u002Fspan\u003E) {\n        \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E;\n    }\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Cdiv class=\"info\"\u003E\n\u003Cp\u003E\u003Cstrong\u003Einterface 情境：\u003C\u002Fstrong\u003E(使用 \u003Cstrong\u003E斷言\u003C\u002Fstrong\u003E)\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003EApiError\u003C\u002Fcode\u003E 和 \u003Ccode\u003EHttpError\u003C\u002Fcode\u003E 不是一個真正的 \u003Ccode\u003Eclass\u003C\u002Fcode\u003E，而只是一個 TypeScript 的接口（interface），接口是一個型別，不是一個真正的值，它在編譯結果中會被刪除，當然就無法使用 \u003Ccode\u003Einstanceof\u003C\u002Fcode\u003E 來做運行時判斷了。\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F wrong\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EApiError\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EError\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ecode\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n}\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EHttpError\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EError\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003EstatusCode\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EisApiError\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Eerror: \u003Cspan class=\"hljs-built_in\"\u003EError\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F ApiError 為型別，不是真正的值\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (error \u003Cspan class=\"hljs-keyword\"\u003Einstanceof\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EApiError\u003C\u002Fspan\u003E) {\n        \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E;\n    }\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n}\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F &#x27;ApiError&#x27; only refers to a type, but is being used as a value here.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E只能用型別斷言，通過判斷是否存在 \u003Ccode\u003Ecode\u003C\u002Fcode\u003E 屬性，來判斷傳入的參數的型別是不是 \u003Ccode\u003EApiError\u003C\u002Fcode\u003E。\u003Cbr \u002F\u003E\n\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F correct\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EApiError\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EError\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ecode\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n}\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EHttpError\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EError\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003EstatusCode\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EisApiError\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Eerror: \u003Cspan class=\"hljs-built_in\"\u003EError\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 用類型斷言判斷傳入的參數型別是不是 ApiError\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-keyword\"\u003Etypeof\u003C\u002Fspan\u003E (error \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EApiError\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-property\"\u003Ecode\u003C\u002Fspan\u003E === \u003Cspan class=\"hljs-string\"\u003E&#x27;number&#x27;\u003C\u002Fspan\u003E) {\n        \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E;\n    }\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch4\u003E將任何一個型別斷言為 \u003Ccode\u003Eany\u003C\u002Fcode\u003E (pending\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cstrong\u003E它極有可能掩蓋了真正的型別錯誤，所以如果不是非常確定，就不要使用 \u003Ccode\u003Eas any\u003C\u002Fcode\u003E。\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F error: window 上不存在 foo 屬性\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-variable language_\"\u003Ewindow\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-property\"\u003Efoo\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Property &#x27;foo&#x27; does not exist on type &#x27;Window &amp; typeof globalThis&#x27;.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E需要將 window 上添加一個屬性 foo，但 TypeScript 編譯時會報錯，提示我們 window 上不存在 foo 屬性。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E(\u003Cspan class=\"hljs-variable language_\"\u003Ewindow\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-property\"\u003Efoo\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E使用 \u003Ccode\u003Eas any\u003C\u002Fcode\u003E 臨時將 \u003Ccode\u003Ewindow\u003C\u002Fcode\u003E 斷言為 \u003Ccode\u003Eany\u003C\u002Fcode\u003E 型別，在 \u003Ccode\u003Eany\u003C\u002Fcode\u003E 型別的變量上，訪問任何屬性都是允許的。\u003C\u002Fp\u003E\n\u003Ch4\u003E將 \u003Ccode\u003Eany\u003C\u002Fcode\u003E 斷言為一個具體的型別\u003C\u002Fh4\u003E\n\u003Cp\u003E下面三種情境都有可能受到 TypeScript 型別系統的限制而無法精確定義型別，這時就會處理 \u003Ccode\u003Eany\u003C\u002Fcode\u003E 型別的變量。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E第三方庫未能定義好自己的型別\u003C\u002Fli\u003E\n\u003Cli\u003E前人遺留的代碼\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003EJavaScript\u003C\u002Fcode\u003E 到 \u003Ccode\u003ETypeScript\u003C\u002Fcode\u003E 的過渡期\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 舊 code，返回值是 any\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EgetCacheData\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ekey: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-variable language_\"\u003Ewindow\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-property\"\u003Ecache\u003C\u002Fspan\u003E[key];\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 目標： 將返回值斷言成一個精確的類型\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E通過型別斷言把 \u003Ccode\u003Eany\u003C\u002Fcode\u003E 斷言為精確的型別，亡羊補牢，使我們的代碼向著高可維護性的目標發展。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EgetCacheData\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ekey: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E): \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-variable language_\"\u003Ewindow\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-property\"\u003Ecache\u003C\u002Fspan\u003E[key];\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003ECat\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-title function_\"\u003Erun\u003C\u002Fspan\u003E(): \u003Cspan class=\"hljs-built_in\"\u003Evoid\u003C\u002Fspan\u003E;\n}\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 調用了它之後的返回值斷言成一個精確的類型 Cat\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E tom = \u003Cspan class=\"hljs-title function_\"\u003EgetCacheData\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;tom&#x27;\u003C\u002Fspan\u003E) \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003ECat\u003C\u002Fspan\u003E;\ntom.\u003Cspan class=\"hljs-title function_\"\u003Erun\u003C\u002Fspan\u003E();\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E調用完 \u003Ccode\u003EgetCacheData\u003C\u002Fcode\u003E 之後，立即將它斷言為 \u003Ccode\u003ECat\u003C\u002Fcode\u003E 類型。這樣的話明確了 \u003Ccode\u003Etom\u003C\u002Fcode\u003E 的類型，後續對 \u003Ccode\u003Etom\u003C\u002Fcode\u003E 的訪問時就有了代碼補全，提高了代碼的可維護性。\u003C\u002Fp\u003E\n",toc:{title:b,subtitles:["Why TypeScript?","原始資料型別 - The primitives","任意值 - any","型別註解 - Type Annotation","型別推論 - Type Inference","聯合型別 - Union Types","物件的型別 介面 - Interface","陣列的型別 - Array","函式的型別 - Function Types","型別斷言 - Type Assertion"]},wordCount:3915}}}}(null,"[Note] TypeScript - The Basic Types","2024-12-15T00:00:00.000Z"));