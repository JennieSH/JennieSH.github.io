window.__NUXT__=(function(a,b,c){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1734243485",layout:"default",error:a,serverRendered:true,routePath:"\u002Fdev\u002FTest\u002Fvitest-dom",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}},globalRefs:{},ssrRefs:{"articleMatter-Test-vitest-dom":{info:{title:b,fileName:"vitest-dom",description:"DOM 測試注意事項",createdAt:c,updatedAt:c,tags:["Test","Vitest","dom","jest-dom","user-event"]},content:"\u003Ch1 id=\"Vitest - DOM 測試\" title=\"Vitest - DOM 測試\"\u003EVitest - DOM 測試\u003C\u002Fh1\u003E\n\u003Ch2 id=\"Setup\" title=\"Setup\"\u003E\u003Ca href=\"#Setup\"\u003ESetup\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E安裝套件\u003C\u002Fh3\u003E\n\u003Cp\u003E以 React 來說，如果要進一步測試元件，除了 Vitest 本身，還需要安裝其他套件，才能解析 React 元件和模擬互動：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ca  href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fjsdom\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Ejsdom\u003C\u002Fa\u003E \u002F \u003Ca  href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fhappy-dom\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Ehappy-dom\u003C\u002Fa\u003E：提供 Browser API 模擬瀏覽器環境\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Ejsdom ： 功能較完善穩定，速度相較於 happy-dom 慢\u003C\u002Fli\u003E\n\u003Cli\u003Ehappy-dom ： 輕量級，執行速度較快，但缺少一些 API\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ca  href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002F@testing-library\u002Freact\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Etesting-library\u002Freact\u003C\u002Fa\u003E(RTL)：用於測試 React 組件的渲染和交互\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ca  href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002F@testing-library\u002Fdom\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Etesting-library\u002Fdom\u003C\u002Fa\u003E：為 Testing Library 的核心，提供查詢 DOM 方法和模擬用戶行為(fireEvent)\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E補充：\u003C\u002Fstrong\u003E RTL v16 後，\u003Ccode\u003Etesting-library\u002Fdom\u003C\u002Fcode\u003E 需要一起安裝。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n \u003Cbr\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Enpm install -D jsdom @testing-library\u002Freact @testing-library\u002Fdom\n\n\u003Cspan class=\"hljs-comment\"\u003E# 如果沒有的話，需要安裝，用來支援 React\u003C\u002Fspan\u003E\n\nnpm install -D @vitejs\u002Fplugin-react\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E補充：\u003C\u002Fstrong\u003E 如果專案沒有 \u003Ccode\u003E@vitejs\u002Fplugin-react\u003C\u002Fcode\u003E 也需要安裝，用來處理 React 相關的文件和功能。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3\u003E設置設定檔\u003C\u002Fh3\u003E\n\u003Cp\u003E在 \u003Ccode\u003Evite.config.ts\u003C\u002Fcode\u003E 設定：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E設定 plugin 設定 (如果專案是用 vite 起的，這段建立時就會有了)\u003C\u002Fli\u003E\n\u003Cli\u003E設定執行的環境\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F vite.config.ts\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { defineConfig } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&#x27;vite&#x27;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E react \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&#x27;@vitejs\u002Fplugin-react&#x27;\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EdefineConfig\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Eplugins\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-title function_\"\u003Ereact\u003C\u002Fspan\u003E()], \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 1. 新增 plugin 設定\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Etest\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Eenvironment\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;jsdom&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 2. 指定 environment\u003C\u002Fspan\u003E\n    }\n  }\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"原則\" title=\"原則\"\u003E\u003Ca href=\"#原則\"\u003E原則\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003E當內部邏輯過於複雜時，可以抽出邏輯變成 hook，\u003Cstrong\u003E元件就專注於測試本身行為\u003C\u002Fstrong\u003E，另外對 hook 做邏輯測試\u003C\u002Fli\u003E\n\u003Cli\u003E以\u003Cstrong\u003E使用者角度關注元件\u003C\u002Fstrong\u003E上預期的結果\u003C\u002Fli\u003E\n\u003Cli\u003E元件有呼叫到 API 時，測試專注於元件接受到內容的渲染結果或行為，API 返回資料可以透過 mock 方式提供，確認元件有符合預期即可\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch2 id=\"常用 API\" title=\"常用 API\"\u003E\u003Ca href=\"#常用 API\"\u003E常用 API\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E\u003Cstrong\u003E\u003Ccode\u003Erender\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E將 React 元件或組件渲染到虛擬 DOM 中，使測試能夠在瀏覽器環境模擬中運行。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;render a component&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EClick Me\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Click Me&quot;\u003C\u002Fspan\u003E)).\u003Cspan class=\"hljs-title function_\"\u003EtoBeInTheDocument\u003C\u002Fspan\u003E();\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E在不重新建立測試環境的情況下，可以使用 \u003Ccode\u003Ererender\u003C\u002Fcode\u003E 更新已渲染的元件，\u003Cstrong\u003E適合測試相同元件在不同屬性或狀態下的行為\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { rerender } = \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ENumberDisplay\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Enumber\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{1}\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F re-render the same component with different props\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-title function_\"\u003Ererender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ENumberDisplay\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Enumber\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{2}\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E\u003Cstrong\u003E\u003Ccode\u003Escreen\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E提供一個全局訪問虛擬 DOM 的 API。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;use screen to find an element&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Einput\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eplaceholder\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;Enter your name&quot;\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByPlaceholderText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Enter your name&quot;\u003C\u002Fspan\u003E)).\u003Cspan class=\"hljs-title function_\"\u003EtoBeInTheDocument\u003C\u002Fspan\u003E();\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E\u003Cstrong\u003E\u003Ccode\u003EgetByRole\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E用來根據元素的 \u003Ccode\u003E角色\u003C\u002Fcode\u003E 屬性來查找節點，例如按鈕、標題等，官方推薦優先使用，幾乎可以涵蓋所有需求。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;get element by role&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003ESubmit\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByRole\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;button&quot;\u003C\u002Fspan\u003E, { \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Submit&quot;\u003C\u002Fspan\u003E })).\u003Cspan class=\"hljs-title function_\"\u003EtoBeInTheDocument\u003C\u002Fspan\u003E();\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E補充：\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E節點查找 API 選擇 @\u003Ca  href=\"https:\u002F\u002Ftesting-library.com\u002Fdocs\u002Fqueries\u002Fabout#priority\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EWhich query should I use?\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003EMDN 的 Roles @\u003Ca  href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAccessibility\u002FARIA\u002FARIA_Techniques#Roles\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Elist of roles\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3\u003E\u003Cstrong\u003E\u003Ccode\u003EgetByText\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E根據元素內的文本來查找節點，\u003Cstrong\u003E找不到元素會拋出錯誤\u003C\u002Fstrong\u003E，適合用於\u003Cstrong\u003E尋找特定顯示文本\u003C\u002Fstrong\u003E的元素，。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;get element by text&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EHello World\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Hello World&quot;\u003C\u002Fspan\u003E)).\u003Cspan class=\"hljs-title function_\"\u003EtoBeInTheDocument\u003C\u002Fspan\u003E();\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E\u003Cstrong\u003E\u003Ccode\u003EqueryByText\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E與 \u003Ccode\u003EgetByText\u003C\u002Fcode\u003E 類似，但如果\u003Cstrong\u003E找不到元素時\u003C\u002Fstrong\u003E，不會拋出錯誤，而是\u003Cstrong\u003E返回 \u003Ccode\u003Enull\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E，\u003Cstrong\u003E適合用於確認元素是否不存在\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;query element by text&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EHello World\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EqueryByText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Goodbye&quot;\u003C\u002Fspan\u003E)).\u003Cspan class=\"hljs-title function_\"\u003EtoBeNull\u003C\u002Fspan\u003E();\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E\u003Cstrong\u003E\u003Ccode\u003EfireEvent\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E用來手動觸發 DOM 事件來\u003Cstrong\u003E模擬使用者行為\u003C\u002Fstrong\u003E的方法，例如 \u003Ccode\u003Eclick\u003C\u002Fcode\u003E 或 \u003Ccode\u003Einput\u003C\u002Fcode\u003E 事件。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;fire a click event&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E handleClick = vi.\u003Cspan class=\"hljs-title function_\"\u003Efn\u003C\u002Fspan\u003E();\n  \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonClick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{handleClick}\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003EClick Me\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n  fireEvent.\u003Cspan class=\"hljs-title function_\"\u003Eclick\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Click Me&quot;\u003C\u002Fspan\u003E));\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(handleClick).\u003Cspan class=\"hljs-title function_\"\u003EtoHaveBeenCalled\u003C\u002Fspan\u003E();\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E\u003Cstrong\u003E\u003Ccode\u003Ecleanup\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E在每個測試後清除渲染的 DOM，\u003Cstrong\u003E防止測試之間的狀態污染\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title function_\"\u003EafterEach\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-title function_\"\u003Ecleanup\u003C\u002Fspan\u003E();\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E補充：\u003C\u002Fstrong\u003E 搭配 Vitest 的設定參考 @\u003Ca  href=\"https:\u002F\u002Farc.net\u002Fl\u002Fquote\u002Fbajthlbg\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EAuto Cleanup in Vitest \u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3\u003E\u003Cstrong\u003E\u003Ccode\u003ErenderHook\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E用來\u003Cstrong\u003E測試 React 自訂 Hook 的函式\u003C\u002Fstrong\u003E。它將 Hook 渲染在虛擬環境中，使開發者能驗證其邏輯和行為。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;returns logged in user&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { result } = \u003Cspan class=\"hljs-title function_\"\u003ErenderHook\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EuseLoggedInUser\u003C\u002Fspan\u003E());\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(result.\u003Cspan class=\"hljs-property\"\u003Ecurrent\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-title function_\"\u003EtoEqual\u003C\u002Fspan\u003E({ \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Alice&quot;\u003C\u002Fspan\u003E });\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E\u003Cstrong\u003E\u003Ccode\u003Eact\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003EReact 的更新是非同步的，\u003Ccode\u003Eact\u003C\u002Fcode\u003E 可以\u003Cstrong\u003E確保所有相關的狀態更新、重繪和副作用在測試執行之前完成\u003C\u002Fstrong\u003E，讓斷言不會出現不一致的情況。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { render, screen } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;@testing-library\u002Freact&quot;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { act } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;react-dom\u002Ftest-utils&quot;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { useState } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;react&quot;\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;use act to handle state updates&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003ECounter\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [count, setCount] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E);\n\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n      \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Edata-testid\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;count&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{count}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonClick\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{()\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E setCount((prev) =&gt; prev + 1)}&gt;Increase\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ebutton\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n    );\n  };\n\n  \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ECounter\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 初始值的斷言\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByTestId\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;count&quot;\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-property\"\u003EtextContent\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-title function_\"\u003EtoBe\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;0&quot;\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 使用 act 確保狀態更新完成\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-title function_\"\u003Eact\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Increase&quot;\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-title function_\"\u003Eclick\u003C\u002Fspan\u003E();\n  });\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 測試點擊按鈕後的狀態\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByTestId\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;count&quot;\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-property\"\u003EtextContent\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-title function_\"\u003EtoBe\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;1&quot;\u003C\u002Fspan\u003E);\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdetails class='spoiler'\u003E\u003Csummary\u003EQ. 為什麼不需要 rerender，直接撰寫 expect(screen.getByTestId('count').textContent).toBe('1') 測試會過？\u003C\u002Fsummary\u003E\n\u003Cp\u003E\u003Cstrong\u003EA.\u003C\u002Fstrong\u003E act 模擬 React 的更新機制，確保所有狀態變化和相關的 DOM 更新完成後，測試才能繼續執行。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003E當狀態更新（例如 setState 或 setCount）觸發 DOM 變更時，React 需要時間計算虛擬 DOM 的變化並更新實際 DOM。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003Eact 會等待這些操作完成後，讓測試斷言可以直接驗證最新的 DOM 狀態。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E在範例中，按鈕點擊觸發 setCount，React 重新渲染了 Counter 組件，\u003Ccode\u003Escreen.getByTestId('count')\u003C\u002Fcode\u003E 將自動返回更新後的內容，因為 DOM 已經在 act 的控制下完成了更新。\u003C\u002Fp\u003E\n\u003C\u002Fdetails\u003E\n\u003Ch3\u003E\u003Cstrong\u003E\u003Ccode\u003EwaitFor\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E用於等待非同步操作或渲染的完成。它會反覆執行傳入的回呼函數，直到回調內的條件滿足或超時，\u003Cstrong\u003E適合測試需等待的元素渲染或狀態改變\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;wait for async updates&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E () =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EComponent\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [text, setText] = \u003Cspan class=\"hljs-title class_\"\u003EReact\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Loading...&quot;\u003C\u002Fspan\u003E);\n    \u003Cspan class=\"hljs-title function_\"\u003EuseEffect\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n      \u003Cspan class=\"hljs-built_in\"\u003EsetTimeout\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EsetText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Loaded&quot;\u003C\u002Fspan\u003E), \u003Cspan class=\"hljs-number\"\u003E1000\u003C\u002Fspan\u003E);\n    }, []);\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{text}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E;\n  };\n\n  \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EComponent\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EwaitFor\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Loaded&quot;\u003C\u002Fspan\u003E)).\u003Cspan class=\"hljs-title function_\"\u003EtoBeInTheDocument\u003C\u002Fspan\u003E());\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"其他常用套件\" title=\"其他常用套件\"\u003E\u003Ca href=\"#其他常用套件\"\u003E其他常用套件\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E\u003Ca  href=\"https:\u002F\u002Fgithub.com\u002Ftesting-library\u002Fjest-dom\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Ejest-dom\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E為一個擴展 Jest matchers 的套件，提供許多的 custom matchers，使得測試斷言更加直觀和易讀，例如：\u003Ccode\u003EtoBeInTheDocument\u003C\u002Fcode\u003E、\u003Ccode\u003EtoBeDisabled\u003C\u002Fcode\u003E、\u003Ccode\u003EtoHaveClass\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E相關的 API @ \u003Ca  href=\"https:\u002F\u002Fgithub.com\u002Ftesting-library\u002Fjest-dom?tab=readme-ov-file#custom-matchers\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ECustom matchers\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E**補充：**雖然名字中有 jest，但不一定需要安裝 Jest，只需要引入 \u003Ccode\u003E@testing-library\u002Fjest-dom\u003C\u002Fcode\u003E，就可以使用它提供的 custom matchers。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E安裝套件\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Enpm install -D \u003Cspan class=\"hljs-meta\"\u003E@testing\u003C\u002Fspan\u003E-library\u002Fjest-dom\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cstrong\u003E更新設定檔案\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E新增 \u003Ccode\u003Evitest-setup.ts\u003C\u002Fcode\u003E 檔案，並加入至 \u003Ccode\u003Evitest.config.ts\u003C\u002Fcode\u003E 的設定中：\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F vitest-setup.js\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;@testing-library\u002Fjest-dom\u002Fvitest&quot;\u003C\u002Fspan\u003E;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { defineConfig } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&#x27;vitest\u002Fconfig&#x27;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E react \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&#x27;@vitejs\u002Fplugin-react&#x27;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EdefineConfig\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Eplugins\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-title function_\"\u003Ereact\u003C\u002Fspan\u003E()],\n  \u003Cspan class=\"hljs-attr\"\u003Etest\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Eenvironment\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&#x27;jsdom&#x27;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003EsetupFiles\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-string\"\u003E&#x27;.\u002Fvitest-setup.ts&#x27;\u003C\u002Fspan\u003E], \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 加入剛剛新增的檔案\u003C\u002Fspan\u003E\n  },\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E補充：\u003C\u002Fstrong\u003E 如果省略這步驟一，那撰寫測試時需要每次都手動 import \u003Ccode\u003E'@testing-library\u002Fjest-dom'\u003C\u002Fcode\u003E 套件。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Col start=\"2\"\u003E\n\u003Cli\u003E更新 \u003Ccode\u003Etsconfig.json\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F tsconfig.json\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-string\"\u003E&quot;compilerOptions&quot;\u003C\u002Fspan\u003E: {\n    ...\n    \u003Cspan class=\"hljs-string\"\u003E&quot;types&quot;\u003C\u002Fspan\u003E: [\u003Cspan class=\"hljs-string\"\u003E&quot;vitest\u002Fglobals&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;@testing-library\u002Fjest-dom&quot;\u003C\u002Fspan\u003E] \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 新增此段\u003C\u002Fspan\u003E\n  },\n  \u003Cspan class=\"hljs-string\"\u003E&quot;include&quot;\u003C\u002Fspan\u003E: [\n    ...\n    \u003Cspan class=\"hljs-string\"\u003E&quot;.\u002Fvitest.setup.ts&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 新增此段\u003C\u002Fspan\u003E\n  ],\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cstrong\u003E範例使用\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-title function_\"\u003EgetByText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Visible Details Example&quot;\u003C\u002Fspan\u003E)).\u003Cspan class=\"hljs-title function_\"\u003EtoBeVisible\u003C\u002Fspan\u003E();\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E\u003Ca  href=\"https:\u002F\u002Fgithub.com\u002Ftesting-library\u002Fuser-event\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Euser-event\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E提供模擬使用者事件，對比內建的 \u003Ccode\u003EfireEvent\u003C\u002Fcode\u003E 方法，更貼近真實使用者的操作行為。\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E相關 API @ \u003Ca  href=\"https:\u002F\u002Ftesting-library.com\u002Fdocs\u002Fuser-event\u002Fv13\u002F#api\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Euser-event API\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E安裝套件\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Enpm install -D \u003Cspan class=\"hljs-meta\"\u003E@testing\u003C\u002Fspan\u003E-library\u002Fuser-event\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cstrong\u003E範例使用\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F v13 寫法\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { render, screen } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;@testing-library\u002Freact&quot;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E userEvent \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;@testing-library\u002Fuser-event&quot;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;@testing-library\u002Fjest-dom&quot;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EMyComponent\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;.\u002FMyComponent&quot;\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;renders MyComponent and interacts with it&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EMyComponent\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E input = screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByLabelText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Username&quot;\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 模擬使用者輸入\u003C\u002Fspan\u003E\n  userEvent.\u003Cspan class=\"hljs-title function_\"\u003Etype\u003C\u002Fspan\u003E(input, \u003Cspan class=\"hljs-string\"\u003E&quot;testuser&quot;\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(input).\u003Cspan class=\"hljs-title function_\"\u003EtoHaveValue\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;testuser&quot;\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E button = screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Submit&quot;\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 模擬使用者點擊\u003C\u002Fspan\u003E\n  userEvent.\u003Cspan class=\"hljs-title function_\"\u003Eclick\u003C\u002Fspan\u003E(button);\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Submitted&quot;\u003C\u002Fspan\u003E)).\u003Cspan class=\"hljs-title function_\"\u003EtoBeInTheDocument\u003C\u002Fspan\u003E();\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003Ev14 推薦寫法：渲染元件之前，調用 \u003Ccode\u003EuserEvent.setup()\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E補充：\u003C\u002Fstrong\u003E v14 兼容 v13 寫法，但這主要是為了從 v13 過渡到 v14 提供便利，以及用於簡單測試。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E補充：\u003C\u002Fstrong\u003E 避免在 \u003Ccode\u003Ebefore\u003C\u002Fcode\u003E\u002F\u003Ccode\u003Eafter\u003C\u002Fcode\u003E hook 使用任何 \u003Ccode\u003EuserEvent\u003C\u002Fcode\u003E 函數，可參考 \u003Ca  href=\"https:\u002F\u002Fkentcdodds.com\u002Fblog\u002Favoid-nesting-when-youre-testing\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E“Avoid Nesting When You’re Testing”\u003C\u002Fa\u003E。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F v14 推薦寫法 - inlining\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E userEvent \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&#x27;@testing-library\u002Fuser-event&#x27;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;trigger some awesome feature when clicking the button&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E () =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E user = userEvent.\u003Cspan class=\"hljs-title function_\"\u003Esetup\u003C\u002Fspan\u003E()\n  \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EMyComponent\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E)\n\n  \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E user.\u003Cspan class=\"hljs-title function_\"\u003Eclick\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByRole\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;button&#x27;\u003C\u002Fspan\u003E, { \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-regexp\"\u003E\u002Fclick me!\u002Fi\u003C\u002Fspan\u003E }))\n  ...\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F v14 推薦寫法 - setup function\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E userEvent \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&#x27;@testing-library\u002Fuser-event&#x27;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Esetup\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Ejsx\u003C\u002Fspan\u003E) {\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-attr\"\u003Euser\u003C\u002Fspan\u003E: userEvent.\u003Cspan class=\"hljs-title function_\"\u003Esetup\u003C\u002Fspan\u003E(),\n    ...\u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(jsx),\n  }\n}\n\n\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;render with a setup function&#x27;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E () =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E {user} = \u003Cspan class=\"hljs-title function_\"\u003Esetup\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EMyComponent\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E)\n  ...\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cstrong\u003E\u003Ccode\u003Euser-event\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E v.s \u003Cstrong\u003E\u003Ccode\u003EfireEvent\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003E比較項目\u003C\u002Fth\u003E\n\u003Cth\u003E\u003Ccode\u003EfireEvent\u003C\u002Fcode\u003E\u003C\u002Fth\u003E\n\u003Cth\u003E\u003Ccode\u003Euser-event\u003C\u002Fcode\u003E\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cstrong\u003E模擬範圍\u003C\u002Fstrong\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E單一 DOM 事件（如 click、input、keydown）\u003C\u002Ftd\u003E\n\u003Ctd\u003E完整使用者互動過程（如按鍵輸入、滑鼠點擊、表單填寫等）\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cstrong\u003E事件觸發數量\u003C\u002Fstrong\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E一次觸發單一事件\u003C\u002Ftd\u003E\n\u003Ctd\u003E一次模擬多個相關事件（如 mousedown、focus、mouseup、click）\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cstrong\u003E檢查與限制\u003C\u002Fstrong\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E不檢查目標元素的狀態，可強制觸發事件（即使元素不可見或被禁用）\u003C\u002Ftd\u003E\n\u003Ctd\u003E檢查目標元素是否可見、可互動（如隱藏元素不能點擊、禁用元素不能輸入）\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cstrong\u003E自動處理\u003C\u002Fstrong\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E必須手動處理互動過程中的細節（如 focus、值變更 change、失焦 blur）\u003C\u002Ftd\u003E\n\u003Ctd\u003E自動處理互動過程中的細節，模擬瀏覽器行為\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cstrong\u003E適合使用情境\u003C\u002Fstrong\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E- 測試特定的低階 DOM 事件\u003Cbr\u003E- \u003Ccode\u003Euser-event\u003C\u002Fcode\u003E 尚未實現的特殊場景\u003C\u002Ftd\u003E\n\u003Ctd\u003E測試真實的使用者互動，特別是多步驟操作（如表單填寫、拖曳等）\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cstrong\u003E使用難度\u003C\u002Fstrong\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E需要手動撰寫所有事件及細節，較為繁瑣\u003C\u002Ftd\u003E\n\u003Ctd\u003E自動模擬瀏覽器邏輯，開發者只需描述互動，使用更簡單\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cstrong\u003E是否貼近真實互動\u003C\u002Fstrong\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E不貼近真實使用者行為，僅觸發事件本身\u003C\u002Ftd\u003E\n\u003Ctd\u003E高度貼近真實使用者互動，考慮瀏覽器行為限制\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003Cp\u003E使用 \u003Ccode\u003EfireEvent\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { render, screen, fireEvent } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;@testing-library\u002Freact&quot;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EMyComponent\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;.\u002FMyComponent&quot;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { fireEvent } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;@testing-library\u002Freact&quot;\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;使用 fireEvent 測試輸入&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EInput\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E input = screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByRole\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;textbox&quot;\u003C\u002Fspan\u003E);\n  fireEvent.\u003Cspan class=\"hljs-title function_\"\u003Efocus\u003C\u002Fspan\u003E(input);\n  fireEvent.\u003Cspan class=\"hljs-title function_\"\u003Echange\u003C\u002Fspan\u003E(input, { \u003Cspan class=\"hljs-attr\"\u003Etarget\u003C\u002Fspan\u003E: { \u003Cspan class=\"hljs-attr\"\u003Evalue\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Hello&quot;\u003C\u002Fspan\u003E } });\n  fireEvent.\u003Cspan class=\"hljs-title function_\"\u003Eblur\u003C\u002Fspan\u003E(input);\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E使用 \u003Ccode\u003Euser-event\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E模擬使用者點擊 input 的行為後再去做輸入。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E userEvent \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;@testing-library\u002Fuser-event&quot;\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;使用 user-event 測試輸入&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E () =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E user = userEvent.\u003Cspan class=\"hljs-title function_\"\u003Esetup\u003C\u002Fspan\u003E();\n  \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EInput\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E input = screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByRole\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;textbox&quot;\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E user.\u003Cspan class=\"hljs-title function_\"\u003Etype\u003C\u002Fspan\u003E(input, \u003Cspan class=\"hljs-string\"\u003E&quot;Hello&quot;\u003C\u002Fspan\u003E);\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"\u003Cstrong\u003E參考資料\u003C\u002Fstrong\u003E\" title=\"\u003Cstrong\u003E參考資料\u003C\u002Fstrong\u003E\"\u003E\u003Ca href=\"#\u003Cstrong\u003E參考資料\u003C\u002Fstrong\u003E\"\u003E\u003Cstrong\u003E參考資料\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Ftesting-library.com\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ETesting Library\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=FDEf3iWEgFI\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EFast Unit Testing With Vitest\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fithelp.ithome.com.tw\u002Fusers\u002F20119062\u002Fironman\u002F5554\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E「你知道這是什麼嗎？」小白也能輕鬆瞭解的 Vue3 單元測試！Feat. Vitest + Vue Test Utils\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n",toc:{title:b,subtitles:["Setup","原則","常用 API","其他常用套件","參考資料"]},wordCount:2225}}}}(null,"Vitest - DOM 測試","2024-12-15T00:00:00.000Z"));