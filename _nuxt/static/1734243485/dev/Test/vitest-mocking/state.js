window.__NUXT__=(function(a,b,c){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1734243485",layout:"default",error:a,serverRendered:true,routePath:"\u002Fdev\u002FTest\u002Fvitest-mocking",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}},globalRefs:{},ssrRefs:{"articleMatter-Test-vitest-mocking":{info:{title:b,fileName:"vitest-mocking",description:"Vitest Mocking 方法介紹",createdAt:c,updatedAt:c,tags:["Test","Vitest","mock"]},content:"\u003Ch1 id=\"Vitest - Mocking\" title=\"Vitest - Mocking\"\u003EVitest - Mocking\u003C\u002Fh1\u003E\n\u003Ch2 id=\"前言\" title=\"前言\"\u003E\u003Ca href=\"#前言\"\u003E前言\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E在撰寫測試時，經常遇到的挑戰是大部分程式碼包含 Side Effect，並非單純的 Pure Function。這些程式碼可能依賴外部套件、網路等因素，增加了測試的複雜性和不穩定性。此外，測試時通常不希望直接依賴外部 API，以免因外部因素的變動導致 CI 測試失敗、誤觸發 DoS、或超出速率限制。\u003C\u002Fp\u003E\n\u003Cp\u003E為了解決這些問題，可以透過 mock 方法來模擬函式的返回值或 API 的回應，讓測試聚焦於當前程式碼的邏輯。\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E@\u003Ca  href=\"https:\u002F\u002Fvitest.dev\u002Fguide\u002Fmocking.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EVitest Mocking Doc\u003C\u002Fa\u003E\u003Cbr \u002F\u003E\n@\u003Ca  href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=FDEf3iWEgFI\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EFast Unit Testing With Vitest\u003C\u002Fa\u003E - 1:04:30\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2 id=\"範例\" title=\"範例\"\u003E\u003Ca href=\"#範例\"\u003E範例\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E@\u003Ca  href=\"https:\u002F\u002Fgithub.com\u002FJennieSH\u002Fvitest-example\u002Fblob\u002Fmain\u002Fapp\u002Fcomponents\u002FCharacterList.test.tsx\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ECharacterList 測試程式碼 Github 入口\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E用一個簡單 React 程式碼來分別演示如何 \u003Ccode\u003EMock API Fetching\u003C\u002Fcode\u003E 和 \u003Ccode\u003EMock hook\u003C\u002Fcode\u003E ：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003ECharacterList\u003C\u002Fcode\u003E - 提供打關鍵字的搜尋框，並會渲染出對應的角色列表\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003EuseSearch\u003C\u002Fcode\u003E - 會根據關鍵字(keyword)，返回包含關鍵字的物件陣列\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003EuseCharacters\u003C\u002Fcode\u003E - 執行打 API 的邏輯函式，且返回 API 相關狀態\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Ccode\u003ECharacterList\u003C\u002Fcode\u003E 中有使用到 \u003Ccode\u003EuseCharacters\u003C\u002Fcode\u003E 和 \u003Ccode\u003EuseSearch\u003C\u002Fcode\u003E 這兩個 hooks。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F CharacterList.tsx - 提供打關鍵字的搜尋框，並會渲染出對應的角色列表\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003ECharacterList\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { characters } = \u003Cspan class=\"hljs-title function_\"\u003EuseCharacters\u003C\u002Fspan\u003E();\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { keyword, filteredItems, setKeyword } = useSearch&lt;\u003Cspan class=\"hljs-title class_\"\u003ECharacter\u003C\u002Fspan\u003E&gt;(\n    characters,\n    [\u003Cspan class=\"hljs-string\"\u003E&quot;name&quot;\u003C\u002Fspan\u003E]\n  );\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n    \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Einput\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-attr\"\u003Etype\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;text&quot;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-attr\"\u003Evalue\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{keyword}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-attr\"\u003Eplaceholder\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;Search characters&quot;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-attr\"\u003EonChange\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{(e)\u003C\u002Fspan\u003E =&gt;\u003C\u002Fspan\u003E setKeyword(e.target.value)}\n      \u002F&gt;\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eul\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        {filteredItems.map((character) =&gt; (\n          \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eli\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ekey\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{character.id}\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{character.name}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eli\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n        ))}\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eul\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  );\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F useSearch.tsx -  會根據關鍵字(keyword)，返回包含關鍵字的物件陣列\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E useSearch = &lt;T \u003Cspan class=\"hljs-keyword\"\u003Eextends\u003C\u002Fspan\u003E { [\u003Cspan class=\"hljs-attr\"\u003Ekey\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E]: \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E }&gt;\u003Cspan class=\"hljs-function\"\u003E(\u003Cspan class=\"hljs-params\"\u003E\n  items: T[],\n  filters = [\u003Cspan class=\"hljs-string\"\u003E&quot;id&quot;\u003C\u002Fspan\u003E]\n\u003C\u002Fspan\u003E) =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [keyword, setKeyword] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;&quot;\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E filteredItems = items.\u003Cspan class=\"hljs-title function_\"\u003Efilter\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E(\u003Cspan class=\"hljs-params\"\u003Eitem\u003C\u002Fspan\u003E) =&gt;\u003C\u002Fspan\u003E\n    filters.\u003Cspan class=\"hljs-title function_\"\u003Esome\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E(\u003Cspan class=\"hljs-params\"\u003Ekey\u003C\u002Fspan\u003E) =&gt;\u003C\u002Fspan\u003E\n      item[key]?.\u003Cspan class=\"hljs-title function_\"\u003EtoLowerCase\u003C\u002Fspan\u003E().\u003Cspan class=\"hljs-title function_\"\u003Eincludes\u003C\u002Fspan\u003E(keyword.\u003Cspan class=\"hljs-title function_\"\u003EtoLowerCase\u003C\u002Fspan\u003E())\n    )\n  );\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E {\n    keyword,\n    filteredItems,\n    setKeyword\n  };\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F useCharacters.tsx - 執行打 API 的邏輯函式，且返回 API 相關狀態\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Etype\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003ECharacter\u003C\u002Fspan\u003E = {\n  \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Enumber\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E;\n};\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E useCharacters = (): {\n  \u003Cspan class=\"hljs-attr\"\u003Echaracters\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003ECharacter\u003C\u002Fspan\u003E[];\n  \u003Cspan class=\"hljs-attr\"\u003EisLoading\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Eboolean\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-attr\"\u003Eerror\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E | \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E;\n} =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [characters, setCharacters] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E([]);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [isLoading, setIsLoading] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [error, setError] = useState&lt;\u003Cspan class=\"hljs-built_in\"\u003Estring\u003C\u002Fspan\u003E | \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E&gt;(\u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E fetchCharacters = \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E () =&gt; {\n    \u003Cspan class=\"hljs-keyword\"\u003Etry\u003C\u002Fspan\u003E {\n      \u003Cspan class=\"hljs-title function_\"\u003EsetIsLoading\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E);\n\n      \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E response = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003Efetch\u003C\u002Fspan\u003E(\n        \u003Cspan class=\"hljs-string\"\u003E&quot;https:\u002F\u002Frickandmortyapi.com\u002Fapi\u002Fcharacter\u002F?name=rick&amp;status=alive&quot;\u003C\u002Fspan\u003E\n      );\n\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!response.\u003Cspan class=\"hljs-property\"\u003Eok\u003C\u002Fspan\u003E) {\n        \u003Cspan class=\"hljs-keyword\"\u003Ethrow\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EError\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Failed to fetch characters&quot;\u003C\u002Fspan\u003E);\n      }\n\n      \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E data = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E response.\u003Cspan class=\"hljs-title function_\"\u003Ejson\u003C\u002Fspan\u003E();\n      \u003Cspan class=\"hljs-title function_\"\u003EsetCharacters\u003C\u002Fspan\u003E(data.\u003Cspan class=\"hljs-property\"\u003Eresults\u003C\u002Fspan\u003E);\n    } \u003Cspan class=\"hljs-keyword\"\u003Ecatch\u003C\u002Fspan\u003E (error) {\n      \u003Cspan class=\"hljs-title function_\"\u003EsetError\u003C\u002Fspan\u003E((error \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EError\u003C\u002Fspan\u003E).\u003Cspan class=\"hljs-property\"\u003Emessage\u003C\u002Fspan\u003E);\n    } \u003Cspan class=\"hljs-keyword\"\u003Efinally\u003C\u002Fspan\u003E {\n      \u003Cspan class=\"hljs-title function_\"\u003EsetIsLoading\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E);\n    }\n  };\n\n  \u003Cspan class=\"hljs-title function_\"\u003EuseEffect\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-title function_\"\u003EfetchCharacters\u003C\u002Fspan\u003E();\n  }, []);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E {\n    characters,\n    isLoading,\n    error\n  };\n};\n\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E useCharacters;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003E設定 Mocking 對象\u003C\u002Fh3\u003E\n\u003Ch4\u003E\u003Cstrong\u003E1. import 需要模擬的函式\u003C\u002Fstrong\u003E\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E useCharacters \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;..\u002Fhooks\u002FuseCharacters&quot;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E useSearch \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;..\u002Fhooks\u002FuseSearch&quot;\u003C\u002Fspan\u003E;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E\u003Cstrong\u003E2. 使用 \u003Ccode\u003Evi.mock\u003C\u002Fcode\u003E 選擇要模擬的函式\u003C\u002Fstrong\u003E\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Evi.\u003Cspan class=\"hljs-title function_\"\u003Emock\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;..\u002Fhooks\u002FuseCharacters&quot;\u003C\u002Fspan\u003E);\nvi.\u003Cspan class=\"hljs-title function_\"\u003Emock\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;..\u002Fhooks\u002FuseSearch&quot;\u003C\u002Fspan\u003E);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E\u003Cstrong\u003E3. 宣告模擬的函式\u003C\u002Fstrong\u003E\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E mockUseCharacters = useCharacters \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EMockedFunction\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-keyword\"\u003Etypeof\u003C\u002Fspan\u003E useCharacters&gt;;\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E mockUseSearch = useSearch \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EMockedFunction\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-keyword\"\u003Etypeof\u003C\u002Fspan\u003E useSearch&gt;;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E\u003Cstrong\u003E4. 使用 \u003Ccode\u003EMockedFunction\u003C\u002Fcode\u003E 來指定模擬函式的返回值\u003C\u002Fstrong\u003E\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003EmockUseCharacters.\u003Cspan class=\"hljs-title function_\"\u003EmockReturnValue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Echaracters\u003C\u002Fspan\u003E: [\n    { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Character 1&quot;\u003C\u002Fspan\u003E },\n    { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Character 2&quot;\u003C\u002Fspan\u003E }\n  ],\n  \u003Cspan class=\"hljs-attr\"\u003EisLoading\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Eerror\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E\n});\n\nmockUseSearch.\u003Cspan class=\"hljs-title function_\"\u003EmockReturnValue\u003C\u002Fspan\u003E({\n  \u003Cspan class=\"hljs-attr\"\u003Ekeyword\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;&quot;\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003EfilteredItems\u003C\u002Fspan\u003E: [\n    { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Character 1&quot;\u003C\u002Fspan\u003E },\n    { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Character 2&quot;\u003C\u002Fspan\u003E }\n  ],\n  \u003Cspan class=\"hljs-attr\"\u003EsetKeyword\u003C\u002Fspan\u003E: vi.\u003Cspan class=\"hljs-title function_\"\u003Efn\u003C\u002Fspan\u003E()\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdetails class='spoiler'\u003E\u003Csummary\u003E步驟完整程式碼\u003C\u002Fsummary\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { cleanup } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;@testing-library\u002Freact&quot;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { afterEach, beforeEach, describe, \u003Cspan class=\"hljs-title class_\"\u003EMockedFunction\u003C\u002Fspan\u003E, vi } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;vitest&quot;\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 1. 引入測試需要的函式\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E useCharacters \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;..\u002Fhooks\u002FuseCharacters&quot;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E useSearch \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;..\u002Fhooks\u002FuseSearch&quot;\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 2. 選擇要模擬的函式\u003C\u002Fspan\u003E\nvi.\u003Cspan class=\"hljs-title function_\"\u003Emock\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;..\u002Fhooks\u002FuseCharacters&quot;\u003C\u002Fspan\u003E);\nvi.\u003Cspan class=\"hljs-title function_\"\u003Emock\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;..\u002Fhooks\u002FuseSearch&quot;\u003C\u002Fspan\u003E);\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 3. 宣告模擬的函式\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E mockUseCharacters = useCharacters \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EMockedFunction\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-keyword\"\u003Etypeof\u003C\u002Fspan\u003E useCharacters&gt;;\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E mockUseSearch = useSearch \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EMockedFunction\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-keyword\"\u003Etypeof\u003C\u002Fspan\u003E useSearch&gt;;\n\n\u003Cspan class=\"hljs-title function_\"\u003Edescribe\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;CharacterList Component&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-title function_\"\u003EbeforeEach\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 4. 指定模擬函式的返回值 (設置每個測試的初始狀態)\u003C\u002Fspan\u003E\n    mockUseCharacters.\u003Cspan class=\"hljs-title function_\"\u003EmockReturnValue\u003C\u002Fspan\u003E({\n      \u003Cspan class=\"hljs-attr\"\u003Echaracters\u003C\u002Fspan\u003E: [\n        { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Character 1&quot;\u003C\u002Fspan\u003E },\n        { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Character 2&quot;\u003C\u002Fspan\u003E }\n      ],\n      \u003Cspan class=\"hljs-attr\"\u003EisLoading\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E,\n      \u003Cspan class=\"hljs-attr\"\u003Eerror\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E\n    });\n\n    mockUseSearch.\u003Cspan class=\"hljs-title function_\"\u003EmockReturnValue\u003C\u002Fspan\u003E({\n      \u003Cspan class=\"hljs-attr\"\u003Ekeyword\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;&quot;\u003C\u002Fspan\u003E,\n      \u003Cspan class=\"hljs-attr\"\u003EfilteredItems\u003C\u002Fspan\u003E: [\n        { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Character 1&quot;\u003C\u002Fspan\u003E },\n        { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Character 2&quot;\u003C\u002Fspan\u003E }\n      ],\n      \u003Cspan class=\"hljs-attr\"\u003EsetKeyword\u003C\u002Fspan\u003E: vi.\u003Cspan class=\"hljs-title function_\"\u003Efn\u003C\u002Fspan\u003E()\n    });\n  });\n\n  \u003Cspan class=\"hljs-title function_\"\u003EafterEach\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n    vi.\u003Cspan class=\"hljs-title function_\"\u003EclearAllMocks\u003C\u002Fspan\u003E();\n    \u003Cspan class=\"hljs-title function_\"\u003Ecleanup\u003C\u002Fspan\u003E(); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 清理 DOM\u003C\u002Fspan\u003E\n  });\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E如果確保返回值永遠是定值，且後面不需要在更新修改該資料，可以在執行到第二步驟即可，\u003Ccode\u003Evi.mock\u003C\u002Fcode\u003E 傳入第二個參數，後續都會返回其結果：\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 呼叫 getUsers，永遠的 return 值都會是這邊設定好的，不會因後續操作而變動\u003C\u002Fspan\u003E\nvi.\u003Cspan class=\"hljs-title function_\"\u003Emock\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;.\u002FgetUsers&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-title function_\"\u003EgetUsers\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) {\n      \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E {\n        \u003Cspan class=\"hljs-attr\"\u003Euser\u003C\u002Fspan\u003E: [\n          { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Jennie&quot;\u003C\u002Fspan\u003E },\n          { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Jason&quot;\u003C\u002Fspan\u003E }\n        ],\n        \u003Cspan class=\"hljs-attr\"\u003EisLoading\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E,\n        \u003Cspan class=\"hljs-attr\"\u003Eerror\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Enull\u003C\u002Fspan\u003E\n      };\n    }\n  };\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdetails\u003E\n\u003Ch3\u003E測試目標\u003C\u002Fh3\u003E\n\u003Ch4\u003E1. 初始渲染列表\u003C\u002Fh4\u003E\n\u003Cp\u003E測試第一次渲染的內容是否為預期。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;renders characters correctly&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ECharacterList\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Character 1&quot;\u003C\u002Fspan\u003E)).\u003Cspan class=\"hljs-title function_\"\u003EtoBeTruthy\u003C\u002Fspan\u003E();\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Character 2&quot;\u003C\u002Fspan\u003E)).\u003Cspan class=\"hljs-title function_\"\u003EtoBeTruthy\u003C\u002Fspan\u003E();\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E2. 搜尋功能\u003C\u002Fh4\u003E\n\u003Cp\u003E測試在輸入框內輸入關鍵字後，渲染的列表內容是否有包含該關鍵字。\u003C\u002Fp\u003E\n\u003Cp\u003E使用到的 API：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003E\u003Ccode\u003EmockReturnValueOnce\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003Cbr \u002F\u003E\n只會在下一次調用 useSearch 時返回這個值，這樣可以模擬特定情境下的返回值，而不影響其他測試。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E\u003Ccode\u003Ererender\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003Cbr \u002F\u003E\n用於模擬 React 組件在資料改變後的重新渲染機制，因資料改變，從而觸發畫面更新。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E\u003Ccode\u003EfireEvent\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E\u003Cbr \u002F\u003E\n模擬 React 事件，例如 change、click 等。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-title function_\"\u003Etest\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;changes keyword in UI and filters characters&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E setKeywordMock = vi.\u003Cspan class=\"hljs-title function_\"\u003Efn\u003C\u002Fspan\u003E();\n  mockUseSearch.\u003Cspan class=\"hljs-title function_\"\u003EmockReturnValueOnce\u003C\u002Fspan\u003E({\n    \u003Cspan class=\"hljs-attr\"\u003Ekeyword\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;&quot;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003EfilteredItems\u003C\u002Fspan\u003E: [\n      { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Character 1&quot;\u003C\u002Fspan\u003E },\n      { \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Character 2&quot;\u003C\u002Fspan\u003E }\n    ],\n    \u003Cspan class=\"hljs-attr\"\u003EsetKeyword\u003C\u002Fspan\u003E: setKeywordMock\n  });\n\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E { rerender } = \u003Cspan class=\"hljs-title function_\"\u003Erender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ECharacterList\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E input = screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByPlaceholderText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Search characters&quot;\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 模擬觸發 input 值改變\u003C\u002Fspan\u003E\n  fireEvent.\u003Cspan class=\"hljs-title function_\"\u003Echange\u003C\u002Fspan\u003E(input, { \u003Cspan class=\"hljs-attr\"\u003Etarget\u003C\u002Fspan\u003E: { \u003Cspan class=\"hljs-attr\"\u003Evalue\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Character 1&quot;\u003C\u002Fspan\u003E } });\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 模擬 mockUseSearch 在 input 改變後的返回值\u003C\u002Fspan\u003E\n  mockUseSearch.\u003Cspan class=\"hljs-title function_\"\u003EmockReturnValueOnce\u003C\u002Fspan\u003E({\n    \u003Cspan class=\"hljs-attr\"\u003Ekeyword\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Character 1&quot;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"hljs-attr\"\u003EfilteredItems\u003C\u002Fspan\u003E: [{ \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-attr\"\u003Ename\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;Character 1&quot;\u003C\u002Fspan\u003E }],\n    \u003Cspan class=\"hljs-attr\"\u003EsetKeyword\u003C\u002Fspan\u003E: setKeywordMock\n  });\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 重新渲染 CharacterList\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-title function_\"\u003Ererender\u003C\u002Fspan\u003E(\u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003ECharacterList\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(setKeywordMock).\u003Cspan class=\"hljs-title function_\"\u003EtoHaveBeenCalledWith\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Character 1&quot;\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EgetByText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Character 1&quot;\u003C\u002Fspan\u003E)).\u003Cspan class=\"hljs-title function_\"\u003EtoBeTruthy\u003C\u002Fspan\u003E();\n  \u003Cspan class=\"hljs-title function_\"\u003Eexpect\u003C\u002Fspan\u003E(screen.\u003Cspan class=\"hljs-title function_\"\u003EqueryByText\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;Character 2&quot;\u003C\u002Fspan\u003E)).\u003Cspan class=\"hljs-title function_\"\u003EtoBeNull\u003C\u002Fspan\u003E();\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"\u003Cstrong\u003E參考資料\u003C\u002Fstrong\u003E\" title=\"\u003Cstrong\u003E參考資料\u003C\u002Fstrong\u003E\"\u003E\u003Ca href=\"#\u003Cstrong\u003E參考資料\u003C\u002Fstrong\u003E\"\u003E\u003Cstrong\u003E參考資料\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fvite.dev\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EVitest\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca  href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=FDEf3iWEgFI\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EFast Unit Testing With Vitest\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n",toc:{title:b,subtitles:["前言","範例","參考資料"]},wordCount:1200}}}}(null,"Vitest - Mocking","2024-12-15T00:00:00.000Z"));