window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1715802237",layout:"default",error:a,serverRendered:true,routePath:"\u002Fdev\u002FNPM\u002Fbraft-editor",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}},globalRefs:{},ssrRefs:{"articleMatter-NPM-braft-editor":{info:{title:b,fileName:c,description:"Braft Editor 踩坑記，先說結論，可以考慮別的富文本編輯器套件。",createdAt:d,updatedAt:d,tags:[c,"draftjs","rich text editor"]},content:"\u003Ch6\u003Etags: \u003Ccode\u003Ebraft-editor\u003C\u002Fcode\u003E、\u003Ccode\u003Edraftjs\u003C\u002Fcode\u003E、\u003Ccode\u003Erich text editor\u003C\u002Fcode\u003E\u003C\u002Fh6\u003E\n\u003Ch1 id=\"富文本編輯器 - Braft Editor\" title=\"富文本編輯器 - Braft Editor\"\u003E富文本編輯器 - Braft Editor\u003C\u002Fh1\u003E\n\u003Cp\u003E基於 \u003Ca  href=\"https:\u002F\u002Fdraftjs.org\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EDraft.js\u003C\u002Fa\u003E 開發，可以到 \u003Ca  href=\"https:\u002F\u002Fbraft.margox.cn\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EBraft Editor\u003C\u002Fa\u003E 官網體驗一下功能，有別於 Draft 非常裸，功能很多需自己實現，這款算是真的即開即用，官方 API 文件也寫得不錯，對於時程有壓力或者是只需要基本功能的編輯器的話，這套滿推薦的。\u003C\u002Fp\u003E\n\u003Ch2 id=\"使用\" title=\"使用\"\u003E\u003Ca href=\"#使用\"\u003E使用\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003EStep 1. 安裝套件\u003C\u002Fh3\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Eyarn add braft-editor\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch3\u003EStep 2. 引入編輯器和樣式\u003C\u002Fh3\u003E\n\u003Cp\u003E可以依據需要的功能做篩選和顯示，可參考\u003Ca  href=\"https:\u002F\u002Fwww.yuque.com\u002Fbraft-editor\u002Fbe\u002Fgz44tn\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E官方文件教學\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Editor.tsx\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 引入編輯器樣式\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;braft-editor\u002Fdist\u002Findex.css&quot;\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EBraftEditor\u003C\u002Fspan\u003E, { \u003Cspan class=\"hljs-title class_\"\u003EEditorState\u003C\u002Fspan\u003E } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;braft-editor&quot;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { useState } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;react&quot;\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EEditor\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [editorState, setEditorState] =\n    useState &lt; \u003Cspan class=\"hljs-title class_\"\u003EEditorState\u003C\u002Fspan\u003E &gt; \u003Cspan class=\"hljs-title class_\"\u003EBraftEditor\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003EcreateEditorState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;&quot;\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n    \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EBraftEditor\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Evalue\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{editorState}\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003EonChange\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{setEditorState}\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Eplaceholder\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;# braft editor&quot;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003Elanguage\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;zh-hant&quot;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-attr\"\u003EstripPastedStyles\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{true}\u003C\u002Fspan\u003E\n    \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  );\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FAhfgtlo.png\" alt=\"\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"踩坑\" title=\"踩坑\"\u003E\u003Ca href=\"#踩坑\"\u003E踩坑\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E針對環境和 \u003Ccode\u003Ebraft-editor\u003C\u002Fcode\u003E 套件的坑，分別做紀錄下來:\u003C\u002Fp\u003E\n\u003Ch3\u003EBraft Editor\u003C\u002Fh3\u003E\n\u003Ch4\u003E- 繁體翻譯不完全\u003C\u002Fh4\u003E\n\u003Cp\u003E為了解決繁體翻譯的詞彙不達意和媒體庫沒支援到繁體問題，可以新增語言翻譯設定檔，搭配 Braft Editor 提供的 \u003Ccode\u003Elanguage\u003C\u002Fcode\u003E API 傳入設定檔。\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca  href=\"https:\u002F\u002Fgithub.com\u002Fmargox\u002Fbraft-editor\u002Fblob\u002Fmaster\u002Fsrc\u002Flanguages\u002Fzh-hant.js\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E編輯器 (braft-editor)\u003C\u002Fa\u003E 和 \u003Ca  href=\"https:\u002F\u002Fgithub.com\u002Fmargox\u002Fbraft-finder\u002Fblob\u002Fmaster\u002Fsrc\u002Flanguages\u002Fzh.js\" target=\"_blank\" rel=\"noreferrer noopener\"\u003E媒體庫 (braft-finder)\u003C\u002Fa\u003E 語言設定檔是不同的，自己的 \u003Ccode\u003ElanguageConfig\u003C\u002Fcode\u003E 需同時包含這個兩個所需的設定檔資料。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ebraft-finder\u003C\u002Fcode\u003E 雖然 GitHub 看起來有繁體設定檔案，但不知道為什麼沒吃到設定，可以參考我的 \u003Ccode\u003ElanguageConfig\u003C\u002Fcode\u003E，有順利解決繁體的問題！\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E&lt;\u003Cspan class=\"hljs-title class_\"\u003EBraftEditor\u003C\u002Fspan\u003E\n  ...\n  language={\u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E languageConfig}\n\u002F&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E改完後順利顯示熟悉的繁體～ 👏\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FQsNg5A0.png\" alt=\"繁體 bug\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E- React Warning\u003C\u002Fh4\u003E\n\u003Cp\u003E控制台會有 \u003Ccode\u003Ereact_devtools_backend.js:4061 Warning: findDOMNode is deprecated in StrictMode.\u003C\u002Fcode\u003E 的警告，目前無解，有看到相關 \u003Ca  href=\"https:\u002F\u002Fgithub.com\u002Fmargox\u002Fbraft-editor\u002Fsearch?q=componentWillMount&amp;type=issues\" target=\"_blank\" rel=\"noreferrer noopener\"\u003Eissues 討論\u003C\u002Fa\u003E，尚未被 close，待作者維護更新 😢\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FVhNMJDw.png\" alt=\"React Warning\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Ch3\u003EVite\u003C\u002Fh3\u003E\n\u003Cp\u003E如果有使用 Vite 打包工具來開發，會遇到 \u003Ccode\u003EUncaught ReferenceError: global is not defined\u003C\u002Fcode\u003E 的問題，可以在 \u003Ccode\u003Evite.config.ts\u003C\u002Fcode\u003E 定義 global\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FukH6Mbr.png\" alt=\"vite global\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F vite.config.ts\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F https:\u002F\u002Fgithub.com\u002Fvitejs\u002Fvite\u002Fdiscussions\u002F3859\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EdefineConfig\u003C\u002Fspan\u003E({\n  ...,\n  \u003Cspan class=\"hljs-attr\"\u003Edefine\u003C\u002Fspan\u003E: {\n    \u003Cspan class=\"hljs-attr\"\u003Eglobal\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-string\"\u003E&quot;window&quot;\u003C\u002Fspan\u003E\n  }\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u002F\u003E\n\u003Ch3\u003ETypeScript\u003C\u002Fh3\u003E\n\u003Cp\u003E遇到 \u003Ccode\u003ECannot find module 'braft-utils' or its corresponding type declarations.\u003C\u002Fcode\u003E，需自行為 \u003Ccode\u003Ebraft-utils\u003C\u002Fcode\u003E 新增型別聲明檔 \u003Ccode\u003E(*.d.ts)\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FLQQKnta.png\" alt=\"editor.d.ts\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F editor.d.ts\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F https:\u002F\u002Fchocolate.blog.csdn.net\u002Farticle\u002Fdetails\u002F120787808\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Edeclare\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-variable language_\"\u003Emodule\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;braft-utils&quot;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EContentUtils\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Eany\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E { \u003Cspan class=\"hljs-title class_\"\u003EContentUtils\u003C\u002Fspan\u003E };\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u002F\u003E\n\u003Ch3\u003ENextJS\u003C\u002Fh3\u003E\n\u003Cp\u003E正常引入 \u003Ccode\u003EBraftEditor\u003C\u002Fcode\u003E，因為 SSR 關係，同時會 Server 和 Client 環境，在 Server 底下是沒有 window，所以會出現 \u003Ccode\u003Ewindow is not defined\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002Fmml10Me.png\" alt=\"ssr error\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Editor.tsx\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EBraftEditor\u003C\u002Fspan\u003E, { \u003Cspan class=\"hljs-title class_\"\u003EEditorState\u003C\u002Fspan\u003E } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;braft-editor&quot;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { useState } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;react&quot;\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EEditor\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [editorState, setEditorState] =  useState&lt;\u003Cspan class=\"hljs-title class_\"\u003EEditorState\u003C\u002Fspan\u003E&gt;(\u003Cspan class=\"hljs-title class_\"\u003EBraftEditor\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003EcreateEditorState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E))\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n    \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EBraftEditor\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003E...\u003C\u002Fspan\u003E\u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  )\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u002F\u003E\n\u003Cp\u003E一開始先試 \u003Ccode\u003Eif (typeof window !== &quot;undefined&quot;)\u003C\u002Fcode\u003E 想繞開 Server，但依舊無效，放棄這條路。\u003C\u002Fp\u003E\n\u003Cp\u003E第二次嘗試把 \u003Ccode\u003EBraftEditor\u003C\u002Fcode\u003E 用 dynamic import 方式，延遲載入 \u003Ccode\u003E&lt;BraftEditor \u002F&gt;\u003C\u002Fcode\u003E component，解決了 window 的 error，但得到了另一個 error \u003Ccode\u003ETypeError: BraftEditor.createEditorState is not a function\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EBraftEditor\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-title function_\"\u003Edynamic\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-title function_\"\u003Eimport\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;..\u002Fcomponents\u002FEditor&quot;\u003C\u002Fspan\u003E), {\n  \u003Cspan class=\"hljs-attr\"\u003Essr\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Eloading\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003ELoading ...\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fi.imgur.com\u002FSPOb4sT.png\" alt=\"dynamic error\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cbr\u002F\u003E\n\u003Cp\u003E這是為什麼？把滑鼠 hover 到 \u003Ccode\u003EBraftEditor\u003C\u002Fcode\u003E 可以看到 \u003Ccode\u003Econst BraftEditor: ComponentType&lt;Props&gt;\u003C\u002Fcode\u003E，此時 \u003Ccode\u003EBraftEditor\u003C\u002Fcode\u003E 是代表一個 Component，而非原本 Class，導致在 useState 初始化時，無法使用 \u003Ccode\u003EcreateEditorState\u003C\u002Fcode\u003E 這個由 Class 提供的方法。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F BraftEditor 是 Class 物件，擁有完整功能\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EBraftEditor\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;braft-editor&quot;\u003C\u002Fspan\u003E;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F BraftEditor 只是 component\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EBraftEditor\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-title function_\"\u003Edynamic\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-title function_\"\u003Eimport\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;..\u002Fcomponents\u002FEditor&#x27;\u003C\u002Fspan\u003E), {\n  \u003Cspan class=\"hljs-attr\"\u003Essr\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Eloading\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003ELoading ...\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n})\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EEditor\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F BraftEditor 不存在 createEditorState 方法\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [editorState, setEditorState] =  useState&lt;\u003Cspan class=\"hljs-title class_\"\u003EEditorState\u003C\u002Fspan\u003E&gt;(\u003Cspan class=\"hljs-title class_\"\u003EBraftEditor\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003EcreateEditorState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\u003C\u002Fspan\u003E))\n  ...\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u002F\u003E\n\u003Cp\u003E最後解決方法是，在 \u003Ccode\u003EEditor.tsx\u003C\u002Fcode\u003E 是用 static import，父層使用 dynamic import，既可以繞過 Server，也同時讓 \u003Ccode\u003EBraftEditor\u003C\u002Fcode\u003E 擁有完整 Class 功能和兼具 Component 的角色。\u003C\u002Fp\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F index.tsx\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EEditor\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-title function_\"\u003Edynamic\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-title function_\"\u003Eimport\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;..\u002Fcomponents\u002FEditor&quot;\u003C\u002Fspan\u003E), {\n  \u003Cspan class=\"hljs-attr\"\u003Essr\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"hljs-attr\"\u003Eloading\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003ELoading ...\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ep\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n});\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EHome\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-title class_\"\u003ENextPage\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-function\"\u003E() =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [text, setText] = \u003Cspan class=\"hljs-title function_\"\u003EuseState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;&quot;\u003C\u002Fspan\u003E);\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E (\n    \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Emain\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EEditor\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\n      ...\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Emain\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n  );\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Editor.tsx\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title class_\"\u003EBraftEditor\u003C\u002Fspan\u003E, { \u003Cspan class=\"hljs-title class_\"\u003EEditorState\u003C\u002Fspan\u003E } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;braft-editor&quot;\u003C\u002Fspan\u003E;\n\u003Cspan class=\"hljs-keyword\"\u003Eimport\u003C\u002Fspan\u003E { useState } \u003Cspan class=\"hljs-keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;react&quot;\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title function_\"\u003EEditor\u003C\u002Fspan\u003E = (\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) =&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E [editorState, setEditorState] = useState&lt;\u003Cspan class=\"hljs-title class_\"\u003EEditorState\u003C\u002Fspan\u003E&gt;(\n    \u003Cspan class=\"hljs-title class_\"\u003EBraftEditor\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-title function_\"\u003EcreateEditorState\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-string\"\u003E&quot;&quot;\u003C\u002Fspan\u003E)\n  );\n\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"language-xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003EBraftEditor\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Evalue\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{editorState}\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003EonChange\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E{setEditorState}\u003C\u002Fspan\u003E \u002F&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E;\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"總結\" title=\"總結\"\u003E\u003Ca href=\"#總結\"\u003E總結\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\n\u003Ch3\u003E\u003Cstrong\u003E優點：\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Col\u003E\n\u003Cli\u003E可針對原有功能 icon 客製化，icon 也可接受 JSX 格式\u003C\u002Fli\u003E\n\u003Cli\u003E客製化 Toolbar 功能選項，也支援擴充新功能\u003C\u002Fli\u003E\n\u003Cli\u003E支援多語系\u003C\u002Fli\u003E\n\u003Cli\u003E支援客製化 Toolbar 和編輯區 css\u003C\u002Fli\u003E\n\u003Cli\u003E同時可支援圖片\u002F影片\u002F音源上傳\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch3\u003E\u003Cstrong\u003E缺點\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Col\u003E\n\u003Cli\u003EToolbar 位置無法自訂，與編輯區無法分離\u003C\u002Fli\u003E\n\u003Cli\u003Enpm 最後一版更新是在 2019，看 issues 別人提到作者目前沒太多時間可以維護\u003C\u002Fli\u003E\n\u003Cli\u003E超連結、媒體庫的 Model 樣式無法自訂\u003C\u002Fli\u003E\n\u003Cli\u003E繁體翻譯與台灣慣用詞彙不同，媒體庫的 Model 沒支援到繁體翻譯\u003C\u002Fli\u003E\n\u003Cli\u003E如有使用到更進階開發功能，會使用 \u003Ccode\u003Ebraft-utils\u003C\u002Fcode\u003E 等套件，TypeScript 支援度不好\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E針對後面兩點都有解決方案，但如果需要選擇有持續維護的套件就要慎入，或者主產品是編輯器的，強烈考慮使用 \u003Ca  href=\"https:\u002F\u002Flexical.dev\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ELexical\u003C\u002Fa\u003E，是 Facebook 開發維護的，或 \u003Ca  href=\"https:\u002F\u002Fquilljs.com\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EQuill.js\u003C\u002Fa\u003E，目前兩個都有持續更新 👍。\u003C\u002Fp\u003E\n\u003Cp\u003E在 Survey 編輯器期間，發現這其實是一個大坑，主要是很多套件，距離上一次更新都很久了，但其實現在手機各平台版本、瀏覽器版本、前端框架版本一直在推陳出新，如果編輯器版本更新跟不上，簡直是場災難。\u003C\u002Fp\u003E\n\u003Cp\u003E當初選擇 \u003Ccode\u003Ebraft-editor\u003C\u002Fcode\u003E 是因為底層是用 \u003Ca  href=\"https:\u002F\u002Fdraftjs.org\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EDraft.js\u003C\u002Fa\u003E 開發，包裝的功能也很完整，且想說如果 \u003Ccode\u003Ebraft-editor\u003C\u002Fcode\u003E 作者不維護的話，退一步還可以用 \u003Ca  href=\"https:\u002F\u002Fdraftjs.org\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EDraft.js\u003C\u002Fa\u003E (Facebook 家的)寫出想要功能，這樣轉移的痛感會比較低，想不到不到一年，Facebook 直接放棄開發 \u003Ca  href=\"https:\u002F\u002Fdraftjs.org\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EDraft.js\u003C\u002Fa\u003E，改推 \u003Ca  href=\"https:\u002F\u002Flexical.dev\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ELexical\u003C\u002Fa\u003E，人算不如天算！\u003C\u002Fp\u003E\n\u003Cp\u003E不過根據朋友從 \u003Ca  href=\"https:\u002F\u002Fdraftjs.org\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003EDraft.js\u003C\u002Fa\u003E 跳坑到 \u003Ca  href=\"https:\u002F\u002Flexical.dev\u002F\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ELexical\u003C\u002Fa\u003E 經驗分享，體驗上是給予高度讚賞的，推薦入坑。\u003C\u002Fp\u003E\n",toc:{title:b,subtitles:["使用","踩坑","總結"]}}}}}(null,"富文本編輯器 - Braft Editor","braft-editor","2024-05-17T00:00:00.000Z"));