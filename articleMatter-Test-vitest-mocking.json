{"info":{"title":"Vitest - Mocking","fileName":"vitest-mocking","description":"Vitest Mocking 方法介紹","createdAt":"2024-12-15T00:00:00.000Z","updatedAt":"2024-12-15T00:00:00.000Z","tags":["Test","Vitest","mock"]},"content":"<h1 id=\"Vitest - Mocking\" title=\"Vitest - Mocking\">Vitest - Mocking</h1>\n<h2 id=\"前言\" title=\"前言\"><a href=\"#前言\">前言</a></h2>\n<p>在撰寫測試時，經常遇到的挑戰是大部分程式碼包含 Side Effect，並非單純的 Pure Function。這些程式碼可能依賴外部套件、網路等因素，增加了測試的複雜性和不穩定性。此外，測試時通常不希望直接依賴外部 API，以免因外部因素的變動導致 CI 測試失敗、誤觸發 DoS、或超出速率限制。</p>\n<p>為了解決這些問題，可以透過 mock 方法來模擬函式的返回值或 API 的回應，讓測試聚焦於當前程式碼的邏輯。</p>\n<blockquote>\n<p>@<a  href=\"https://vitest.dev/guide/mocking.html\" target=\"_blank\" rel=\"noreferrer noopener\">Vitest Mocking Doc</a><br />\n@<a  href=\"https://www.youtube.com/watch?v=FDEf3iWEgFI\" target=\"_blank\" rel=\"noreferrer noopener\">Fast Unit Testing With Vitest</a> - 1:04:30</p>\n</blockquote>\n<h2 id=\"範例\" title=\"範例\"><a href=\"#範例\">範例</a></h2>\n<blockquote>\n<p>@<a  href=\"https://github.com/JennieSH/vitest-example/blob/main/app/components/CharacterList.test.tsx\" target=\"_blank\" rel=\"noreferrer noopener\">CharacterList 測試程式碼 Github 入口</a></p>\n</blockquote>\n<p>用一個簡單 React 程式碼來分別演示如何 <code>Mock API Fetching</code> 和 <code>Mock hook</code> ：</p>\n<ul>\n<li><code>CharacterList</code> - 提供打關鍵字的搜尋框，並會渲染出對應的角色列表</li>\n<li><code>useSearch</code> - 會根據關鍵字(keyword)，返回包含關鍵字的物件陣列</li>\n<li><code>useCharacters</code> - 執行打 API 的邏輯函式，且返回 API 相關狀態</li>\n</ul>\n<p><code>CharacterList</code> 中有使用到 <code>useCharacters</code> 和 <code>useSearch</code> 這兩個 hooks。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// CharacterList.tsx - 提供打關鍵字的搜尋框，並會渲染出對應的角色列表</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">CharacterList</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> { characters } = <span class=\"hljs-title function_\">useCharacters</span>();\n  <span class=\"hljs-keyword\">const</span> { keyword, filteredItems, setKeyword } = useSearch&lt;<span class=\"hljs-title class_\">Character</span>&gt;(\n    characters,\n    [<span class=\"hljs-string\">&quot;name&quot;</span>]\n  );\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{keyword}</span>\n        <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Search characters&quot;</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> setKeyword(e.target.value)}\n      /&gt;\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n        {filteredItems.map((character) =&gt; (\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{character.id}</span>&gt;</span>{character.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n        ))}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// useSearch.tsx -  會根據關鍵字(keyword)，返回包含關鍵字的物件陣列</span>\n<span class=\"hljs-keyword\">const</span> useSearch = &lt;T <span class=\"hljs-keyword\">extends</span> { [<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">any</span> }&gt;<span class=\"hljs-function\">(<span class=\"hljs-params\">\n  items: T[],\n  filters = [<span class=\"hljs-string\">&quot;id&quot;</span>]\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> [keyword, setKeyword] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n  <span class=\"hljs-keyword\">const</span> filteredItems = items.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span>\n    filters.<span class=\"hljs-title function_\">some</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">key</span>) =&gt;</span>\n      item[key]?.<span class=\"hljs-title function_\">toLowerCase</span>().<span class=\"hljs-title function_\">includes</span>(keyword.<span class=\"hljs-title function_\">toLowerCase</span>())\n    )\n  );\n\n  <span class=\"hljs-keyword\">return</span> {\n    keyword,\n    filteredItems,\n    setKeyword\n  };\n};\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// useCharacters.tsx - 執行打 API 的邏輯函式，且返回 API 相關狀態</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Character</span> = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> useCharacters = (): {\n  <span class=\"hljs-attr\">characters</span>: <span class=\"hljs-title class_\">Character</span>[];\n  <span class=\"hljs-attr\">isLoading</span>: <span class=\"hljs-built_in\">boolean</span>;\n  <span class=\"hljs-attr\">error</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>;\n} =&gt; {\n  <span class=\"hljs-keyword\">const</span> [characters, setCharacters] = <span class=\"hljs-title function_\">useState</span>([]);\n  <span class=\"hljs-keyword\">const</span> [isLoading, setIsLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [error, setError] = useState&lt;<span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>&gt;(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-keyword\">const</span> fetchCharacters = <span class=\"hljs-keyword\">async</span> () =&gt; {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-title function_\">setIsLoading</span>(<span class=\"hljs-literal\">true</span>);\n\n      <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(\n        <span class=\"hljs-string\">&quot;https://rickandmortyapi.com/api/character/?name=rick&amp;status=alive&quot;</span>\n      );\n\n      <span class=\"hljs-keyword\">if</span> (!response.<span class=\"hljs-property\">ok</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;Failed to fetch characters&quot;</span>);\n      }\n\n      <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>();\n      <span class=\"hljs-title function_\">setCharacters</span>(data.<span class=\"hljs-property\">results</span>);\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-title function_\">setError</span>((error <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Error</span>).<span class=\"hljs-property\">message</span>);\n    } <span class=\"hljs-keyword\">finally</span> {\n      <span class=\"hljs-title function_\">setIsLoading</span>(<span class=\"hljs-literal\">false</span>);\n    }\n  };\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">fetchCharacters</span>();\n  }, []);\n\n  <span class=\"hljs-keyword\">return</span> {\n    characters,\n    isLoading,\n    error\n  };\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useCharacters;\n</code></pre>\n<h3>設定 Mocking 對象</h3>\n<h4><strong>1. import 需要模擬的函式</strong></h4>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> useCharacters <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../hooks/useCharacters&quot;</span>;\n<span class=\"hljs-keyword\">import</span> useSearch <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../hooks/useSearch&quot;</span>;\n</code></pre>\n<h4><strong>2. 使用 <code>vi.mock</code> 選擇要模擬的函式</strong></h4>\n<pre class=\"hljs\"><code>vi.<span class=\"hljs-title function_\">mock</span>(<span class=\"hljs-string\">&quot;../hooks/useCharacters&quot;</span>);\nvi.<span class=\"hljs-title function_\">mock</span>(<span class=\"hljs-string\">&quot;../hooks/useSearch&quot;</span>);\n</code></pre>\n<h4><strong>3. 宣告模擬的函式</strong></h4>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> mockUseCharacters = useCharacters <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">MockedFunction</span>&lt;<span class=\"hljs-keyword\">typeof</span> useCharacters&gt;;\n<span class=\"hljs-keyword\">const</span> mockUseSearch = useSearch <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">MockedFunction</span>&lt;<span class=\"hljs-keyword\">typeof</span> useSearch&gt;;\n</code></pre>\n<h4><strong>4. 使用 <code>MockedFunction</code> 來指定模擬函式的返回值</strong></h4>\n<pre class=\"hljs\"><code>mockUseCharacters.<span class=\"hljs-title function_\">mockReturnValue</span>({\n  <span class=\"hljs-attr\">characters</span>: [\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Character 1&quot;</span> },\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Character 2&quot;</span> }\n  ],\n  <span class=\"hljs-attr\">isLoading</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">error</span>: <span class=\"hljs-literal\">null</span>\n});\n\nmockUseSearch.<span class=\"hljs-title function_\">mockReturnValue</span>({\n  <span class=\"hljs-attr\">keyword</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-attr\">filteredItems</span>: [\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Character 1&quot;</span> },\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Character 2&quot;</span> }\n  ],\n  <span class=\"hljs-attr\">setKeyword</span>: vi.<span class=\"hljs-title function_\">fn</span>()\n});\n</code></pre>\n<details class='spoiler'><summary>步驟完整程式碼</summary>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { cleanup } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@testing-library/react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { afterEach, beforeEach, describe, <span class=\"hljs-title class_\">MockedFunction</span>, vi } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vitest&quot;</span>;\n\n<span class=\"hljs-comment\">// 1. 引入測試需要的函式</span>\n<span class=\"hljs-keyword\">import</span> useCharacters <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../hooks/useCharacters&quot;</span>;\n<span class=\"hljs-keyword\">import</span> useSearch <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../hooks/useSearch&quot;</span>;\n\n<span class=\"hljs-comment\">// 2. 選擇要模擬的函式</span>\nvi.<span class=\"hljs-title function_\">mock</span>(<span class=\"hljs-string\">&quot;../hooks/useCharacters&quot;</span>);\nvi.<span class=\"hljs-title function_\">mock</span>(<span class=\"hljs-string\">&quot;../hooks/useSearch&quot;</span>);\n\n<span class=\"hljs-comment\">// 3. 宣告模擬的函式</span>\n<span class=\"hljs-keyword\">const</span> mockUseCharacters = useCharacters <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">MockedFunction</span>&lt;<span class=\"hljs-keyword\">typeof</span> useCharacters&gt;;\n<span class=\"hljs-keyword\">const</span> mockUseSearch = useSearch <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">MockedFunction</span>&lt;<span class=\"hljs-keyword\">typeof</span> useSearch&gt;;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;CharacterList Component&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// 4. 指定模擬函式的返回值 (設置每個測試的初始狀態)</span>\n    mockUseCharacters.<span class=\"hljs-title function_\">mockReturnValue</span>({\n      <span class=\"hljs-attr\">characters</span>: [\n        { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Character 1&quot;</span> },\n        { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Character 2&quot;</span> }\n      ],\n      <span class=\"hljs-attr\">isLoading</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-attr\">error</span>: <span class=\"hljs-literal\">null</span>\n    });\n\n    mockUseSearch.<span class=\"hljs-title function_\">mockReturnValue</span>({\n      <span class=\"hljs-attr\">keyword</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n      <span class=\"hljs-attr\">filteredItems</span>: [\n        { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Character 1&quot;</span> },\n        { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Character 2&quot;</span> }\n      ],\n      <span class=\"hljs-attr\">setKeyword</span>: vi.<span class=\"hljs-title function_\">fn</span>()\n    });\n  });\n\n  <span class=\"hljs-title function_\">afterEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    vi.<span class=\"hljs-title function_\">clearAllMocks</span>();\n    <span class=\"hljs-title function_\">cleanup</span>(); <span class=\"hljs-comment\">// 清理 DOM</span>\n  });\n});\n</code></pre>\n<p>如果確保返回值永遠是定值，且後面不需要在更新修改該資料，可以在執行到第二步驟即可，<code>vi.mock</code> 傳入第二個參數，後續都會返回其結果：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 呼叫 getUsers，永遠的 return 值都會是這邊設定好的，不會因後續操作而變動</span>\nvi.<span class=\"hljs-title function_\">mock</span>(<span class=\"hljs-string\">&quot;./getUsers&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-title function_\">getUsers</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">user</span>: [\n          { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Jennie&quot;</span> },\n          { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Jason&quot;</span> }\n        ],\n        <span class=\"hljs-attr\">isLoading</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">error</span>: <span class=\"hljs-literal\">null</span>\n      };\n    }\n  };\n});\n</code></pre>\n</details>\n<h3>測試目標</h3>\n<h4>1. 初始渲染列表</h4>\n<p>測試第一次渲染的內容是否為預期。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;renders characters correctly&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CharacterList</span> /&gt;</span></span>);\n  <span class=\"hljs-title function_\">expect</span>(screen.<span class=\"hljs-title function_\">getByText</span>(<span class=\"hljs-string\">&quot;Character 1&quot;</span>)).<span class=\"hljs-title function_\">toBeTruthy</span>();\n  <span class=\"hljs-title function_\">expect</span>(screen.<span class=\"hljs-title function_\">getByText</span>(<span class=\"hljs-string\">&quot;Character 2&quot;</span>)).<span class=\"hljs-title function_\">toBeTruthy</span>();\n});\n</code></pre>\n<h4>2. 搜尋功能</h4>\n<p>測試在輸入框內輸入關鍵字後，渲染的列表內容是否有包含該關鍵字。</p>\n<p>使用到的 API：</p>\n<ul>\n<li><strong><code>mockReturnValueOnce</code></strong><br />\n只會在下一次調用 useSearch 時返回這個值，這樣可以模擬特定情境下的返回值，而不影響其他測試。</li>\n<li><strong><code>rerender</code></strong><br />\n用於模擬 React 組件在資料改變後的重新渲染機制，因資料改變，從而觸發畫面更新。</li>\n<li><strong><code>fireEvent</code></strong><br />\n模擬 React 事件，例如 change、click 等。</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;changes keyword in UI and filters characters&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> setKeywordMock = vi.<span class=\"hljs-title function_\">fn</span>();\n  mockUseSearch.<span class=\"hljs-title function_\">mockReturnValueOnce</span>({\n    <span class=\"hljs-attr\">keyword</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n    <span class=\"hljs-attr\">filteredItems</span>: [\n      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Character 1&quot;</span> },\n      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Character 2&quot;</span> }\n    ],\n    <span class=\"hljs-attr\">setKeyword</span>: setKeywordMock\n  });\n\n  <span class=\"hljs-keyword\">const</span> { rerender } = <span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CharacterList</span> /&gt;</span></span>);\n\n  <span class=\"hljs-keyword\">const</span> input = screen.<span class=\"hljs-title function_\">getByPlaceholderText</span>(<span class=\"hljs-string\">&quot;Search characters&quot;</span>);\n  <span class=\"hljs-comment\">// 模擬觸發 input 值改變</span>\n  fireEvent.<span class=\"hljs-title function_\">change</span>(input, { <span class=\"hljs-attr\">target</span>: { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;Character 1&quot;</span> } });\n\n  <span class=\"hljs-comment\">// 模擬 mockUseSearch 在 input 改變後的返回值</span>\n  mockUseSearch.<span class=\"hljs-title function_\">mockReturnValueOnce</span>({\n    <span class=\"hljs-attr\">keyword</span>: <span class=\"hljs-string\">&quot;Character 1&quot;</span>,\n    <span class=\"hljs-attr\">filteredItems</span>: [{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Character 1&quot;</span> }],\n    <span class=\"hljs-attr\">setKeyword</span>: setKeywordMock\n  });\n\n  <span class=\"hljs-comment\">// 重新渲染 CharacterList</span>\n  <span class=\"hljs-title function_\">rerender</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CharacterList</span> /&gt;</span></span>);\n\n  <span class=\"hljs-title function_\">expect</span>(setKeywordMock).<span class=\"hljs-title function_\">toHaveBeenCalledWith</span>(<span class=\"hljs-string\">&quot;Character 1&quot;</span>);\n  <span class=\"hljs-title function_\">expect</span>(screen.<span class=\"hljs-title function_\">getByText</span>(<span class=\"hljs-string\">&quot;Character 1&quot;</span>)).<span class=\"hljs-title function_\">toBeTruthy</span>();\n  <span class=\"hljs-title function_\">expect</span>(screen.<span class=\"hljs-title function_\">queryByText</span>(<span class=\"hljs-string\">&quot;Character 2&quot;</span>)).<span class=\"hljs-title function_\">toBeNull</span>();\n});\n</code></pre>\n<h2 id=\"<strong>參考資料</strong>\" title=\"<strong>參考資料</strong>\"><a href=\"#<strong>參考資料</strong>\"><strong>參考資料</strong></a></h2>\n<ul>\n<li><a  href=\"https://vite.dev/\" target=\"_blank\" rel=\"noreferrer noopener\">Vitest</a></li>\n<li><a  href=\"https://www.youtube.com/watch?v=FDEf3iWEgFI\" target=\"_blank\" rel=\"noreferrer noopener\">Fast Unit Testing With Vitest</a></li>\n</ul>\n","toc":{"title":"Vitest - Mocking","subtitles":["前言","範例","參考資料"]},"wordCount":1200}