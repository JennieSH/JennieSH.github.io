{"info":{"title":"Vitest - 語法與常用 Matchers","fileName":"vitest-matchers","description":"語法與常用 Matchers 介紹","createdAt":"2024-12-15T00:00:00.000Z","updatedAt":"2024-12-15T00:00:00.000Z","tags":["Test","Vitest"]},"content":"<h1 id=\"Vitest - 語法與常用 Matchers\" title=\"Vitest - 語法與常用 Matchers\">Vitest - 語法與常用 Matchers</h1>\n<h2 id=\"基本語法\" title=\"基本語法\"><a href=\"#基本語法\">基本語法</a></h2>\n<h3>test / it</h3>\n<p>定義一個測試案例(test case)的最小單位，<code>it</code> 為 <code>test</code> 的別名，可替代使用。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { expect, test } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vitest&quot;</span>;\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;should work as expected&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sqrt</span>(<span class=\"hljs-number\">4</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>);\n});\n</code></pre>\n<h3>describe</h3>\n<p>會形成一個作用域(scope)，可以將同一個測試情境(test suite)的相關性測試案例(test case)集中起來。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { describe, test, expect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vitest&quot;</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;Input 組件&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;沒有輸入文字前，應該顯示 xxx placeholder&quot;</span>,  <span class=\"hljs-function\">() =&gt;</span> {...});\n  <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;輸入文字後，搜尋按鈕要 enable&quot;</span>,  <span class=\"hljs-function\">() =&gt;</span> {...});\n  <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;輸入字數超過最大字數限制時，應該顯示錯誤訊息&quot;</span>,  <span class=\"hljs-function\">() =&gt;</span> {...});\n});\n</code></pre>\n<h3>vi</h3>\n<p>是 vitest 提供的輔助工具，可以提供模擬 Modules、函式、物件和時間等功能。</p>\n<blockquote>\n<p><strong>補充：</strong> vi 是對應 Jest 的 jest API。</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { expect, test, vi } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vitest&quot;</span>;\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Element render correctly&quot;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-comment\">// 等到 element 出現在頁面上，再對 element 做操作</span>\n  <span class=\"hljs-keyword\">const</span> element = <span class=\"hljs-keyword\">await</span> vi.<span class=\"hljs-title function_\">waitUntil</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.element&quot;</span>), {\n    <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">500</span>, <span class=\"hljs-comment\">// default is 1000</span>\n    <span class=\"hljs-attr\">interval</span>: <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">// default is 50</span>\n  });\n\n  <span class=\"hljs-comment\">// do something with the element</span>\n  <span class=\"hljs-title function_\">expect</span>(element.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.element-child&quot;</span>)).<span class=\"hljs-title function_\">toBeTruthy</span>();\n});\n</code></pre>\n<h2 id=\"<strong>斷言語法和常見</strong> Matchers\" title=\"<strong>斷言語法和常見</strong> Matchers\"><a href=\"#<strong>斷言語法和常見</strong> Matchers\"><strong>斷言語法和常見</strong> Matchers</a></h2>\n<p>斷言(Assertion) 是在測試中用來檢查程式碼是否按預期運行的語句，驗證某個條件是否為真或假(true/false)。根據測試比對的東西類型，所搭配使用的 Matchers 選擇也不同。</p>\n<h3>expect</h3>\n<p>用於創建斷言，程式碼執行結果與斷言設定一致的話，就會通過測試，支援 <code>chai</code> 和 <code>Jest</code> 斷言寫法。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sqrt</span>(<span class=\"hljs-number\">4</span>)).<span class=\"hljs-property\">to</span>.<span class=\"hljs-title function_\">equal</span>(<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// chai API</span>\n<span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sqrt</span>(<span class=\"hljs-number\">4</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// jest API</span>\n</code></pre>\n<blockquote>\n<p><strong>補充：</strong></p>\n<p>如果想檢查 type，可使用 <code>expectTypeOf</code> 或 <code>assertType</code> ，或者使用 <code>expect</code> + <code>toBeTypeOf</code>。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-title function_\">expectTypeOf</span>({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }).<span class=\"hljs-property\">toEqualTypeOf</span>&lt;{ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-built_in\">number</span> }&gt;();\n<span class=\"hljs-title function_\">expectTypeOf</span>({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }).<span class=\"hljs-title function_\">toEqualTypeOf</span>({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> });\n\n<span class=\"hljs-comment\">// 泛型檢查</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">concat</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">string</span>, b: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">string</span>;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">concat</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">number</span>;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">concat</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>;\n\nassertType&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-title function_\">concat</span>(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>));\nassertType&lt;<span class=\"hljs-built_in\">number</span>&gt;(<span class=\"hljs-title function_\">concat</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>));\n\n<span class=\"hljs-comment\">// expect + toBeTypeOf</span>\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;stock is type of string&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-string\">&quot;stock&quot;</span>).<span class=\"hljs-title function_\">toBeTypeOf</span>(<span class=\"hljs-string\">&quot;string&quot;</span>);\n});\n</code></pre>\n</blockquote>\n<h3>純值</h3>\n<ul>\n<li>\n<p><strong><code>toBe</code></strong></p>\n<p>斷言值或斷言物件的 reference 是否相等。</p>\n<blockquote>\n<p><strong>補充：</strong></p>\n<ul>\n<li>\n<p>JavaScript 有浮點數精算問題，浮點數的計算要使用 <code>toBeCloseTo</code></p>\n</li>\n<li>\n<p>想檢查物件(Object)的結構是否相等，要使用 <code>toEqual</code></p>\n</li>\n</ul>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> stock = {\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;apples&quot;</span>,\n  <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">13</span>\n};\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;stock has 13 apples&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">expect</span>(stock.<span class=\"hljs-property\">type</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&quot;apples&quot;</span>);\n  <span class=\"hljs-title function_\">expect</span>(stock.<span class=\"hljs-property\">count</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">13</span>);\n});\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;stocks are the same&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> refStock = stock; <span class=\"hljs-comment\">// same reference</span>\n\n  <span class=\"hljs-title function_\">expect</span>(stock).<span class=\"hljs-title function_\">toBe</span>(refStock);\n});\n</code></pre>\n</li>\n<li>\n<p><strong><code>toBeDefined</code></strong> / <strong><code>toBeUndefined</code></strong></p>\n<p>斷言值是否為 undefined。</p>\n</li>\n<li>\n<p><strong><code>toBeNull</code></strong>、<strong><code>toBeNaN</code></strong></p>\n<p>斷言值是否為 null / NaN。</p>\n</li>\n<li>\n<p><strong><code>toBeTruthy</code></strong> / <strong><code>toBeFalsy</code></strong></p>\n<p>斷言值的 boolean 檢查。</p>\n<blockquote>\n<p><strong>補充：</strong><code>null</code>、<code>undefined</code>、<code>NaN</code>、<code>0</code>、<code>-0</code>、<code>0n</code>、<code>&quot;&quot;</code> 和 <code>document.all</code> 皆為 falsy 的種類。</p>\n</blockquote>\n</li>\n<li>\n<p><strong><code>toMatch</code></strong></p>\n<p>斷言字符串的字串匹配和正則表達式檢查。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;top fruits&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-string\">&quot;top fruits include apple, orange and grape&quot;</span>).<span class=\"hljs-title function_\">toMatch</span>(<span class=\"hljs-regexp\">/apple/</span>);\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-string\">&quot;applefruits&quot;</span>).<span class=\"hljs-title function_\">toMatch</span>(<span class=\"hljs-string\">&quot;fruit&quot;</span>); <span class=\"hljs-comment\">// toMatch also accepts a string</span>\n});\n</code></pre>\n</li>\n<li>\n<p><strong><code>toBeGreaterThan</code></strong> / <strong><code>toBeGreaterThanOrEqual</code></strong> / <strong><code>toBeLessThan</code></strong> /<strong><code>toBeLessThanOrEqual</code></strong></p>\n<p>斷言值與接收值的大小比較。</p>\n</li>\n</ul>\n<h3>陣列</h3>\n<ul>\n<li>\n<p><strong><code>toContain</code></strong></p>\n<p>斷言值是否在陣列中。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;the fruit list contains orange&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">getAllFruits</span>()).<span class=\"hljs-title function_\">toContain</span>(<span class=\"hljs-string\">&quot;orange&quot;</span>);\n});\n</code></pre>\n</li>\n<li>\n<p><strong><code>toContainEqual</code></strong></p>\n<p>斷言物件是否在陣列中，物件結構和值必須完全相等(會遞迴比較)。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;apple available&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">getFruitStock</span>()).<span class=\"hljs-title function_\">toContainEqual</span>({ <span class=\"hljs-attr\">fruit</span>: <span class=\"hljs-string\">&quot;apple&quot;</span>, <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">5</span> });\n});\n</code></pre>\n</li>\n<li>\n<p><strong><code>toMatchObject</code></strong></p>\n<p>斷言物件是否有匹配的到另一個物件的部份屬性。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> johnInvoice = {\n  <span class=\"hljs-attr\">customer</span>: {\n    <span class=\"hljs-attr\">first_name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,\n    <span class=\"hljs-attr\">last_name</span>: <span class=\"hljs-string\">&quot;Doe&quot;</span>\n  },\n  <span class=\"hljs-attr\">items</span>: [\n    {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;apples&quot;</span>,\n      <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-number\">10</span>\n    },\n    {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;oranges&quot;</span>,\n      <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-number\">5</span>\n    }\n  ]\n};\n\n<span class=\"hljs-keyword\">const</span> johnDetails = {\n  <span class=\"hljs-attr\">customer</span>: {\n    <span class=\"hljs-attr\">first_name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,\n    <span class=\"hljs-attr\">last_name</span>: <span class=\"hljs-string\">&quot;Doe&quot;</span>\n  }\n};\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;invoice has john personal details&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">expect</span>(johnInvoice).<span class=\"hljs-title function_\">toMatchObject</span>(johnDetails);\n});\n</code></pre>\n<blockquote>\n<p><strong>補充：</strong></p>\n<p><code>toMatchObject</code> 也可以接收陣列，用來檢查兩個陣列中的元素數量是否相等。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;the number of elements must match exactly&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-comment\">// Assert that an array of object matches</span>\n  <span class=\"hljs-title function_\">expect</span>([{ <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&quot;bar&quot;</span> }, { <span class=\"hljs-attr\">baz</span>: <span class=\"hljs-number\">1</span> }]).<span class=\"hljs-title function_\">toMatchObject</span>([\n    { <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&quot;bar&quot;</span> },\n    { <span class=\"hljs-attr\">baz</span>: <span class=\"hljs-number\">1</span> }\n  ]);\n});\n</code></pre>\n</blockquote>\n</li>\n<li>\n<p><strong><code>toHaveLength</code></strong></p>\n<p>檢查字串、陣列的長度。</p>\n</li>\n</ul>\n<h3>物件</h3>\n<ul>\n<li>\n<p><strong><code>toEqual</code></strong></p>\n<p>檢查斷言物件的值與接收到的物件的值是否相同結構(會遞迴比較)。</p>\n<blockquote>\n<p>**補充：**如果物件結構裡面，欄位的值連出現 undefined 都要嚴格相等比較時，要選擇 <code>toStrictEqual</code>。</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// toEqual 與 toBe 比較</span>\n<span class=\"hljs-keyword\">const</span> stockBill = {\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;apples&quot;</span>,\n  <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">13</span>\n};\n\n<span class=\"hljs-keyword\">const</span> stockMary = {\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;apples&quot;</span>,\n  <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">13</span>\n};\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;stocks have the same properties&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">expect</span>(stockBill).<span class=\"hljs-title function_\">toEqual</span>(stockMary);\n});\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;stocks are not the same&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">expect</span>(stockBill).<span class=\"hljs-property\">not</span>.<span class=\"hljs-title function_\">toBe</span>(stockMary);\n});\n</code></pre>\n</li>\n<li>\n<p><strong><code>toStrictEqual</code></strong></p>\n<p>檢查斷言物件的值與接收到的物件的值是否相同結構和值(會遞迴比較)。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// toStrictEqual 與 toEqual 比較</span>\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;structurally the same, but semantically different&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">expect</span>({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> }).<span class=\"hljs-title function_\">toEqual</span>({ <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> });\n  <span class=\"hljs-title function_\">expect</span>({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> }).<span class=\"hljs-property\">not</span>.<span class=\"hljs-title function_\">toStrictEqual</span>({ <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> });\n});\n</code></pre>\n</li>\n<li>\n<p><strong><code>toHaveProperty</code></strong></p>\n<p>斷言物件是否有包含有特定的 key，第二個可選參數可傳入該 key 預期的值(會遞迴比較)。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> invoice = {\n  <span class=\"hljs-attr\">isActive</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-string\">&quot;P.O&quot;</span>: <span class=\"hljs-string\">&quot;12345&quot;</span>,\n  <span class=\"hljs-attr\">customer</span>: {\n    <span class=\"hljs-attr\">first_name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,\n    <span class=\"hljs-attr\">last_name</span>: <span class=\"hljs-string\">&quot;Doe&quot;</span>,\n    <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&quot;China&quot;</span>\n  },\n  <span class=\"hljs-attr\">total_amount</span>: <span class=\"hljs-number\">5000</span>,\n  <span class=\"hljs-attr\">items</span>: [\n    {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;apples&quot;</span>,\n      <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-number\">10</span>\n    },\n    {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;oranges&quot;</span>,\n      <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-number\">5</span>\n    }\n  ]\n};\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;John Doe Invoice&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-comment\">// 純檢查 key 值是否存在</span>\n  <span class=\"hljs-title function_\">expect</span>(invoice).<span class=\"hljs-title function_\">toHaveProperty</span>(<span class=\"hljs-string\">&quot;isActive&quot;</span>);\n  <span class=\"hljs-comment\">// 檢查 key 和 value</span>\n  <span class=\"hljs-title function_\">expect</span>(invoice).<span class=\"hljs-title function_\">toHaveProperty</span>(<span class=\"hljs-string\">&quot;total_amount&quot;</span>, <span class=\"hljs-number\">5000</span>);\n\n  <span class=\"hljs-comment\">// 使用 `.`，取得物件底下的 key 和該 value</span>\n  <span class=\"hljs-title function_\">expect</span>(invoice).<span class=\"hljs-title function_\">toHaveProperty</span>(<span class=\"hljs-string\">&quot;customer.first_name&quot;</span>);\n  <span class=\"hljs-title function_\">expect</span>(invoice).<span class=\"hljs-title function_\">toHaveProperty</span>(<span class=\"hljs-string\">&quot;customer.last_name&quot;</span>, <span class=\"hljs-string\">&quot;Doe&quot;</span>);\n  <span class=\"hljs-title function_\">expect</span>(invoice).<span class=\"hljs-property\">not</span>.<span class=\"hljs-title function_\">toHaveProperty</span>(<span class=\"hljs-string\">&quot;customer.location&quot;</span>, <span class=\"hljs-string\">&quot;India&quot;</span>);\n\n  <span class=\"hljs-comment\">// Array key 取法，可以用 array[index] 或 [keyPath]</span>\n  <span class=\"hljs-title function_\">expect</span>(invoice).<span class=\"hljs-title function_\">toHaveProperty</span>(<span class=\"hljs-string\">&quot;items[0].type&quot;</span>, <span class=\"hljs-string\">&quot;apples&quot;</span>);\n  <span class=\"hljs-title function_\">expect</span>(invoice).<span class=\"hljs-title function_\">toHaveProperty</span>(<span class=\"hljs-string\">&quot;items.0.type&quot;</span>, <span class=\"hljs-string\">&quot;apples&quot;</span>);\n\n  <span class=\"hljs-title function_\">expect</span>(invoice).<span class=\"hljs-title function_\">toHaveProperty</span>([<span class=\"hljs-string\">&quot;items&quot;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;type&quot;</span>], <span class=\"hljs-string\">&quot;apples&quot;</span>);\n  <span class=\"hljs-title function_\">expect</span>(invoice).<span class=\"hljs-title function_\">toHaveProperty</span>([<span class=\"hljs-string\">&quot;items&quot;</span>, <span class=\"hljs-string\">&quot;0&quot;</span>, <span class=\"hljs-string\">&quot;type&quot;</span>], <span class=\"hljs-string\">&quot;apples&quot;</span>); <span class=\"hljs-comment\">// string notation also works</span>\n});\n</code></pre>\n</li>\n</ul>\n<h3>函式</h3>\n<ul>\n<li>\n<p><strong><code>toHaveReturnedWith</code></strong></p>\n<p>斷言函式至少被呼叫一次，並且成功返回帶有特定參數的值，需要將一個 spy 函式傳遞給 expect。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a + b;\n}\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;add function&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;should return the correct sum&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// 創建一個間諜函數</span>\n    <span class=\"hljs-keyword\">const</span> spy = vi.<span class=\"hljs-title function_\">fn</span>(add);\n\n    <span class=\"hljs-title function_\">spy</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n\n    <span class=\"hljs-title function_\">expect</span>(spy).<span class=\"hljs-title function_\">toHaveReturnedWith</span>(<span class=\"hljs-number\">3</span>);\n  });\n});\n</code></pre>\n</li>\n<li>\n<p><strong><code>toHaveBeenCalled</code></strong></p>\n<p>斷言函式函式至少被呼叫一次，需要將一個 spy 函式傳遞給 expect。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> market = {\n  <span class=\"hljs-title function_\">buy</span>(<span class=\"hljs-params\">subject: <span class=\"hljs-built_in\">string</span>, amount: <span class=\"hljs-built_in\">number</span></span>) { ... },\n}\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;spy function&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> buySpy = vi.<span class=\"hljs-title function_\">spyOn</span>(market, <span class=\"hljs-string\">&#x27;buy&#x27;</span>)\n\n  <span class=\"hljs-title function_\">expect</span>(buySpy).<span class=\"hljs-property\">not</span>.<span class=\"hljs-title function_\">toHaveBeenCalled</span>()\n\n  market.<span class=\"hljs-title function_\">buy</span>(<span class=\"hljs-string\">&#x27;apples&#x27;</span>, <span class=\"hljs-number\">10</span>)\n\n  <span class=\"hljs-title function_\">expect</span>(buySpy).<span class=\"hljs-title function_\">toHaveBeenCalled</span>()\n})\n</code></pre>\n</li>\n</ul>\n<h3>Error</h3>\n<ul>\n<li>\n<p><strong><code>toThrowError</code></strong></p>\n<p>斷言函式在被調用時是否會拋出錯誤，別名可用 <code>toThrow</code>，expect 裡面<strong>必須包裝成一個函式</strong>。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getFruitStock</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">type</span>: <span class=\"hljs-built_in\">string</span></span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">type</span> === <span class=\"hljs-string\">&#x27;pineapples&#x27;</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Pineapples are not in stock&#x27;</span>)\n  }\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;throws on pineapples&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-comment\">//  error msg 必須包含 stock 字串</span>\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">getFruitStock</span>(<span class=\"hljs-string\">&#x27;pineapples&#x27;</span>)).<span class=\"hljs-title function_\">toThrowError</span>(<span class=\"hljs-regexp\">/stock/</span>)\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">getFruitStock</span>(<span class=\"hljs-string\">&#x27;pineapples&#x27;</span>)).<span class=\"hljs-title function_\">toThrowError</span>(<span class=\"hljs-string\">&#x27;stock&#x27;</span>)\n\n   <span class=\"hljs-comment\">//  利用正則表達式檢查 error msg 是否完全相等</span>\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">getFruitStock</span>(<span class=\"hljs-string\">&#x27;pineapples&#x27;</span>)).<span class=\"hljs-title function_\">toThrowError</span>(\n    <span class=\"hljs-regexp\">/^Pineapples are not in stock$/</span>\n  )\n\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">getFruitStock</span>(<span class=\"hljs-string\">&#x27;pineapples&#x27;</span>)).<span class=\"hljs-title function_\">toThrowError</span>(\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Pineapples are not in stock&#x27;</span>),\n  )\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">getFruitStock</span>(<span class=\"hljs-string\">&#x27;pineapples&#x27;</span>)).<span class=\"hljs-title function_\">toThrowError</span>(expect.<span class=\"hljs-title function_\">objectContaining</span>({\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Pineapples are not in stock&#x27;</span>,\n  }))\n})\n</code></pre>\n<p>如果是非同步函式，需要搭配 <code>rejects</code>：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getAsyncFruitStock</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;empty&quot;</span>));\n}\n\n<span class=\"hljs-comment\">// 非同步因為是回傳 promise，所以需要 async / await</span>\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;throws on pineapples&quot;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">getAsyncFruitStock</span>()).<span class=\"hljs-property\">rejects</span>.<span class=\"hljs-title function_\">toThrowError</span>(<span class=\"hljs-string\">&quot;empty&quot;</span>);\n});\n</code></pre>\n</li>\n</ul>\n<h2 id=\"生命週期\" title=\"生命週期\"><a href=\"#生命週期\">生命週期</a></h2>\n<p>下面這些 API 可以掛鉤到測試的生命週期，<strong>避免重複的前置準備和後續清理</strong>。</p>\n<p>執行範圍會根據撰寫所在的範疇(context)，如果是在 top-level 使用，則適用於整個文件；如果在 describe 區塊內使用，則適用於區塊內測試。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-title function_\">beforeAll</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-comment\">// 在所有測試前建立一次性的測試環境</span>\n  db = <span class=\"hljs-title function_\">initializeDatabase</span>();\n});\n\n<span class=\"hljs-title function_\">afterAll</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-comment\">// 在所有測試後清理測試環境</span>\n  db.<span class=\"hljs-title function_\">close</span>();\n});\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;Database tests&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// 在每個測試前重置數據庫</span>\n    db.<span class=\"hljs-title function_\">reset</span>();\n  });\n\n  <span class=\"hljs-title function_\">afterEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// 在每個測試後清理數據庫</span>\n    db.<span class=\"hljs-title function_\">cleanup</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;should insert a record&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    db.<span class=\"hljs-title function_\">insert</span>({ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Test&quot;</span> });\n    <span class=\"hljs-title function_\">expect</span>(db.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toEqual</span>({ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Test&quot;</span> });\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;should delete a record&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    db.<span class=\"hljs-title function_\">insert</span>({ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Test&quot;</span> });\n    db.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">expect</span>(db.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toBeNull</span>();\n  });\n});\n</code></pre>\n<h3><strong>beforeEach</strong></h3>\n<p>在當前範疇(context)的每個測試執行前呼叫。<code>beforeEach</code> 還接受一個 optional 的清理函式（相當於 <code>afterEach</code>）。</p>\n<p>適用情境：</p>\n<p>在每個測試執行前需要進行一些重複的設置工作，例如：初始化數據庫連接、設置測試數據、重置變數等。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-comment\">// 每個測試前都會執行</span>\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">prepareSomething</span>();\n\n  <span class=\"hljs-comment\">// 每個測試後都會執行</span>\n  <span class=\"hljs-comment\">// clean up function</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">async</span> () =&gt; {\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">resetSomething</span>();\n  };\n});\n</code></pre>\n<h3><strong>afterEach</strong></h3>\n<p>在當前範疇(context)的每個測試執行後呼叫。</p>\n<p>適用情境：</p>\n<p>在每個測試執行後需要進行一些清理工作，例如：清理數據庫、重置全局狀態、釋放資源等。</p>\n<h3><strong>beforeAll</strong></h3>\n<p>在當前範疇(context)的全部測試執行前呼叫。<code>beforeAll</code> 也還接受一個 optional 的清理函式（相當於 <code>afterAll</code>）。</p>\n<p>適用情境：</p>\n<p>在所有測試執行前需要進行一次性的設置工作，例如：建立一次性的測試環境、載入配置文件、初始化外部服務等。</p>\n<h3><strong>afterAll</strong></h3>\n<p>在當前範疇(context)的全部測試執行後呼叫。</p>\n<p>適用情境：</p>\n<p>在所有測試執行後需要進行一次性的清理工作，例如：釋放全局資源、關閉伺服器、清理測試環境等。</p>\n<h2 id=\"<strong>參考資料</strong>\" title=\"<strong>參考資料</strong>\"><a href=\"#<strong>參考資料</strong>\"><strong>參考資料</strong></a></h2>\n<ul>\n<li><a  href=\"https://vitest.dev/api/\" target=\"_blank\" rel=\"noreferrer noopener\">Vitest API</a></li>\n<li><a  href=\"https://www.youtube.com/watch?v=FDEf3iWEgFI\" target=\"_blank\" rel=\"noreferrer noopener\">Fast Unit Testing With Vitest</a></li>\n</ul>\n","toc":{"title":"Vitest - 語法與常用 Matchers","subtitles":["基本語法","斷言語法和常見 Matchers","生命週期","參考資料"]},"wordCount":2104}