{"info":{"title":"[Note] BLoC Pattern","fileName":"block-pattern","description":"Flutter 用於處理 State Management 的設計模式之一，將業務邏輯與 View 邏輯拆開，更易於開發與維護。","createdAt":"2023-04-14T00:00:00.000Z","updatedAt":"2023-04-14T00:00:00.000Z","tags":["Flutter","Bloc Pattern","Bloc","Stream"]},"content":"<h6>tags: <code>Flutter</code>、<code>Bloc Pattern</code>、<code>Bloc</code>、<code>Stream</code></h6>\n<h1 id=\"[Note] BLoC Pattern\" title=\"[Note] BLoC Pattern\">[Note] BLoC Pattern</h1>\n<h2 id=\"前言\" title=\"前言\"><a href=\"#前言\">前言</a></h2>\n<p>BLoC（Business Logic Component）Pattern 是一種用於 Flutter 開發的設計模式，它將應用程序分成三個主要部分：界面、資料層和業務邏輯，並利用 Streams 管理資料流，以實現組件之間的解耦和資料共享。</p>\n<p>用原生 widgets 就可以實作，也有基於 BLoC Pattern 而開發的套件 - <a  href=\"https://pub.dev/packages/flutter_bloc\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>flutter_bloc</strong></a>，將方法封裝更容易維護和開發。</p>\n<p>首先要先了解 Stream 概念，因為 BLoC Pattern 核心是 Streams。</p>\n<h2 id=\"Stream\" title=\"Stream\"><a href=\"#Stream\">Stream</a></h2>\n<p>Flutter 用來管理非同步的處理事件序列的概念，可想像 Stream 是一條河流或是通道，<code>Sender</code> 經由 Stream 傳遞任何東西給 <code>Receiver</code>，<code>Receiver</code> 不會知道 <code>Sender</code> 送的東西什麼時候會到和送什麼東西，只有能被動等東西到達。</p>\n<ul>\n<li><strong><code>Shipped Data</code></strong>：可以是任何形式 data/event</li>\n<li><strong><code>Sender</code></strong>：傳送資料(傳遞的源頭)</li>\n<li><strong><code>Receiver</code></strong>：接收資料(傳遞的終點)，無法預期何時接收到資料</li>\n<li><strong>非同步行為</strong>，因為傳遞會需要消耗時間</li>\n<li>有順序性，<strong>先進先出</strong></li>\n</ul>\n<p><img src=\"https://i.imgur.com/fSoh33V.png\" alt=\"\" /></p>\n<p>用 Stream 專有名詞表示：</p>\n<ul>\n<li>這條河流 ➡️ <strong><code>StreamController</code></strong></li>\n<li><code>Sender</code> ➡️ <strong><code>Sink</code></strong>\n<ul>\n<li><code>StreamController</code> 的入口</li>\n<li>使用 <code>add</code> 方法，將要傳送東西傳送出去</li>\n</ul>\n</li>\n<li><code>Receiver</code> ➡️ <strong><code>Stream</code></strong>，\n<ul>\n<li><code>StreamController</code> 的出口</li>\n<li>使用 <code>listen</code> 方法，監聽是否接收到東西</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/pOoN5Q8.png\" alt=\"\" /></p>\n<h2 id=\"BLoC Pattern 優點\" title=\"BLoC Pattern 優點\"><a href=\"#BLoC Pattern 優點\">BLoC Pattern 優點</a></h2>\n<ol>\n<li><strong>解耦</strong>：界面、業務邏輯和資料層分開，使它們可以獨立開發、測試和維護</li>\n<li><strong>可測試性</strong>：業務邏輯分離到單獨的組件中，可以方便地進行 Unit Test</li>\n<li><strong>code 共用性</strong>：將業務邏輯分離到單獨的組件中，可以在多個 View 中重用</li>\n<li><strong>易維護</strong>：有良好的結構和清晰的職責分工，易於維護和擴展功能</li>\n</ol>\n<h2 id=\"BLoC pattern 實作\" title=\"BLoC pattern 實作\"><a href=\"#BLoC pattern 實作\">BLoC pattern 實作</a></h2>\n<blockquote>\n<p>範例原始碼：<a  href=\"https://github.com/JennieSH/flutter-appworks/tree/feature/bloc-pattern\" target=\"_blank\" rel=\"noreferrer noopener\">Repo 網址</a></p>\n</blockquote>\n<h3>目標</h3>\n<p><img src=\"https://i.imgur.com/KxNUqct.png\" alt=\"\" /></p>\n<ul>\n<li>實作簡單的 Counter</li>\n<li>支援 <code>加一</code>、<code>減一</code>、<code>Reset</code>，這三個功能</li>\n<li>由兩個 <code>StreamController</code> 組成 (<code>State StreamController</code> &amp; <code>Event StreamController</code>)。</li>\n</ul>\n<p>首先專注做 <code>State StreamController</code> 和<code>加一</code> 功能。</p>\n<p><img src=\"https://i.imgur.com/6fWkPYS.png\" alt=\"\" /></p>\n<p><img src=\"https://i.imgur.com/XUCjA0Y.png\" alt=\"\" /></p>\n<h3>Step1. 新增 Bloc 檔案，建立 State StreamController</h3>\n<ul>\n<li>定義 <code>StreamController</code>，因為預期 in/out 皆為數字， Type 為 <code>int</code></li>\n<li><code>_XXXStreamController.sink</code> 可取得 Input proterty</li>\n<li><code>_XXXStreamController.stream</code> 可取得 Output proterty</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// counter_bloc.dart</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CounterBloc</span> </span>{\n  <span class=\"hljs-comment\">// pipe</span>\n  <span class=\"hljs-keyword\">final</span> _stateStreamController = StreamController&lt;<span class=\"hljs-built_in\">int</span>&gt;();\n\n  <span class=\"hljs-comment\">// input</span>\n  StreamSink&lt;<span class=\"hljs-built_in\">int</span>&gt; <span class=\"hljs-keyword\">get</span> counterSink =&gt; _stateStreamController.sink;\n  <span class=\"hljs-comment\">// output</span>\n  Stream&lt;<span class=\"hljs-built_in\">int</span>&gt; <span class=\"hljs-keyword\">get</span> counterStream =&gt; _stateStreamController.stream;\n}\n</code></pre>\n<h3>Step2. 按鈕點擊時，利用 <code>counterSink</code> 的 <code>add</code> 方法，傳遞 <code>_counter</code> 值</h3>\n<pre class=\"hljs\"><code>counterBloc.counterSink.add(_counter);\n</code></pre>\n<blockquote>\n<p>此時點擊 “+”，數字不會增加，即使 onPressed 會觸發 _counter++，讓 <code>_counter</code> 值增加，但因為沒有使用如 <code>setState</code> 等方法，去強迫 rebuild wiget，所以 Text 的內容永遠都會初次 mounted 的值，即為 0。</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// main.dart</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Counter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{ ... }\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_CounterState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State</span>&lt;<span class=\"hljs-title\">Counter</span>&gt; </span>{\n  <span class=\"hljs-built_in\">int</span> _counter = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-comment\">// 1. 宣告 counterBloc</span>\n  <span class=\"hljs-keyword\">final</span> counterBloc = CounterBloc();\n\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> Scaffold(\n      ...,\n      body: Center(\n        child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [\n          Text(<span class=\"hljs-string\">&#x27;<span class=\"hljs-subst\">$_counter</span>&#x27;</span>),\n          <span class=\"hljs-keyword\">const</span> SizedBox(\n            height: <span class=\"hljs-number\">16</span>,\n          ),\n          IconButton(\n            onPressed: () {\n              _counter++;\n              <span class=\"hljs-comment\">// 2. add state</span>\n              counterBloc.counterSink.add(_counter);\n            },\n            icon: <span class=\"hljs-keyword\">const</span> Icon(Icons.add_circle),\n            iconSize: <span class=\"hljs-number\">36</span>,\n          )\n        ]),\n      ),\n    );\n  }\n}\n</code></pre>\n<h3>Step3. 使用 <code>StreamBuilder</code>，監聽 <code>_counter</code> 值</h3>\n<p><code>StreamBuilder</code> 中的參數:</p>\n<ul>\n<li><code>stream</code>：傳入(欲 listen) target stream，只要監聽的資料改變，會 rebuild widget</li>\n<li><code>builder</code>：回傳 widget</li>\n</ul>\n<blockquote>\n<p>當在點擊 “+” 按鈕時，顯示的數字已經會如預期往上加了</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// main.dart</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Counter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{ ... }\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_CounterState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State</span>&lt;<span class=\"hljs-title\">Counter</span>&gt; </span>{\n  <span class=\"hljs-built_in\">int</span> _counter = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">final</span> counterBloc = CounterBloc();\n\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> Scaffold(\n      ...,\n      body: Center(\n        child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [\n          <span class=\"hljs-comment\">// 1. wrap with StreamBuilder</span>\n          StreamBuilder(\n            <span class=\"hljs-comment\">// 2. use builder and return widget</span>\n            stream:\n                counterBloc.counterStream,\n            builder: (context, snapshot) =&gt; Text(\n              <span class=\"hljs-string\">&#x27;<span class=\"hljs-subst\">$_counter</span>&#x27;</span>,\n              style: <span class=\"hljs-keyword\">const</span> TextStyle(fontSize: <span class=\"hljs-number\">48</span>, fontWeight: FontWeight.bold),\n            ),\n          ),\n          <span class=\"hljs-keyword\">const</span> SizedBox(\n            height: <span class=\"hljs-number\">16</span>,\n          ),\n          IconButton(\n            onPressed: () {\n              _counter++;\n              counterBloc.counterSink.add(_counter);\n            },\n            icon: <span class=\"hljs-keyword\">const</span> Icon(Icons.add_circle),\n            iconSize: <span class=\"hljs-number\">36</span>,\n          )\n        ]),\n      ),\n    );\n  }\n}\n</code></pre>\n<br/>\n<br/>\n<p>接下來是建立 <code>Event StreamController</code>，並實作 <code>減一</code>、<code>Reset</code> 倆功能。</p>\n<p>大致流程如下：</p>\n<ol>\n<li>點擊 Button 會傳送 <strong><code>CounterAction</code></strong> <em>(@ widget)</em></li>\n<li><strong><code>eventStream</code></strong> 監聽 <strong><code>CounterAction</code></strong> <em>(@ CounterBloc)</em></li>\n<li><strong><code>counterSink</code></strong> 傳遞 <strong><code>counter</code></strong> 值 <em>(@ CounterBloc)</em></li>\n<li>widget 使用 <strong><code>snapshot.data</code></strong>，取得 <strong><code>counter</code></strong> 值 <em>(@ widget)</em></li>\n</ol>\n<p>在<code>Event StreamController</code> stream 接收到的資料會直接由 <code>State StreamController</code> sink 傳入，這段是在 <code>CounterBloc</code> 內實作，外面使用的 widget 都不需要知道實作細節。</p>\n<p><img src=\"https://i.imgur.com/6DuL2fC.png\" alt=\"\" /></p>\n<p><img src=\"https://i.imgur.com/KxNUqct.png\" alt=\"\" /></p>\n<h3>Step4. <code>CounterBloc</code> 內建立 Event StreamController</h3>\n<ul>\n<li>新增 action 的 enum\n<blockquote>\n<p>action 和 event 這邊概念是共通的，也可取名叫 CounterAction</p>\n</blockquote>\n</li>\n<li>宣告 counter 變數</li>\n<li><strong><code>eventStream</code></strong> 使用 listen 方法，監聽 <strong><code>CounterAction</code></strong></li>\n<li><strong><code>counterSink</code></strong> 使用 add 方法，傳遞運算過後 <strong><code>counter</code></strong> 值</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// counter_bloc.dart</span>\n\n<span class=\"hljs-comment\">// 定義出 counter actions</span>\n<span class=\"hljs-keyword\">enum</span> CounterAction { INCREMENT, DECREMENT, RESET }\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CounterBloc</span> </span>{\n  <span class=\"hljs-keyword\">late</span> <span class=\"hljs-built_in\">int</span> counter;\n\n  <span class=\"hljs-keyword\">final</span> _stateStreamController = StreamController&lt;<span class=\"hljs-built_in\">int</span>&gt;();\n  StreamSink&lt;<span class=\"hljs-built_in\">int</span>&gt; <span class=\"hljs-keyword\">get</span> counterSink =&gt; _stateStreamController.sink;\n  Stream&lt;<span class=\"hljs-built_in\">int</span>&gt; <span class=\"hljs-keyword\">get</span> counterStream =&gt; _stateStreamController.stream;\n\n  <span class=\"hljs-keyword\">final</span> _eventStreamController = StreamController&lt;CounterAction&gt;();\n  StreamSink&lt;CounterAction&gt; <span class=\"hljs-keyword\">get</span> eventSink =&gt; _eventStreamController.sink;\n  Stream&lt;CounterAction&gt; <span class=\"hljs-keyword\">get</span> eventStream =&gt; _eventStreamController.stream;\n\n  CounterBloc() {\n    counter = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// listen change in the stream (CounterAction)</span>\n    eventStream.listen((event) {\n      <span class=\"hljs-keyword\">if</span> (event == CounterAction.INCREMENT) {\n        counter++;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (event == CounterAction.DECREMENT) {\n        counter--;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (event == CounterAction.RESET) {\n        counter = <span class=\"hljs-number\">0</span>;\n      }\n\n      <span class=\"hljs-comment\">// 傳遞運算過後的 counter 值</span>\n      counterSink.add(counter);\n    });\n  }\n}\n\n</code></pre>\n<h3>Step5. 按鈕點擊時，利用 <code>eventSink</code> 的 <code>add</code> 方法，傳遞 <code>CounterAction</code></h3>\n<ul>\n<li>移除 widget 內的 <code>_counter</code>，新增 <strong><code>initialData</code></strong>\n<blockquote>\n<p><code>initialData</code>：初始值，不設定的話，一開始會為 null</p>\n</blockquote>\n</li>\n<li>從 <strong><code>StreamBuilder</code></strong> 的 <strong><code>snapshot.data</code></strong> 取得 <strong><code>counter</code></strong> 值</li>\n<li>onPress 觸發的函式，改成由 <strong><code>eventSink</code></strong> 傳遞 <strong><code>CounterAction</code></strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// main.dart</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Counter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{...}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_CounterState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State</span>&lt;<span class=\"hljs-title\">Counter</span>&gt; </span>{\n  <span class=\"hljs-keyword\">final</span> counterBloc = CounterBloc();\n\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> Scaffold(\n      ...,\n      body: Center(\n        child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [\n          StreamBuilder(\n            stream: counterBloc.counterStream,\n            <span class=\"hljs-comment\">// 不給 init data，一開始會拿到 null</span>\n            initialData: <span class=\"hljs-number\">0</span>,\n            <span class=\"hljs-comment\">// get value via snapshot.data</span>\n            builder: (context, snapshot) =&gt; Text(\n              <span class=\"hljs-string\">&#x27;<span class=\"hljs-subst\">${snapshot.data}</span>&#x27;</span>,\n              style: <span class=\"hljs-keyword\">const</span> TextStyle(fontSize: <span class=\"hljs-number\">48</span>, fontWeight: FontWeight.bold),\n            ),\n          ),\n          <span class=\"hljs-keyword\">const</span> SizedBox(\n            height: <span class=\"hljs-number\">16</span>,\n          ),\n          Row(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              IconButton(\n                onPressed: () {\n                  <span class=\"hljs-comment\">// INCREMENT 事件</span>\n                  counterBloc.eventSink.add(CounterAction.INCREMENT);\n                },\n                icon: <span class=\"hljs-keyword\">const</span> Icon(Icons.add_circle),\n                iconSize: <span class=\"hljs-number\">36</span>,\n              ),\n              IconButton(\n                onPressed: () {\n                  <span class=\"hljs-comment\">// DECREMENT 事件</span>\n                  counterBloc.eventSink.add(CounterAction.DECREMENT);\n                },\n                icon: <span class=\"hljs-keyword\">const</span> Icon(Icons.remove_circle),\n                iconSize: <span class=\"hljs-number\">36</span>,\n              ),\n              IconButton(\n                onPressed: () {\n                 <span class=\"hljs-comment\">// RESET 事件</span>\n                  counterBloc.eventSink.add(CounterAction.RESET);\n                },\n                icon: <span class=\"hljs-keyword\">const</span> Icon(Icons.loop_outlined),\n                iconSize: <span class=\"hljs-number\">36</span>,\n              ),\n            ],\n          )\n         ]\n        ),\n      ),\n    );\n  }\n}\n\n</code></pre>\n<h2 id=\"參考資料\" title=\"參考資料\"><a href=\"#參考資料\">參考資料</a></h2>\n<ul>\n<li><a  href=\"https://www.youtube.com/watch?v=K6ETAfGZl4k\" target=\"_blank\" rel=\"noreferrer noopener\">BLoC Pattern with Flutter</a></li>\n<li><a  href=\"https://www.youtube.com/watch?v=w6XWjpBK4W8&amp;list=PLptHs0ZDJKt_T-oNj_6Q98v-tBnVf-S_o&amp;index=1\" target=\"_blank\" rel=\"noreferrer noopener\">Introduction to “BLoC - from Zero To HERO” Series</a></li>\n<li><a  href=\"https://juejin.cn/post/6844903689082109960\" target=\"_blank\" rel=\"noreferrer noopener\">Flutter | 状态管理探索篇——BLoC(三)</a></li>\n</ul>\n","toc":{"title":"[Note] BLoC Pattern","subtitles":["前言","Stream","BLoC Pattern 優點","BLoC pattern 實作","參考資料"]},"wordCount":1529}