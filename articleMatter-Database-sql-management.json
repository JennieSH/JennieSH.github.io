{"info":{"title":"資料表 (Tables) 管理 feat. PostgreSQL","fileName":"sql-management","description":"主鍵和外來鍵介紹","createdAt":"2024-12-15T00:00:00.000Z","updatedAt":"2024-12-15T00:00:00.000Z","tags":["database","postgresql"]},"content":"<h1 id=\"資料表 (Tables) 管理 feat. PostgreSQL\" title=\"資料表 (Tables) 管理 feat. PostgreSQL\">資料表 (Tables) 管理 feat. PostgreSQL</h1>\n<h2 id=\"主鍵 ( Primary Key, PK)\" title=\"主鍵 ( Primary Key, PK)\"><a href=\"#主鍵 ( Primary Key, PK)\">主鍵 ( Primary Key, PK)</a></h2>\n<ul>\n<li>每個資料表都要有一個主</li>\n<li>主鍵值必須是唯一值，不能重複，設定後不應該再更動</li>\n<li>主鍵不能為 Null</li>\n<li>命名通常使用 <code>id</code>、<code>資料表_id</code> 命名，值為整數或 uuid</li>\n</ul>\n<h2 id=\"外來鍵 (Foreign Key, FK)\" title=\"外來鍵 (Foreign Key, FK)\"><a href=\"#外來鍵 (Foreign Key, FK)\">外來鍵 (Foreign Key, FK)</a></h2>\n<ul>\n<li>值來自於外部的資料，當該資料表需要關聯到其他資料表時使用</li>\n<li>一張資料表可以擁有多個外來鍵</li>\n<li>外來鍵必須對應到被參考資料表的主鍵</li>\n<li>外來鍵可以為 Null</li>\n<li>命名通常使用 <code>參考資料表_id</code></li>\n</ul>\n<img alt=\"what is a foreign key visual explanation\" loading=\"lazy\"  decoding=\"async\" style=\"color:transparent\" src=\"https://images.ctfassets.net/00voh0j35590/2K1mVD8aEwDgRcE0eEuCR8/279085dae1b34b30e32d43c9641b7df3/what_is_a_foreign_key_visual_explanation.jpg\">\n<blockquote>\n<p>圖片來源 <a  href=\"https://www.cockroachlabs.com/blog/what-is-a-foreign-key/\" target=\"_blank\" rel=\"noreferrer noopener\">What is a foreign key?</a></p>\n</blockquote>\n<p>例如：表中的 <code>user_id</code> 為 users 資料表的主鍵，為 orders 資料表的外來鍵。</p>\n<h2 id=\"建立主鍵\" title=\"建立主鍵\"><a href=\"#建立主鍵\">建立主鍵</a></h2>\n<ul>\n<li><code>PRIMARY KEY</code>：設定為主鍵，在新增 Table 時，加在欄位型態後面</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">-- 格式</span>\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> 資料表名稱 (\n  欄位名 欄位資料型態 <span class=\"hljs-keyword\">PRIMARY</span> KEY,\n);\n\n<span class=\"hljs-comment\">-- 範例：將 id 設為 Table users 的主鍵</span>\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> users(id <span class=\"hljs-type\">INTEGER</span> <span class=\"hljs-keyword\">PRIMARY</span> KEY, name <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">50</span>));\n\n<span class=\"hljs-comment\">-- 第一次新增執行會成功</span>\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span>\n  users(id, name)\n<span class=\"hljs-keyword\">VALUES</span>\n  (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;Jennie&#x27;</span>);\n\n<span class=\"hljs-comment\">-- 使用相同的 id 再新增一次，執行會失敗，因為主鍵的值不能重複</span>\n<span class=\"hljs-comment\">-- error message 為 duplicate key value violates unique constraint &quot;users_pkey&quot;</span>\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span>\n  users(id, name)\n<span class=\"hljs-keyword\">VALUES</span>\n  (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;Jennie2&#x27;</span>);\n</code></pre>\n<ul>\n<li><code>SERIAL</code>：設定自動產生 ID</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">-- 格式</span>\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> 資料表名稱 (\n  欄位名 欄位資料型態 SERIAL <span class=\"hljs-keyword\">PRIMARY</span> KEY,\n);\n\n<span class=\"hljs-comment\">-- 範例：將 id 設為 Table users 的主鍵，並透過 SERIAL 設定，讓 id 自動產生</span>\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> users(id SERIAL <span class=\"hljs-keyword\">PRIMARY</span> KEY, name <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">50</span>));\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span>\n  users(name) <span class=\"hljs-comment\">-- 不需要再傳入 id 欄位值了</span>\n<span class=\"hljs-keyword\">VALUES</span>\n  (<span class=\"hljs-string\">&#x27;Jennie&#x27;</span>);\n</code></pre>\n<h2 id=\"關聯外來鍵\" title=\"關聯外來鍵\"><a href=\"#關聯外來鍵\">關聯外來鍵</a></h2>\n<ul>\n<li>先設定外來鍵的欄位</li>\n<li><code>FOREIGN KEY</code>：設定關聯外來鍵，後面用小括號綁定剛新增外來鍵欄位名</li>\n<li><code>REFERENCES</code>：設定欲關聯的資料表(Table)和其底下的主鍵(PK)</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">-- 格式</span>\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> 資料表名稱 (\n  欄位名 欄位資料型態 <span class=\"hljs-keyword\">PRIMARY</span> KEY,\n  外來鍵欄位名 欄位資料型態\n  <span class=\"hljs-keyword\">FOREIGN</span> KEY (外來鍵欄位名) <span class=\"hljs-keyword\">REFERENCES</span> 資料表名稱 A(A 的主鍵)\n);\n\n<span class=\"hljs-comment\">-- 範例：將 order_id 設定為 Table users 的外來鍵</span>\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> users (\n    id SERIAL <span class=\"hljs-keyword\">PRIMARY</span> KEY,                      <span class=\"hljs-comment\">-- users 的主鍵</span>\n    name <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">50</span>),\n    order_id <span class=\"hljs-type\">INTEGER</span>,                           <span class=\"hljs-comment\">-- 設定 users 的外來鍵</span>\n    <span class=\"hljs-keyword\">FOREIGN</span> KEY (order_id) <span class=\"hljs-keyword\">REFERENCES</span> orders(id) <span class=\"hljs-comment\">-- 關聯外來鍵</span>\n);\n</code></pre>\n<h2 id=\"排序資料 (Order By)\" title=\"排序資料 (Order By)\"><a href=\"#排序資料 (Order By)\">排序資料 (Order By)</a></h2>\n<ul>\n<li><code>ORDER BY</code>：選取排序規則</li>\n<li><code>ASC</code>：由小到大</li>\n<li><code>DESC</code>：由大到小</li>\n<li><code>LIMIT</code>：optional，顯示的筆數</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">-- 格式</span>\n<span class=\"hljs-keyword\">SELECT</span> 欄位名\n<span class=\"hljs-keyword\">FROM</span> 資料表名稱\n<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> 欄位名 排序條件\nLIMIT 數量;\n\n<span class=\"hljs-comment\">-- 範例：價格由低到高排序</span>\n<span class=\"hljs-keyword\">SELECT</span> displayName , price\n<span class=\"hljs-keyword\">FROM</span> products\n<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> price <span class=\"hljs-keyword\">ASC</span>;\n</code></pre>\n<h2 id=\"PostgreSQL 函數\" title=\"PostgreSQL 函數\"><a href=\"#PostgreSQL 函數\">PostgreSQL 函數</a></h2>\n<h3>Null</h3>\n<ul>\n<li><code>NOT NULL</code>：欄位值為 required</li>\n<li><code>NULL</code>：欄位為 optional，未提供值時，其值會設為 <code>NULL</code></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">-- 格式</span>\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> 資料表名稱 (\n  欄位名 欄位資料型態 <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,\n  欄位名 欄位資料型態 <span class=\"hljs-keyword\">NULL</span>,\n);\n\n<span class=\"hljs-comment\">-- 範例：</span>\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> users (\n    id SERIAL <span class=\"hljs-keyword\">PRIMARY</span> KEY,\n    name <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">50</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>, <span class=\"hljs-comment\">-- 不可為空值</span>\n    email <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">100</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span>   <span class=\"hljs-comment\">-- 預設值為空值</span>\n);\n\n<span class=\"hljs-comment\">-- 只新增 name 時會成功，email 欄位會自動設為 null：</span>\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> users(name)\n<span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;Jennie&#x27;</span>);\n\n<span class=\"hljs-comment\">-- 只新增 email 時會直接顯示錯誤：</span>\n<span class=\"hljs-comment\">-- null value in column &quot;name&quot; of relation &quot;users&quot; violates not-null constraint</span>\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> users(email)\n<span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;hello@com&#x27;</span>);\n</code></pre>\n<blockquote>\n<p><strong>[補充]：</strong></p>\n<p>在 SQL 中，並沒有像某些編程語言（如 JavaScript）那樣的 <code>undefined</code>。</p>\n<ul>\n<li>\n<p>沒有提供值且欄位允許 <code>NULL</code>，SQL 會將其值設定為 <code>NULL</code>。</p>\n</li>\n<li>\n<p>但這並不等同於 <code>undefined</code>，因為 <code>NULL</code> 是一種特定的 SQL 狀態，表示「無值」或「未知值」。</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>[補充]：</strong> <code>email VARCHAR(100) NULL</code> v.s <code>email VARCHAR(100) DEFAULT NULL</code> 寫法區別</p>\n<table>\n<thead>\n<tr>\n<th>實例</th>\n<th><code>email VARCHAR(100) NULL</code></th>\n<th><code>email VARCHAR(100) DEFAULT NULL</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>允許空值</strong></td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td><strong>預設值</strong></td>\n<td>隱式為 <code>NULL</code></td>\n<td>顯式為 <code>NULL</code></td>\n</tr>\n<tr>\n<td><strong>表結構可讀性</strong></td>\n<td>稍微模糊，需依默認行為解釋</td>\n<td>明確表明欄位預設值為 <code>NULL</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>差異重點</strong>：</p>\n<ul>\n<li>\n<p><strong>技術上</strong>：兩者的<strong>行為和結果完全相同</strong>，因為未指定 <code>DEFAULT</code> 時，資料庫會將允許 <code>NULL</code> 的欄位的預設值設為 <code>NULL</code>。</p>\n</li>\n<li>\n<p><strong>語意上</strong>：<code>DEFAULT NULL</code> 更加明確，有助於避免未來誤解或潛在問題。</p>\n</li>\n</ul>\n</blockquote>\n<h3>count</h3>\n<ul>\n<li><code>COUNT()</code>：計算資料列的數量，括號內可傳入欄位名或表達式\n<ul>\n<li><code>(*)</code>：計算所有資料列數量，忽略 <code>NULL</code> 或非 <code>NULL</code></li>\n<li><code>(欄位名)</code>：計算某欄位中非 <code>NULL</code> 的資料列數量</li>\n<li><code>(DISTINCT 欄位名)</code>：計算某欄位中不同且非 <code>NULL</code> 的值的數量</li>\n</ul>\n</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">-- 格式</span>\n<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">COUNT</span>(欄位名或表達式) <span class=\"hljs-keyword\">FROM</span> 資料表名稱;\n\n<span class=\"hljs-comment\">-- 計算總共有幾個員工</span>\n<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">FROM</span> employees;\n\n<span class=\"hljs-comment\">-- 計算開發部有幾個員工</span>\n<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">as</span> &quot;RD department&quot;\n<span class=\"hljs-keyword\">FROM</span> users\n<span class=\"hljs-keyword\">WHERE</span> department_name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;RD&#x27;</span>;\n</code></pre>\n<h3>AVG、SUM、MAX、MIN 函數</h3>\n<ul>\n<li><code>AVG</code>：平均</li>\n<li><code>SUM</code>：總和</li>\n<li><code>MAX</code>：最高 / 最大</li>\n<li><code>MIN</code>：最低 / 最小</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">-- 範例</span>\n<span class=\"hljs-keyword\">SELECT</span>\n  <span class=\"hljs-built_in\">MAX</span>(score) <span class=\"hljs-keyword\">AS</span> &quot;最高分數&quot;,\n  <span class=\"hljs-built_in\">MIN</span>(score) <span class=\"hljs-keyword\">AS</span> &quot;最低分數&quot;,\n  <span class=\"hljs-built_in\">AVG</span>(score) <span class=\"hljs-keyword\">AS</span> &quot;平均分數&quot;,\n  <span class=\"hljs-built_in\">SUM</span>(score) <span class=\"hljs-keyword\">AS</span> &quot;總分數&quot;\n<span class=\"hljs-keyword\">FROM</span>\n  students\n</code></pre>\n<h2 id=\"參考\" title=\"參考\"><a href=\"#參考\">參考</a></h2>\n<ul>\n<li><a  href=\"https://docs.postgresql.tw/\" target=\"_blank\" rel=\"noreferrer noopener\">PostgreSQL 正體中文使用手冊</a></li>\n</ul>\n","toc":{"title":"資料表 (Tables) 管理 feat. PostgreSQL","subtitles":["主鍵 ( Primary Key, PK)","外來鍵 (Foreign Key, FK)","建立主鍵","關聯外來鍵","排序資料 (Order By)","PostgreSQL 函數","參考"]},"wordCount":1040}