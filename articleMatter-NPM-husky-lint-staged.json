{"info":{"title":"程式碼守門員 - Husky + Lint-Staged","fileName":"husky-lint-staged","description":"Don't let 💩 slip into your code base! 如何在專案中使用 husky 和 lint-staged，在提交 commit 前就找出錯誤！","createdAt":"2021-11-17T00:00:00.000Z","updatedAt":"2021-11-17T00:00:00.000Z","tags":["NPM","package","husky","lint-staged","ESLint","Stylelint"]},"content":"<h1 id=\"程式碼守門員 - Husky + Lint-Staged\" title=\"程式碼守門員 - Husky + Lint-Staged\">程式碼守門員 - Husky + Lint-Staged</h1>\n<p><strong>Don’t let 💩 slip into your code base!</strong> 這段話出自 <a  href=\"https://www.npmjs.com/package/lint-staged\" target=\"_blank\" rel=\"noreferrer noopener\"><code>lint-staged</code></a>，非常符合這篇文章想傳達的主旨。</p>\n<p>此文是紀錄我在專案上如何使用 <code>husky</code> + <code>lint-staged</code>，主要需求有：</p>\n<ol>\n<li>每次 <code>git commit</code> 前自動執行</li>\n<li>自動修正 lint 錯誤和程式碼排版</li>\n<li>檢查失敗且不能自動修復時，不要 commit</li>\n</ol>\n<h2 id=\"介紹\" title=\"介紹\"><a href=\"#介紹\">介紹</a></h2>\n<h3>- <a  href=\"https://www.npmjs.com/package/husky\" target=\"_blank\" rel=\"noreferrer noopener\"><code>husky</code></a> 🐶</h3>\n<p>可以讓我們在如 <code>git commit</code>、<code>git push</code> 執行前，預先處理我們指定的任務</p>\n<h3>- <a  href=\"https://www.npmjs.com/package/lint-staged\" target=\"_blank\" rel=\"noreferrer noopener\"><code>lint-staged</code></a> 🚫 💩</h3>\n<p>集中檢查範圍，只針對有變動的檔案，而非整個專案，也可以依據檔案類型，分別設置不同指令。</p>\n<h2 id=\"Installation\" title=\"Installation\"><a href=\"#Installation\">Installation</a></h2>\n<pre class=\"hljs\"><code>npm install husky lint-staged -D\n</code></pre>\n<h2 id=\"husky 設定\" title=\"husky 設定\"><a href=\"#husky 設定\">husky 設定</a></h2>\n<h3>- 初始化設定:</h3>\n<p>專案最初設定一次即可，會在根目錄下產生一個 <code>.husky</code> 資料夾，存放 husky 的相關腳本</p>\n<pre class=\"hljs\"><code>npm set-script prepare <span class=\"hljs-string\">&quot;husky install&quot;</span>\nnpm run prepare\n</code></pre>\n<h3>- 增加 hook:</h3>\n<p>指定在 <code>git commit</code> 前先跑過 <code>npx lint-staged</code> 腳本，如果失敗的話，<code>git commit</code> 不會被執行。</p>\n<pre class=\"hljs\"><code>npx husky add .husky/pre-commit <span class=\"hljs-string\">&quot;npx lint-staged&quot;</span>\n</code></pre>\n<p>輸入完上面指令後，會在 <code>.husky</code> 資料夾下面產生一個 <code>pre-commit</code> 檔案，如果有想到其他腳本想加入，比如說單元測試腳本，都可以直接在下一行增加。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">#!/bin/sh</span>\n. <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(dirname <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span>\n\nnpx lint-staged\n</code></pre>\n<div class=\"info\">\n<p>💡 補充<br />\n如果對其他的 git hooks 有興趣的話，可以參考 <a  href=\"https://git-scm.com/docs/githooks#_hooks\" target=\"_blank\" rel=\"noreferrer noopener\">git 官網文件</a>。</p>\n</div>\n<h2 id=\"lint-staged 設定\" title=\"lint-staged 設定\"><a href=\"#lint-staged 設定\">lint-staged 設定</a></h2>\n<p>這邊設定是根據檔案類型，分別需要經過 linter 檢查和 prettier format，可依照自己的需求調整。</p>\n<p>提供兩種設置方法，擇一即可。</p>\n<h3>1. <code>package.json</code></h3>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// package.json</span>\n\n <span class=\"hljs-attr\">&quot;lint-staged&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;*.{ts,js,vue}&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n      <span class=\"hljs-string\">&quot;eslint --fix&quot;</span>\n    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;*.{html,scss,css,vue}&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n      <span class=\"hljs-string\">&quot;prettier --write&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-string\">&quot;stylelint --fix&quot;</span>\n    <span class=\"hljs-punctuation\">]</span>\n <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n</code></pre>\n<h3>2. <code>.lintstagedrc.json</code></h3>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// .lintstagedrc.json</span>\n\n<span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;*.{ts,js,vue}&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n      <span class=\"hljs-string\">&quot;eslint --fix&quot;</span>\n    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;*.{html,scss,css,vue}&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n      <span class=\"hljs-string\">&quot;prettier --write&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-string\">&quot;stylelint --fix&quot;</span>\n    <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h2 id=\"Usage\" title=\"Usage\"><a href=\"#Usage\">Usage</a></h2>\n<p>每次 <code>git commit</code> 就會自動觸發，程式碼都要符合 <code>eslint</code>、<code>stylelint</code> 的設定檔規則，確保程式碼都是跟團隊規範保持一致的。</p>\n<p>&lt;br/&gt;</p>\n<p>我們可以先打一段可怕的程式碼試試，可以看到 <code>eslint</code> 哀嚎不已。</p>\n<p><img src=\"https://i.imgur.com/vQgu8v3.png\" alt=\"\" /></p>\n<p>&lt;br/&gt;</p>\n<p>接著把這份檔案直接 <code>git commit</code> 後，排版自動變整齊，error 也被自動修復了 🎉。</p>\n<p><img src=\"https://i.imgur.com/LwLf8br.png\" alt=\"\" /></p>\n<p>&lt;br/&gt;</p>\n<p>但也是有不能被自動修復的情境，例如下圖中 <code>bar</code> 值宣告了，卻沒有使用，這時會顯示錯誤訊息，此次 <code>git commit</code> 就會失敗，不會進入 <code>git log</code> 中，需要手動修正 error。</p>\n<p>主要也是要阻擋這類的程式碼進入 <code>git log</code> 中，因為現在幾乎都會設定 <code>vscode</code> 在存檔時，自動修正和 format，大部分的錯誤在開發中就會被解決了，但這類的檔案，只要檔案沒被開啟，vscode linter 插件就無法及時提供警告。</p>\n<p><img src=\"https://i.imgur.com/qml0GDx.png\" alt=\"\" /></p>\n<h2 id=\"總結\" title=\"總結\"><a href=\"#總結\">總結</a></h2>\n<p><code>husky</code> + <code>lint-staged</code> 的搭配，相當多了位 <code>Code Reviewer</code> 把關程式碼，也可以減輕團隊 code review 的壓力，確保不會有 error 會被推到 repository，且程式碼也是符合團隊規範。</p>\n<p>如果一開始就能修正，後期維護會輕鬆些，不然隨著專案變大，錯誤和警告數量一多，也是很頭疼的。</p>\n<hr />\n<h2 id=\"參考資料\" title=\"參考資料\"><a href=\"#參考資料\">參考資料</a></h2>\n<ol>\n<li><a  href=\"https://github.com/typicode/husky\" target=\"_blank\" rel=\"noreferrer noopener\">husky GitHub</a></li>\n<li><a  href=\"https://github.com/okonet/lint-staged\" target=\"_blank\" rel=\"noreferrer noopener\">lint-staged GitHub</a></li>\n<li><a  href=\"https://medium.com/@danielhu95/set-up-eslint-pipeline-zh-tw-990d7d9eb68e\" target=\"_blank\" rel=\"noreferrer noopener\">使用 ESLint, Prettier, Husky, Lint-staged 以及 Commitizen 提升專案品質及一致性</a></li>\n</ol>\n<h6>tags: <code>linter</code>、<code>NPM</code>、<code>package</code>、<code>lint-staged</code>、<code>husky</code>、<code>ESLint</code>、<code>stylelint</code></h6>\n","toc":{"title":"程式碼守門員 - Husky + Lint-Staged","subtitles":["介紹","Installation","husky 設定","lint-staged 設定","Usage","總結","參考資料"]}}