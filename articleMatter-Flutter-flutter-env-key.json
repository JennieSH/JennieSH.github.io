{"info":{"title":"[Note] Flutter 如何隱藏 API Key","fileName":"flutter-env-key","description":"介紹 Flutter 常見的 API keys 使用方法，主要有三種，可以依情境選擇需要的方式。","createdAt":"2023-05-12T00:00:00.000Z","updatedAt":"2023-05-12T00:00:00.000Z","tags":["Flutter","env","key"]},"content":"<h6>tags: <code>Flutter</code>、<code>env</code>、<code>key</code></h6>\n<h1 id=\"[Note] Flutter 如何隱藏 API Key\" title=\"[Note] Flutter 如何隱藏 API Key\">[Note] Flutter 如何隱藏 API Key</h1>\n<h2 id=\"前言\" title=\"前言\"><a href=\"#前言\">前言</a></h2>\n<p>介紹 Flutter 常見的 API keys 使用方法，主要有三種，可以依情境選擇需要的方式。</p>\n<p>內文主要是依照 <a  href=\"https://codewithandrea.com/articles/flutter-api-keys-dart-define-env-files/\" target=\"_blank\" rel=\"noreferrer noopener\">How to Store API Keys in Flutter</a> 整理出的方法，文章寫得很詳細，非常推薦閱讀 👍</p>\n<h2 id=\"Hard-coding\" title=\"Hard-coding\"><a href=\"#Hard-coding\">Hard-coding</a></h2>\n<p>直接把 key 值寫在 <code>.dart</code> 檔案中。</p>\n<p>先在 <code>api_key.dart</code> 新增 API key，在需要使用的檔案中，引入 <code>api_key.dart</code>：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// api_key.dart</span>\n<span class=\"hljs-keyword\">final</span> apiKey = <span class=\"hljs-string\">&#x27;AIzaSyBeSYQ8cn6IIwRBbB4hPrn&#x27;</span>;\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Step 1. import key 所在的檔案</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;api_key.dart&#x27;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LocationService</span> </span>{\n  Future&lt;<span class=\"hljs-built_in\">String</span>&gt; getPlaceId(<span class=\"hljs-built_in\">String</span> input) <span class=\"hljs-keyword\">async</span> {\n     <span class=\"hljs-comment\">// Step 2.直接使用 key 值</span>\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">String</span> url =\n        <span class=\"hljs-string\">&#x27;https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=<span class=\"hljs-subst\">$input</span>&amp;inputtype=textquery&amp;key=<span class=\"hljs-subst\">$apiKey</span>&#x27;</span>;\n\n    <span class=\"hljs-keyword\">var</span> response = <span class=\"hljs-keyword\">await</span> http.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-built_in\">Uri</span>.parse(url));\n    <span class=\"hljs-keyword\">var</span> json = convert.jsonDecode(response.body);\n\n    <span class=\"hljs-keyword\">var</span> placeId = json[<span class=\"hljs-string\">&#x27;candidates&#x27;</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">&#x27;place_id&#x27;</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">String</span>;\n    <span class=\"hljs-keyword\">return</span> placeId;\n  }\n\n}\n</code></pre>\n<p>需要注意的地方就是，<strong>千萬不要把 <code>api_key.dart</code> commit 進 git</strong>，需要另外把 <code>api_key.dart</code> 加入 <code>.gitignore</code> 檔案中：</p>\n<pre class=\"hljs\"><code># 在 .gitignore 中的檔案，都不會進入 git 版控紀錄\napi_key.dart\n</code></pre>\n<h3>優點</h3>\n<ul>\n<li>快速使用</li>\n</ul>\n<h3>缺點</h3>\n<ul>\n<li>無法根據環境去 mapping 對應的 key</li>\n<li>key 以明文方式儲存(plaintext)，安全性不高</li>\n<li>可能會因失誤，造成 key 值外洩 e.g. 忘記加進 <code>.gitignore</code></li>\n</ul>\n<div class=\"warning\">\n<p>⚠️ <strong>提醒：</strong></p>\n<p><code>api_key.dart</code> 如曾經被 commit 進 git，後續再把它加入到 <code>.gitignore</code>，也沒用，因為都可以在 git history 找到相關 key 資訊，唯一能做的就是銷毀原先的 key，再新增一個新的。</p>\n</div>\n<h2 id=\"–dart-define / --dart-define-from-file\" title=\"–dart-define / --dart-define-from-file\"><a href=\"#–dart-define / --dart-define-from-file\">–dart-define / --dart-define-from-file</a></h2>\n<p>在編譯階段，使用 <code>--dart-define</code> 或 <code>--dart-define-from-file</code> 將 key 傳入程式中使用。</p>\n<h3>–dart-define</h3>\n<p>在程式中使用 <code>String.fromEnvironment(&lt;key-name&gt;)</code> 取得 key，並改用下面指令去 run 程式，將 key 傳入進程式：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LocationService</span> </span>{\n  Future&lt;<span class=\"hljs-built_in\">String</span>&gt; getPlaceId(<span class=\"hljs-built_in\">String</span> input) <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-comment\">// get api key</span>\n    <span class=\"hljs-keyword\">const</span> apiKey = <span class=\"hljs-built_in\">String</span>.fromEnvironment(<span class=\"hljs-string\">&#x27;API_KEY&#x27;</span>);\n    <span class=\"hljs-keyword\">if</span> (apiKey.isEmpty) {\n      <span class=\"hljs-keyword\">throw</span> AssertionError(<span class=\"hljs-string\">&#x27;API_KEY is not set&#x27;</span>);\n    }\n\n    <span class=\"hljs-comment\">// use api key</span>\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">String</span> url = <span class=\"hljs-string\">&#x27;https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=<span class=\"hljs-subst\">$input</span>&amp;inputtype=textquery&amp;key=<span class=\"hljs-subst\">$apiKey</span>&#x27;</span>;\n    ...\n}\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-variable\">$flutter</span> run --dart-define API_KEY=AIzaSyBeSYQ8cn\n</code></pre>\n<h4>優點</h4>\n<ul>\n<li>source code 不會存在 Hard-coding key</li>\n</ul>\n<h4>缺點</h4>\n<ul>\n<li>\n<p>複數 keys 時，難以管理</p>\n<pre class=\"hljs\"><code><span class=\"hljs-variable\">$flutter</span> run \\\n  --dart-define A_API_KEY= ... \\\n  --dart-define B_API_KEY= ... \\\n  --dart-define C_API_KEY= ...\n</code></pre>\n</li>\n<li>\n<p>在編譯後，key 仍然會被嵌入到發佈版本（release binary）的二進制文件中</p>\n<blockquote>\n<p>針對發佈版本（release binary）需要對 Dart 代碼進行混淆（混淆可以讓代碼難以被理解和解讀），降低被反向破譯的風險，可以參考<a  href=\"https://docs.flutter.dev/deployment/obfuscate\" target=\"_blank\" rel=\"noreferrer noopener\">官方推薦做法</a>。</p>\n</blockquote>\n</li>\n</ul>\n<br/>\n<h3><code>--dart-define-from-file</code></h3>\n<p>在 <code>Flutter 3.7</code> 後，可以將 API keys 存成一個 json 檔案（需要進 <code>.gitignore</code>），再改用下面指令去 run 程式，將 json 內容傳入進程式：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// api-keys.json</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;GOOGLE_MAP_KEY&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;...&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;A_API_KEY&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;...&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;B_API_KEY&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;...&quot;</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-variable\">$flutter</span> run --dart-define-from-file=api-keys.json\n</code></pre>\n<p>程式中一樣使用 <code>String.fromEnvironment(&lt;key-name&gt;)</code> 取得 key 值：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> apiKey = <span class=\"hljs-built_in\">String</span>.fromEnvironment(<span class=\"hljs-string\">&#x27;GOOGLE_MAP_KEY&#x27;</span>);\n<span class=\"hljs-keyword\">if</span> (apiKey.isEmpty) {\n  <span class=\"hljs-comment\">// handle error</span>\n}\n\n<span class=\"hljs-comment\">// use api key</span>\n...\n</code></pre>\n<br/>\n<h4><code>--dart-define-from-file</code> 與 <code>launch.json</code> 組合技 (VSCode)</h4>\n<p>在 <code>.vscode/launch.json</code> 中的 <code>args</code>(會代入在 command line)，加入下列參數：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// .vscode/launch.json</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;0.2.0&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;configurations&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Launch Development&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;request&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;launch&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;dart&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;program&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;lib/main.dart&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-comment\">// add here</span>\n      <span class=\"hljs-attr\">&quot;args&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;--dart-define-from-file&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;api-keys.json&quot;</span><span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>也可以針對環境，有不一樣的 API keys，i.e. Production 環境使用 <code>api-keys.prod.json</code>：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// .vscode/launch.json</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;0.2.0&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;configurations&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Launch Development&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;request&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;launch&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;dart&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;program&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;lib/main.dart&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;args&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;--dart-define-from-file&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;api-keys.json&quot;</span><span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Launch Production&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;request&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;launch&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;dart&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;program&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;lib/main.dart&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;args&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;--dart-define-from-file&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;api-keys.prod.json&quot;</span><span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<details class='spoiler'><summary>關於 launch.json(組態檔)</summary>\n<p><strong><code>launch.json</code></strong> 是定義調試過程中所需的各種設定，如程式入口、命令列參數、環境變數等。</p>\n<p>除了手動新增檔案，也可以透過 VSCode 自動生成一個，點選 <code>Run and Debug</code> &gt; <code>create a launch.json file</code> &gt; <code>Dart &amp; Flutter</code>：</p>\n<p><img src=\"https://hackmd.io/_uploads/HydUmehE2.png\" alt=\"\" /></p>\n<p>新增的檔案內容與上面範例有點不同，因為這份檔案把 <a  href=\"https://docs.flutter.dev/testing/build-modes\" target=\"_blank\" rel=\"noreferrer noopener\">flutterMode</a> 三個運行模式(<code>debug</code>/<code>profile</code>/<code>release</code>) 都列出來了，要加上各個環境 keys 的版本如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// .vscode/launch.json</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;0.2.0&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;configurations&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;flutter-appworks&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;request&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;launch&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;dart&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;args&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;--dart-define-from-file&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;api-keys.json&quot;</span><span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;flutter-appworks (profile mode)&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;request&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;launch&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;dart&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;flutterMode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;profile&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;args&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;--dart-define-from-file&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;api-keys.json&quot;</span><span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;flutter-appworks (release mode)&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;request&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;launch&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;dart&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;flutterMode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;release&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;args&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;--dart-define-from-file&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;api-keys.prod.json&quot;</span><span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p><strong>[補充 QA]</strong><br />\nQ. <code>version</code> 為什麼是 0.2.0 呢？</p>\n<blockquote>\n<p>目前沒找到確切為什麼會是 0.2.0 的原因，但<a  href=\"https://code.visualstudio.com/docs/editor/debugging#_launch-configurations\" target=\"_blank\" rel=\"noreferrer noopener\">官網範例</a>也都是使用 0.2.0 版本，應該是目前 default 值。</p>\n<p>最後也有詢問 chatGPT，指出如果使用的是舊版本的 VSCode 或希望使用不同的配置文件語法，可以將 “version” 更改為 “0.1.0” 或其他版本號。<br />\n:::</p>\n</blockquote>\n<br/>\n<div class=\"info\">\n<p>💡 <strong>補充</strong><br />\n如果是使用其他 IDE，例如 IntelliJ 或 Android Studio，可參考 <a  href=\"https://www.jetbrains.com/help/idea/run-debug-configuration.html\" target=\"_blank\" rel=\"noreferrer noopener\">Run/debug configurations</a>。</p>\n</div>\n</details>\n<h4>優點</h4>\n<ul>\n<li>方便管理多組 keys</li>\n<li>可針對不同環境(dev/prod)，設置不同 key 的 json 檔案</li>\n</ul>\n<h4>缺點</h4>\n<ul>\n<li>json 檔案需要加入 <code>.gitignore</code> 清單中 (json 中的 key 也是屬於 hardcode)</li>\n</ul>\n<h2 id=\".env 檔案定義 key\" title=\".env 檔案定義 key\"><a href=\"#.env 檔案定義 key\">.env 檔案定義 key</a></h2>\n<p>把 key 值統一管理在 <code>.env</code> 檔案中，會需要配合額外的 package，例如： <a  href=\"https://pub.dev/packages/envied\" target=\"_blank\" rel=\"noreferrer noopener\"><code>envied</code></a></p>\n<h3>Step 1. 安裝 <a  href=\"https://pub.dev/packages/envied\" target=\"_blank\" rel=\"noreferrer noopener\">envied</a> 套件</h3>\n<p><code>envied</code> 可以幫助我們生成一個 Dart class，包含 <code>.env</code> 檔案中的值。</p>\n<pre class=\"hljs\"><code>$ flutter pub add envied\n$ flutter pub add --dev envied_generator\n$ flutter pub add --dev build_runner\n</code></pre>\n<h3>Step 2. 新增 <code>.env</code></h3>\n<pre class=\"hljs\"><code># .env\nAPI_KEY=AIzaSyBeSYQ8cn6IIwRBbB4hPrn\n</code></pre>\n<h3>Step 3. 新增 <code>env.dart</code></h3>\n<p><code>env.g.dart</code> 後面會用指令產生，目前會報錯，可以忽略：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// lib/env.dart</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:envied/envied.dart&#x27;</span>;\n\n<span class=\"hljs-keyword\">part</span> <span class=\"hljs-string\">&#x27;env.g.dart&#x27;</span>;\n\n<span class=\"hljs-meta\">@Envied</span>(path: <span class=\"hljs-string\">&#x27;.env&#x27;</span>)\n<span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Env</span> </span>{\n  <span class=\"hljs-meta\">@EnviedField</span>(varName: <span class=\"hljs-string\">&#x27;API_KEY&#x27;</span>)\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> apiKey = _Env.apiKey;\n}\n</code></pre>\n<p>以上寫法已經足夠使用了，但為了提高安全性，可以使用套件提供的混淆(Obfuscation)功能，需要在 <code>@EnviedField</code> 加上 <code>obfuscate: true</code>：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// lib/env.dart</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:envied/envied.dart&#x27;</span>;\n\n<span class=\"hljs-keyword\">part</span> <span class=\"hljs-string\">&#x27;env.g.dart&#x27;</span>;\n\n<span class=\"hljs-meta\">@Envied</span>(path: <span class=\"hljs-string\">&#x27;.env&#x27;</span>)\n<span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Env</span> </span>{\n  <span class=\"hljs-comment\">// Add here</span>\n  <span class=\"hljs-meta\">@EnviedField</span>(varName: <span class=\"hljs-string\">&#x27;API_KEY&#x27;</span>, obfuscate: <span class=\"hljs-keyword\">true</span>)\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> apiKey = _Env.apiKey;\n}\n</code></pre>\n<div class=\"info\">\n<p>💡 <strong>補充：</strong><br />\n如果使用 <code>obfuscate</code> flag，需要將 <code>const</code> 改成 <code>final</code>，否則會報錯。</p>\n</div>\n<h3>Step 4. 產生 <code>env.g.dart</code></h3>\n<pre class=\"hljs\"><code><span class=\"hljs-variable\">$flutter</span> pub run build_runner build --delete-conflicting-outputs\n</code></pre>\n<p>執行完後，會產生一份 <code>env.g.dart</code>：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// GENERATED CODE - DO NOT MODIFY BY HAND</span>\n\n<span class=\"hljs-keyword\">part</span> of <span class=\"hljs-string\">&#x27;env.dart&#x27;</span>;\n\n<span class=\"hljs-comment\">// **************************************************************************</span>\n<span class=\"hljs-comment\">// EnviedGenerator</span>\n<span class=\"hljs-comment\">// **************************************************************************</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_Env</span> </span>{\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; _enviedkeyapiKey = [\n    <span class=\"hljs-number\">2433719592</span>,\n    <span class=\"hljs-number\">1273530568</span>,\n    ....\n  ];\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; _envieddataapiKey = [\n    <span class=\"hljs-number\">2433719657</span>,\n    <span class=\"hljs-number\">1273530497</span>,\n    ....\n  ];\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> apiKey = <span class=\"hljs-built_in\">String</span>.fromCharCodes(\n    <span class=\"hljs-built_in\">List</span>.generate(_envieddataapiKey.length, (i) =&gt; i, growable: <span class=\"hljs-keyword\">false</span>)\n        .map((i) =&gt; _envieddataapiKey[i] ^ _enviedkeyapiKey[i])\n        .toList(growable: <span class=\"hljs-keyword\">false</span>),\n  );\n}\n</code></pre>\n<div class=\"info\">\n<p>💡 <strong>補充：</strong></p>\n<p>如果不在 <code>@EnviedField</code> 加上 <code>obfuscate: true</code>，產出來的 <code>env.g.dart</code> 內容如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// GENERATED CODE - DO NOT MODIFY BY HAND</span>\n\n<span class=\"hljs-keyword\">part</span> of <span class=\"hljs-string\">&#x27;env.dart&#x27;</span>;\n\n<span class=\"hljs-comment\">// **************************************************************************</span>\n<span class=\"hljs-comment\">// EnviedGenerator</span>\n<span class=\"hljs-comment\">// **************************************************************************</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_Env</span> </span>{\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> apiKey = <span class=\"hljs-string\">&#x27;AIzaSyBeSYQ8cn6IIwRBbB4hPrn&#x27;</span>;\n}\n</code></pre>\n<p>這樣 <code>apiKey</code> 會以明碼方式存在於 dart 檔案中。</p>\n</div>\n<h3>Step 5. 將 <code>*.env*</code> 與 <code>env.g.dart</code> 加入 <code>.gitignore</code></h3>\n<p>這兩份檔案基本都有 key 的資訊，都需要加入 <code>.gitignore</code> 內：</p>\n<pre class=\"hljs\"><code># .gitignore\nenv.g.dart\n*.env*\n</code></pre>\n<h3>Step 6. 程式內使用 API keys</h3>\n<p>引入 <code>env.dart</code> 檔案，使用 <code>Env.&lt;key-name&gt;</code> 取得 key 的值：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 引入 env.dart</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:flutter_appworks/env.dart&#x27;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LocationService</span> </span>{\n  <span class=\"hljs-comment\">// use api key</span>\n  <span class=\"hljs-keyword\">final</span> key = Env.apiKey;\n\n  Future&lt;<span class=\"hljs-built_in\">String</span>&gt; getPlaceId(<span class=\"hljs-built_in\">String</span> input) <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">String</span> url =\n        <span class=\"hljs-string\">&#x27;https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=<span class=\"hljs-subst\">$input</span>&amp;inputtype=textquery&amp;key=<span class=\"hljs-subst\">$key</span>&#x27;</span>;\n\n    <span class=\"hljs-keyword\">var</span> response = <span class=\"hljs-keyword\">await</span> http.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-built_in\">Uri</span>.parse(url));\n    <span class=\"hljs-keyword\">var</span> json = convert.jsonDecode(response.body);\n\n    <span class=\"hljs-keyword\">var</span> placeId = json[<span class=\"hljs-string\">&#x27;candidates&#x27;</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">&#x27;place_id&#x27;</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">String</span>;\n    <span class=\"hljs-keyword\">return</span> placeId;\n  }\n</code></pre>\n<div class=\"info\">\n<p>💡 <strong>補充：</strong></p>\n<p><a  href=\"https://pub.dev/packages/envied#usage\" target=\"_blank\" rel=\"noreferrer noopener\"><strong><code>envied</code></strong></a> v.s. <a  href=\"https://pub.dev/packages/flutter_dotenv\" target=\"_blank\" rel=\"noreferrer noopener\"><strong><code>flutter_dotenv</code></strong></a></p>\n<p>這兩個套件都可以用來處理 flutter 環境變數的需求，差別是使用 <code>env</code> 檔案的方式：</p>\n<ul>\n<li><strong><code>envied</code></strong><br />\ncode generation + 程式碼混淆功能，可以讓 API keys 更加安全</li>\n<li><strong><code>flutter_dotenv</code></strong><br />\n將 <code>env</code> 加入 assets 資料夾中，在 runtime 時候讀取，因此有機會可以從 APK 獲取 API keys</li>\n</ul>\n<p>如果 <code>env</code> 沒放什麼重要的 key，那麼兩個套件都可以使用，反之，就直接選擇 <code>envied</code> 了。</p>\n</div>\n<h3>優點</h3>\n<ul>\n<li>安全度高 (code obfuscation)</li>\n<li>API keys 集中管理</li>\n<li>可支持多個環境設定\n<blockquote>\n<p>尚未親測過，但根據該 <a  href=\"https://github.com/petercinibulk/envied/issues/16\" target=\"_blank\" rel=\"noreferrer noopener\">issue</a> 討論，作者回應是可以做得到的。</p>\n</blockquote>\n</li>\n</ul>\n<h3>缺點</h3>\n<ul>\n<li>\n<p>步驟比較繁複：增加環境變數時，class 要手動新增項目和重新產 <code>env.g.dart</code></p>\n<blockquote>\n<p>因為筆者是寫前端，所以是跟 web 做比較，web 也是用 <code>.env</code> 管理環境變數，新增變數時，只要重新 run 專案，不需要再手動做什麼了。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"總結\" title=\"總結\"><a href=\"#總結\">總結</a></h2>\n<p>如果需要接第三方的 API，都會遇到如何在 client 去管理這些 API Key 的問題，基本只需要謹記這兩點，再依自己需求去做選擇即可：</p>\n<ul>\n<li>重要的 key 檔案，加入 <code>.gitignore</code>，不進版控</li>\n<li>release version 需要做程式碼混淆(code obfuscation)</li>\n</ul>\n<p>另外有些套件是需要分別在 Android 和 iOS 的 <code>AndroidManifest.xml</code>、<code>AppDelegate.swift</code> 寫入 key 值，例如： <a  href=\"https://codelabs.developers.google.com/codelabs/google-maps-in-flutter#3\" target=\"_blank\" rel=\"noreferrer noopener\">Google Maps</a>，這時候可以考慮選擇 <code>--dart-define</code>，支持只定義一次 key，就讓雙平台可以從設定檔中讀取到 key，可以參考這篇文章的做法 - <a  href=\"https://medium.com/flutter-community/how-to-setup-dart-define-for-keys-and-secrets-on-android-and-ios-in-flutter-apps-4f28a10c4b6c\" target=\"_blank\" rel=\"noreferrer noopener\">How to setup dart-define for keys and secrets on Android and iOS in Flutter apps</a>。</p>\n<h2 id=\"參考資料\" title=\"參考資料\"><a href=\"#參考資料\">參考資料</a></h2>\n<ol>\n<li><a  href=\"https://codewithandrea.com/articles/flutter-api-keys-dart-define-env-files/\" target=\"_blank\" rel=\"noreferrer noopener\">How to Store API Keys in Flutter: --dart-define vs .env files</a></li>\n<li><a  href=\"https://docs.flutter.dev/deployment/obfuscate\" target=\"_blank\" rel=\"noreferrer noopener\">Obfuscating Dart code</a></li>\n<li><a  href=\"https://www.dotenv.org/docs/security/env\" target=\"_blank\" rel=\"noreferrer noopener\">dotenv doc</a></li>\n</ol>\n","toc":{"title":"[Note] Flutter 如何隱藏 API Key","subtitles":["前言","Hard-coding","–dart-define / --dart-define-from-file",".env 檔案定義 key","總結","參考資料"]}}