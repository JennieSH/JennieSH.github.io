{"info":{"title":"GraphQL - Graph Query Language","fileName":"graphql-introduction","description":"站在前端角度，去初探 GraphQL 世界 ～","createdAt":"2024-04-17T00:00:00.000Z","updatedAt":"2024-04-17T00:00:00.000Z","tags":["graphql","api","restful"]},"content":"<h6>tags: <code>GraphQL</code></h6>\n<h1 id=\"GraphQL - Graph Query Language\" title=\"GraphQL - Graph Query Language\">GraphQL - Graph Query Language</h1>\n<p>此篇是站在前端角度，去初探 GraphQL 世界 ～</p>\n<h2 id=\"什麼是 GraphQL ?\" title=\"什麼是 GraphQL ?\"><a href=\"#什麼是 GraphQL ?\">什麼是 GraphQL ?</a></h2>\n<p>GraphQL 是一種用於 API 的查詢語言，可以讓 client 端更彈性去使用後端提供的資料。</p>\n<p>最初是由 Facebook 開發的，是為了要解決手機 APP 在初次載入，會發多個 requests 去取得頁面資料，進而導致程式會變慢或直接當掉問題，所以他們想說將資料整合成一筆，送到 client 直接做使用。<a  href=\"(https://engineering.fb.com/2015/09/14/core-data/graphql-a-data-query-language/)\" target=\"_blank\" rel=\"noreferrer noopener\">後來 Facebook 也在 2015 年公開發佈這項技術</a>。</p>\n<h2 id=\"GraphQL v.s. RESTful\" title=\"GraphQL v.s. RESTful\"><a href=\"#GraphQL v.s. RESTful\">GraphQL v.s. RESTful</a></h2>\n<h3>1. API endpoints</h3>\n<ul>\n<li>\n<p><code>RESTful</code> 根據資源類型，會有多個 endpoints：</p>\n<ul>\n<li><code>/users/&lt;id&gt;</code></li>\n<li><code>/users/&lt;id&gt;/posts</code></li>\n<li><code>/users/&lt;id&gt;/followers</code></li>\n</ul>\n</li>\n<li>\n<p><code>GraphQL</code> 只有一個 endpoint：</p>\n<ul>\n<li><code>/graphql</code></li>\n</ul>\n</li>\n</ul>\n<h3>2. Data Fetching</h3>\n<ul>\n<li>\n<p><code>RESTful</code><br />\n_ 需要打三次 api，才可以得到頁面要的全部資料<br />\n_ 如果 api 本身有依賴前一支 API (A =&gt; B =&gt; C)，需要等到 A response，才能發 B 的 request<br />\n<img src=\"https://i.imgur.com/Wg2RlhE.png\" alt=\"\" /></p>\n</li>\n<li>\n<p><code>GraphQL</code><br />\n_ 可選擇三種不同類型的資料，集中在同一筆 request<br />\n_ 資料本身有關聯，如 A 的 response 中有 B 所需要的 params，B 可以直嵌入 A 的 query 裡面，這樣也只需打一次 request 即可<br />\n<img src=\"https://i.imgur.com/aXeOu3I.png\" alt=\"\" /></p>\n</li>\n</ul>\n<blockquote>\n<p><a  href=\"https://www.howtographql.com/basics/1-graphql-is-the-better-rest/\" target=\"_blank\" rel=\"noreferrer noopener\">圖片來源</a></p>\n</blockquote>\n<h3>3. Overfetching and Underfetching</h3>\n<ul>\n<li><code>RESTful</code> 容易含過多或缺少一些資料，因為 endpoint 回的 response 資料是固定的</li>\n<li><code>GraphQL</code> 可精準挑選所需要的資料</li>\n</ul>\n<h3>4. Schema &amp; Type System</h3>\n<p>Schema 是用來定義 API 的結構和功能，前端可透過套件，映射一份與後端相同的 API Type System，不只 API 底下欄位定義的 Type，連 Type name 都可以跟後端同步，減少雙方對欄位認知不一致，且後端只要一更改，前端立馬隨之也會更新。</p>\n<h2 id=\"如何使用\" title=\"如何使用\"><a href=\"#如何使用\">如何使用</a></h2>\n<h3>Query</h3>\n<p>用於取得資料</p>\n<h4>1. 基本</h4>\n<pre class=\"hljs\"><code># 寫法一：\n{\n  me {\n    name\n  }\n}\n\n# 寫法二：\nquery {\n  me {\n    name\n  }\n}\n\n# 寫法三: Operation name for identify different GraphQL requests\nquery getMe {\n  me {\n    name\n  }\n}\n\n</code></pre>\n<div class=\"info\">\n<p>💡<strong>Operation name：</strong></p>\n<p>通常實務上都會使用寫法三，也就是會加 Operation name，可以方便 debug 和追蹤一些數據，相當於幫它取一個變數名的概念。</p>\n<p>在 Network 裡面也可以看到 Operation name，官方也是建議使用這種寫法。</p>\n<p><img src=\"https://i.imgur.com/0cHSBgO.png\" alt=\"\" /></p>\n</div>\n<p>以上三種寫法都可以得到 server 的 response：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;me&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Jennie&quot;</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h4>2. 有使用參數</h4>\n<pre class=\"hljs\"><code># 寫法一： query + 參數\n{\n  human(id: &quot;1000&quot;) {\n    name\n    height(unit: FOOT)\n  }\n}\n\n# 寫法二： query + 參數\nquery humanInfo($id: Int!) {\n  human(id: $id) {\n    name\n    height(unit: FOOT)\n  }\n}\n</code></pre>\n<p>得到的 response：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;human&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Luke Skywalker&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;height&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">5.6430448</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h4>3. Aliases - 使用別名</h4>\n<pre class=\"hljs\"><code># 使用別名，改變 response key\n{\n  empireHero: hero(episode: EMPIRE) {\n    name\n  }\n  jediHero: hero(episode: JEDI) {\n    name\n  }\n}\n</code></pre>\n<p>得到的 response：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;empireHero&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Luke Skywalker&quot;</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;jediHero&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;R2-D2&quot;</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h4>4. Fragments</h4>\n<pre class=\"hljs\"><code># 使用 Fragments，可依據不同 episode，打同一隻 api\nquery getXXX{\n  leftComparison: hero(episode: EMPIRE) {\n    ...comparisonFields\n  }\n  rightComparison: hero(episode: JEDI) {\n    ...comparisonFields\n  }\n}\n\nfragment comparisonFields on Character {\n  name\n  appearsIn\n  friends {\n    name\n  }\n}\n</code></pre>\n<p>得到的 response：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;leftComparison&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Luke Skywalker&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;appearsIn&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-string\">&quot;NEWHOPE&quot;</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">&quot;EMPIRE&quot;</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">&quot;JEDI&quot;</span>\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;friends&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-punctuation\">{</span>\n          <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Han Solo&quot;</span>\n        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-punctuation\">{</span>\n          <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Leia Organa&quot;</span>\n        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-punctuation\">{</span>\n          <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;C-3PO&quot;</span>\n        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-punctuation\">{</span>\n          <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;R2-D2&quot;</span>\n        <span class=\"hljs-punctuation\">}</span>\n      <span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;rightComparison&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;R2-D2&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;appearsIn&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-string\">&quot;NEWHOPE&quot;</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">&quot;EMPIRE&quot;</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">&quot;JEDI&quot;</span>\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;friends&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-punctuation\">{</span>\n          <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Luke Skywalker&quot;</span>\n        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-punctuation\">{</span>\n          <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Han Solo&quot;</span>\n        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-punctuation\">{</span>\n          <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Leia Organa&quot;</span>\n        <span class=\"hljs-punctuation\">}</span>\n      <span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h3>Mutation</h3>\n<p>用於新增/更新/刪除資料</p>\n<h4>基本</h4>\n<pre class=\"hljs\"><code># mutation\nmutation createReviewForEpisode($ep: Episode!, $review: ReviewInput!) {\n  createReview(episode: $ep, review: $review) {\n    stars\n    commentary\n  }\n}\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// variables</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;ep&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;JEDI&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;review&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;stars&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">5</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;commentary&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;This is a great movie!&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>API 成功後，回傳的 response：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;hero&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;R2-D2&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;friends&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-punctuation\">{</span>\n          <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Luke Skywalker&quot;</span>\n        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-punctuation\">{</span>\n          <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Han Solo&quot;</span>\n        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-punctuation\">{</span>\n          <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Leia Organa&quot;</span>\n        <span class=\"hljs-punctuation\">}</span>\n      <span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h4>參數預設值</h4>\n<p>可以使用 <code>=</code> 帶入參數的預設值</p>\n<pre class=\"hljs\"><code>query HeroNameAndFriends($episode: Episode = JEDI) {\n  hero(episode: $episode) {\n    name\n    friends {\n      name\n    }\n  }\n}\n</code></pre>\n<h2 id=\"生態圈 + 工具\" title=\"生態圈 + 工具\"><a href=\"#生態圈 + 工具\">生態圈 + 工具</a></h2>\n<h3><a  href=\"https://graphql.org/code/\" target=\"_blank\" rel=\"noreferrer noopener\">Language</a> / Framework</h3>\n<p>前端 Web 和 App 語言基本 GraphQL 都有支持使用 (e.g. JavaScript、Kotlin、Swift)，另外，不論後端語言是使用哪一種，只需要後端也有使用 GraphQL 撰寫 API，前端就可以用 GraphQL 來做前後端的資料傳輸。</p>\n<p>前端三大框架，也各有與 GraphQL 搭配的工具使用，所以可以考慮跟後端溝通，一同踏入 GraphQL 世界！</p>\n<h3>GraphQL Client 常見工具</h3>\n<p>GraphQL Client 主要工作就是，使用前端寫好的 query 與 server 去溝通，即 client 只需要寫 query，打 API 行為就交給工具函式庫幫你解決，相當於在使用 RESTful API 時候，會去用 axios 幫助處理 API。另外這些工具有些也有整合前端其他框架、資料 Cache 等功能，基本都會選一個來搭配使用。</p>\n<p><strong>GraphQL Client</strong></p>\n<ul>\n<li><a  href=\"https://www.apollographql.com/docs/\" target=\"_blank\" rel=\"noreferrer noopener\">Apollo Client</a></li>\n<li><a  href=\"https://github.com/prisma-labs/graphql-request\" target=\"_blank\" rel=\"noreferrer noopener\">graphql-request</a>\n<blockquote>\n<p>5/27 當天有口誤，主要 GraphQL Client 為 <code>graphql-request</code>，只是當天有在搭配，react-query 去處理 API</p>\n</blockquote>\n</li>\n<li><a  href=\"https://relay.dev/\" target=\"_blank\" rel=\"noreferrer noopener\">relay</a></li>\n</ul>\n<p><strong>IDE</strong></p>\n<p>基本就是 API Documentation，相當於 <a  href=\"https://swagger.io/\" target=\"_blank\" rel=\"noreferrer noopener\">swagger</a> 在使用 RESTful API 扮演的角色，可以透過 IDE 看到 params/response 的 type 資訊，也能在上面直接送 request，查看 response 的資料，但要使用哪個 IDE 是由後端決定的，因為前端也會使用到，所以也稍微介紹一下。</p>\n<ul>\n<li><a  href=\"https://www.electronjs.org/apps/graphiql\" target=\"_blank\" rel=\"noreferrer noopener\">GraphiQL</a></li>\n<li><a  href=\"https://github.com/graphql/graphql-playground\" target=\"_blank\" rel=\"noreferrer noopener\">graphql-playground</a></li>\n</ul>\n<p><strong>其他</strong></p>\n<p>如果有使用 TypeScript 強烈推薦使用！它會依據 client 定義的 query，自動對到後端提供的 schema 產生對應的 type，連 type name 也不用前端想，對命名障礙的人簡直是福音，而且只要後端有改到 schema，文件也對自己自動修改，開發體驗非常好！ 👍</p>\n<ul>\n<li><a  href=\"https://www.graphql-code-generator.com/\" target=\"_blank\" rel=\"noreferrer noopener\">GraphQL Code Generator</a></li>\n</ul>\n<p><img src=\"https://i.imgur.com/5le51mm.png\" alt=\"GraphQL Code Generator\" /></p>\n<h2 id=\"GraphQL 優/缺點\" title=\"GraphQL 優/缺點\"><a href=\"#GraphQL 優/缺點\">GraphQL 優/缺點</a></h2>\n<h3>優點</h3>\n<ol>\n<li>doc 文件清楚 (我覺得比 Swagger 好用)</li>\n<li>彈性調整 response，可以剛好配置出前端需要的資料格式</li>\n<li>TypeScript 搭配工具，能自動產出 response type，節省開發和維護時間</li>\n<li>生態系已滿蓬勃，將來換語言或框架，經驗也可以沿用</li>\n</ol>\n<h3>缺點</h3>\n<ol>\n<li>需要後端配合使用</li>\n<li>後端 api error response，相較於 Swagger，較不容易寫清楚</li>\n<li>學習成本，跟 RESTful 用法還是不同，需付出時間適應學習</li>\n<li>錯誤訊息需額外處理，基本有成功都是 200，更詳細錯誤訊息，需解構出來看</li>\n<li>query 深度和複雜度都會影響整個 query 效能</li>\n<li>搭配 cache 功能的話，需考慮到整個專案設計，避免同資料，更新時間點不同步</li>\n</ol>\n<h2 id=\"Apollo + React\" title=\"Apollo + React\"><a href=\"#Apollo + React\">Apollo + React</a></h2>\n<div class=\"info\">\n<p><strong><a  href=\"https://github.com/JennieSH/graphql-appworks\" target=\"_blank\" rel=\"noreferrer noopener\">Demo Code：</a></strong></p>\n<ul>\n<li><strong><a  href=\"https://github.com/JennieSH/graphql-appworks/tree/master/client-js\" target=\"_blank\" rel=\"noreferrer noopener\">client-js</a></strong> : React + JavaScript + apollo</li>\n<li><strong><a  href=\"https://github.com/JennieSH/graphql-appworks/tree/master/client-ts\" target=\"_blank\" rel=\"noreferrer noopener\">client-ts</a></strong> : React + TypeScript + graphql-request</li>\n<li><strong><a  href=\"https://github.com/JennieSH/graphql-appworks/tree/master/server-js\" target=\"_blank\" rel=\"noreferrer noopener\">server-js</a></strong> : Nodejs + MongoDB</li>\n</ul>\n<p>💡 想實作前端的話，可以直接拉 <strong><a  href=\"https://github.com/JennieSH/graphql-appworks/blob/feature/template/client-js/package.json\" target=\"_blank\" rel=\"noreferrer noopener\">feature/template</a></strong> 這個 branch，裡面 UI 已處理好，後端 server 起起來後，就可以自行針對練習 graphql</p>\n<p>💡 後端 DB 密碼記得改成 school wifi 密碼，或者改接自己的 DB、server 也可以</p>\n</div>\n<h4>1. 安裝</h4>\n<pre class=\"hljs\"><code>npm install @apollo/client graphql\n</code></pre>\n<h4>2. 初始化 ApolloClient</h4>\n<ul>\n<li><code>uri</code> 需調整為 GraphQL server URL</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// App.jsx</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ApolloClient</span>, <span class=\"hljs-title class_\">InMemoryCache</span>, <span class=\"hljs-title class_\">ApolloProvider</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@apollo/client&quot;</span>;\n\n<span class=\"hljs-comment\">// step 1. initialize apollo client</span>\n<span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApolloClient</span>({\n  <span class=\"hljs-attr\">uri</span>: <span class=\"hljs-string\">&quot;http://localhost:4000/graphql&quot;</span>,\n  <span class=\"hljs-attr\">cache</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InMemoryCache</span>()\n});\n\n<span class=\"hljs-comment\">// step 2. add ApolloProvider</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ApolloProvider</span> <span class=\"hljs-attr\">client</span>=<span class=\"hljs-string\">{client}</span>&gt;</span>Hello world!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ApolloProvider</span>&gt;</span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<div class=\"info\">\n<p>💡<strong><a  href=\"https://chrome.google.com/webstore/detail/apollo-client-devtools/jdkknkkbebbapilgoeccciglkfbmbnfm/related\" target=\"_blank\" rel=\"noreferrer noopener\">Apollo Client Devtools</a></strong></p>\n<p>可在開發者工具的 tab 打開，即可看到如圖的畫面，也可以在這邊操作打 api，可以看到即時的 response 。</p>\n<p><img src=\"https://i.imgur.com/aG2qW58.png\" alt=\"\" /></p>\n</div>\n<h2 id=\"總結\" title=\"總結\"><a href=\"#總結\">總結</a></h2>\n<p>每個技術都有適合的場景應用，這篇並不是鼓吹棄用 RESTful API，只是從前端角度打開 GraphQL 世界的一篇紀錄。當然，從後端角度看，GraphQL 一定有另一種感悟和不同的考慮方向，例如 N+1 等性能問題。GraphQL 在提供靈活性和效率的同時，也帶來了一些挑戰，了解這些優缺點，才能在做出選擇時考慮得更全面。</p>\n<h2 id=\"參考資料\" title=\"參考資料\"><a href=\"#參考資料\">參考資料</a></h2>\n<ol>\n<li><a  href=\"https://www.howtographql.com/\" target=\"_blank\" rel=\"noreferrer noopener\">HOW TO GRAPHQL</a></li>\n<li><a  href=\"https://graphql.org/\" target=\"_blank\" rel=\"noreferrer noopener\">GraphQL 官網</a></li>\n<li><a  href=\"https://ithelp.ithome.com.tw/articles/10200678\" target=\"_blank\" rel=\"noreferrer noopener\">Think in GraphQL</a></li>\n<li><a  href=\"https://www.smashingmagazine.com/2020/07/client-side-graphql-apollo-client-react-apps/\" target=\"_blank\" rel=\"noreferrer noopener\">Understanding Client-Side GraphQl With Apollo-Client In React Apps</a></li>\n</ol>\n","toc":{"title":"GraphQL - Graph Query Language","subtitles":["什麼是 GraphQL ?","GraphQL v.s. RESTful","如何使用","生態圈 + 工具","GraphQL 優/缺點","Apollo + React","總結","參考資料"]},"wordCount":1411}