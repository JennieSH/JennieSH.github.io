{"info":{"title":"[Note] Vue (part 1) - Instance & Template","fileName":"vue-instance-template","description":"Vue 的學習筆記 part 1","createdAt":"2024-12-15T00:00:00.000Z","updatedAt":"2024-12-15T00:00:00.000Z","tags":["Vue"]},"content":"<h6>tags: <code>Vue</code></h6>\n<h1 id=\"[Note] Vue (part 1) - Instance &amp; Template\" title=\"[Note] Vue (part 1) - Instance &amp; Template\">[Note] Vue (part 1) - Instance &amp; Template</h1>\n<h2 id=\"安裝套件\" title=\"安裝套件\"><a href=\"#安裝套件\">安裝套件</a></h2>\n<ol>\n<li>CDN</li>\n</ol>\n<pre class=\"hljs\"><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<ol start=\"2\">\n<li>NPM</li>\n</ol>\n<pre class=\"hljs\"><code>npm install vue\n</code></pre>\n<h3>Vue Devtools</h3>\n<p>Vue 開發者必裝！可以再開發者工具查看 Vue 各項資料和調試</p>\n<ul>\n<li><a  href=\"https://github.com/vuejs/vue-devtools#vue-devtools\" target=\"_blank\" rel=\"noreferrer noopener\">vue-devtools repo</a></li>\n</ul>\n<h2 id=\"Declarative Rendering 聲名式渲染\" title=\"Declarative Rendering 聲名式渲染\"><a href=\"#Declarative Rendering 聲名式渲染\">Declarative Rendering 聲名式渲染</a></h2>\n<ul>\n<li>Vue app 會將其掛載到一個 DOM 元素上，然後對其進行完全控制。HTML <strong>(el : ‘#app’)</strong> 是我們的入口，但其餘都會發生在新創建的 Vue 實例內部。</li>\n<li>讓 data 與 HTML 牽起友誼的小手，做到即時更新</li>\n</ul>\n<h3>DOM 文本 : 雙花括號 {{ text }}</h3>\n<pre class=\"hljs\"><code>&lt;div id=&quot;app&quot;&gt;\n  {{ message }}\n&lt;/div&gt;\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Hello Vue!&#x27;</span>\n  }\n})\n</code></pre>\n<h3>attribute: v-bind:attribute=“args”</h3>\n<blockquote>\n<p>前綴 v- 開頭字為 Vue 指令，表示 Vue 提供的特殊 attribute，它們會在渲染的 DOM 上應用特殊的響應式行為。</p>\n</blockquote>\n<pre class=\"hljs\"><code>&lt;div id=&quot;app-2&quot;&gt;\n  &lt;span v-bind:title=&quot;message&quot;&gt;\n    Hover your mouse over me for a few seconds\n    to see my dynamically bound title!\n  &lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> app2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app-2&#x27;</span>,\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;You loaded this page on &#x27;</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">toLocaleString</span>()\n  }\n})\n</code></pre>\n<h3>Two-way Binding 雙向綁定: v-model</h3>\n<p>實現表單輸入和應用狀態之間的雙向綁定</p>\n<pre class=\"hljs\"><code>&lt;div id=&quot;app-6&quot;&gt;\n  &lt;p&gt;{{ message }}&lt;/p&gt;\n  &lt;input v-model=&quot;message&quot;&gt;\n&lt;/div&gt;\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> app6 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app-6&#x27;</span>,\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Hello Vue!&#x27;</span>\n  }\n})\n</code></pre>\n<h3>DOM 結構: Conditionals and Loops 條件與循環</h3>\n<h4>- 條件： v-if=“agrs”</h4>\n<p>控制切換一個元素是否顯示</p>\n<pre class=\"hljs\"><code>&lt;div id=&quot;app-3&quot;&gt;\n  &lt;p v-if=&quot;seen&quot;&gt;Now you see me&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> app3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app-3&#x27;</span>,\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">seen</span>: <span class=\"hljs-literal\">true</span>\n  }\n})\n</code></pre>\n<h4>- 循環： v-for=“todo in todos”</h4>\n<p>綁定數組的數據來渲染一個項目列表</p>\n<pre class=\"hljs\"><code>&lt;div id=&quot;app-4&quot;&gt;\n  &lt;ol&gt;\n    &lt;li v-for=&quot;todo in todos&quot;&gt;\n      {{ todo.text }}\n    &lt;/li&gt;\n  &lt;/ol&gt;\n&lt;/div&gt;\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> app4 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app-4&#x27;</span>,\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">todos</span>: [\n      { <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn JavaScript&#x27;</span> },\n      { <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Learn Vue&#x27;</span> },\n      { <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Build something awesome&#x27;</span> }\n    ]\n  }\n})\n</code></pre>\n<h2 id=\"Event Listeners 事件監聽器\" title=\"Event Listeners 事件監聽器\"><a href=\"#Event Listeners 事件監聽器\">Event Listeners 事件監聽器</a></h2>\n<p>用 v-on 指令添加一個事件監聽器，通過它調用在 Vue instances 中定義 methods</p>\n<h3>v-on:[action]=“funcName”</h3>\n<blockquote>\n<p>注意在 reverseMessage 方法中，我們更新了應用的狀態，但沒有觸碰 DOM——所有的 DOM 操作都由 Vue 來處理，你編寫的代碼只需要關注邏輯層面即可。</p>\n</blockquote>\n<pre class=\"hljs\"><code>&lt;div id=&quot;app-5&quot;&gt;\n  &lt;p&gt;{{ message }}&lt;/p&gt;\n  &lt;button v-on:click=&quot;reverseMessage&quot;&gt;Reverse Message&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> app5 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app-5&#x27;</span>,\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Hello Vue.js!&#x27;</span>\n  },\n  <span class=\"hljs-attr\">methods</span>: {\n    <span class=\"hljs-attr\">reverseMessage</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">message</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">message</span>.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>).<span class=\"hljs-title function_\">reverse</span>().<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n    }\n  }\n})\n</code></pre>\n<h2 id=\"Composing with Components 組件化應用構建\" title=\"Composing with Components 組件化應用構建\"><a href=\"#Composing with Components 組件化應用構建\">Composing with Components 組件化應用構建</a></h2>\n<p>組件系統允許我們使用小型、獨立和通常可複用的組件構建大型應用。</p>\n<h3>component 使用</h3>\n<h4>1. 註冊 component</h4>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// In Vue, a component is essentially a Vue instance with pre-defined options.</span>\n\n<span class=\"hljs-comment\">// Define a new component called todo-item</span>\n<span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;todo-item&#x27;</span>, {\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;&lt;li&gt;This is a todo&lt;/li&gt;&#x27;</span>\n})\n\n<span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(...)\n</code></pre>\n<h4>2. 應用 component</h4>\n<pre class=\"hljs\"><code>&lt;ol&gt;\n  &lt;!-- Create an instance of the todo-item component --&gt;\n  &lt;todo-item&gt;&lt;/todo-item&gt;\n&lt;/ol&gt;\n</code></pre>\n<h3>props down</h3>\n<ul>\n<li>父組件透過 props 向下對子組件傳遞資料</li>\n<li>子組件 component 需要用 props 去聲明它所獲得的資料</li>\n<li><strong>[ 注意 ]:</strong> 父組件的 template 模板中，傳送 data 的屬性名需要用串燒命名撰寫\n<blockquote>\n<p><a  href=\"https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/231848/\" target=\"_blank\" rel=\"noreferrer noopener\">props 補充</a></p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;todo-item&#x27;</span>, {\n  <span class=\"hljs-comment\">// The todo-item component now accepts a</span>\n  <span class=\"hljs-comment\">// &quot;prop&quot;, which is like a custom attribute.</span>\n  <span class=\"hljs-comment\">// This prop is called todo.</span>\n  <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">&#x27;todo&#x27;</span>], <span class=\"hljs-comment\">// 子組件 component 聲明接收到的 props</span>\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;&lt;li&gt;{{ todo.text }}&lt;/li&gt;&#x27;</span>\n})\n</code></pre>\n<p>搭配 v-bind 屬性綁定，改寫如下：</p>\n<blockquote>\n<p><strong>[ 注意 ]:</strong> v-for 記得搭配 key</p>\n</blockquote>\n<pre class=\"hljs\"><code>&lt;div id=&quot;app-7&quot;&gt;\n  &lt;ol&gt;\n    &lt;!--\n      Now we provide each todo-item with the todo object\n      it's representing, so that its content can be dynamic.\n      We also need to provide each component with a &quot;key&quot;\n    --&gt;\n    &lt;todo-item\n      v-for=&quot;(item, index) in groceryList&quot;\n      v-bind:todo=&quot;item&quot;\n      v-bind:key=&quot;index&quot;\n    &gt;&lt;/todo-item&gt;\n  &lt;/ol&gt;\n&lt;/div&gt;\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">component</span>(<span class=\"hljs-string\">&#x27;todo-item&#x27;</span>, { <span class=\"hljs-comment\">// 子組件</span>\n  <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">&#x27;todo&#x27;</span>],\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;&lt;li&gt;{{ todo.text }}&lt;/li&gt;&#x27;</span>\n})\n\n<span class=\"hljs-keyword\">let</span> app7 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({  <span class=\"hljs-comment\">// 父組件</span>\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app-7&#x27;</span>,\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">groceryList</span>: [\n      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Vegetables&#x27;</span> },\n      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Cheese&#x27;</span> },\n      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Whatever else humans are supposed to eat&#x27;</span> }\n    ]\n  }\n})\n</code></pre>\n<h2 id=\"Vue Instance 實例\" title=\"Vue Instance 實例\"><a href=\"#Vue Instance 實例\">Vue Instance 實例</a></h2>\n<h3>建立 Vue Instance</h3>\n<p>所有的 Vue 組件都是 Vue Instance，都是通過用 Vue 函數創建。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  <span class=\"hljs-comment\">// options</span>\n})\n</code></pre>\n<h3>Data &amp; Methods</h3>\n<p>當一個 Vue Instance 被創建時，它將 data object 中的所有的 property 加入到 Vue 的<strong>響應式系統</strong>中。當這些 property 的值發生改變時，視圖將會產生“響應”，即匹配更新為新的值。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// data object</span>\nley data = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }\n\n<span class=\"hljs-comment\">// 該對象被加入到一個 Vue instance</span>\n<span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  <span class=\"hljs-attr\">data</span>: data\n})\n\n<span class=\"hljs-comment\">// Getting the property on the instance</span>\n<span class=\"hljs-comment\">// returns the one from the original data</span>\nvm.<span class=\"hljs-property\">a</span> == data.<span class=\"hljs-property\">a</span> <span class=\"hljs-comment\">// =&gt; true</span>\n\n<span class=\"hljs-comment\">// 更改 Vue Instance 的 property，會影響原始 data</span>\nvm.<span class=\"hljs-property\">a</span> = <span class=\"hljs-number\">2</span>\ndata.<span class=\"hljs-property\">a</span> <span class=\"hljs-comment\">// =&gt; 2</span>\n\n<span class=\"hljs-comment\">// 反之亦然</span>\ndata.<span class=\"hljs-property\">a</span> = <span class=\"hljs-number\">3</span>\nvm.<span class=\"hljs-property\">a</span> <span class=\"hljs-comment\">// =&gt; 3</span>\n</code></pre>\n<blockquote>\n<p><strong>[ 注意 ]</strong>: <strong>只有</strong>當 Instance 被創建時就已經存在於 data 中的 property 才是<strong>響應式</strong>的，當這些 data 改變時，view 會進行重新渲染。</p>\n</blockquote>\n<blockquote>\n<p>也就是說你添加一個新的 property，比如：</p>\n<pre class=\"hljs\"><code>vm.<span class=\"hljs-property\">b</span> = <span class=\"hljs-string\">&#x27;hi&#x27;</span>\n</code></pre>\n<p>那麼對 b 的改動將不會觸發任何 view 的更新。</p>\n</blockquote>\n<h4>進階應用</h4>\n<ul>\n<li>初始值設定</li>\n</ul>\n<p>但是一開始它為空或不存在，那麼你僅需要設置一些初始值。<br />\n例如：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-attr\">data</span>: {\n  <span class=\"hljs-attr\">newTodoText</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n  <span class=\"hljs-attr\">visitCount</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attr\">hideCompletedTodos</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">todos</span>: [],\n  <span class=\"hljs-attr\">error</span>: <span class=\"hljs-literal\">null</span>\n}\n</code></pre>\n<ul>\n<li>Object.freeze()</li>\n</ul>\n<p>阻止修改現有的 property，也意味著響應系統無法再追踪變化。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> obj = {\n  <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span>\n}\n\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">freeze</span>(obj)\n\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,\n  <span class=\"hljs-attr\">data</span>: obj\n})\n</code></pre>\n<pre class=\"hljs\"><code>&lt;div id=&quot;app&quot;&gt;\n  &lt;p&gt;{{ foo }}&lt;/p&gt;\n  &lt;!-- this will no longer update `foo`! --&gt;\n  &lt;button v-on:click=&quot;foo = 'baz'&quot;&gt;Change it&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>\n<ul>\n<li>Vue 內建的 instance properties 和 methods<br />\n它們都有前綴$，以便與用戶定義的 property 區分開來。\n<blockquote>\n<p><a  href=\"https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B-property\" target=\"_blank\" rel=\"noreferrer noopener\">API 參考</a></p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> data = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#example&#x27;</span>,\n  <span class=\"hljs-attr\">data</span>: data\n})\n\nvm.<span class=\"hljs-property\">$data</span> === data <span class=\"hljs-comment\">// =&gt; true</span>\nvm.<span class=\"hljs-property\">$el</span> === <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;example&#x27;</span>) <span class=\"hljs-comment\">// =&gt; true</span>\n\n<span class=\"hljs-comment\">// $watch is an instance method</span>\nvm.$watch(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">newValue, oldValue</span>) {\n  <span class=\"hljs-comment\">// This callback will be called when `vm.a` changes</span>\n})\n</code></pre>\n<h3>Lifecycle Diagram</h3>\n<img src=\"https://vuejs.org/assets/lifecycle.MuZLBFAS.png\" width=600>\n<blockquote>\n<p>圖片來源：<a  href=\"https://vuejs.org/guide/essentials/lifecycle#lifecycle-diagram\" target=\"_blank\" rel=\"noreferrer noopener\">Vue 官方</a></p>\n</blockquote>\n<h3>Instance Lifecycle Hooks</h3>\n<p>每個 Vue Instance 在被創建時都要經過一系列的初始化過程——例如，需要<strong>設置數據監聽</strong>、<strong>編譯模板</strong>、將<strong>實例掛載到 DOM</strong>並在數據變化時<strong>更新 DOM</strong>等。在不同生命階段，可以調用不同的 Lifecycle Hooks。</p>\n<p>Lifecycle Hooks 的 this 上下文指向調用它的 Vue Instance。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// created 可以用來在一個 Instance 被創建之後執行代碼：</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>\n  },\n  <span class=\"hljs-attr\">created</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// `this` 指向 vm instance</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;a is: &#x27;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">a</span>)\n  }\n})\n<span class=\"hljs-comment\">// =&gt; &quot;a is: 1&quot;</span>\n</code></pre>\n<blockquote>\n<p><strong>[ 注意 ]：</strong></p>\n<p>不要在選項 property 或 callback 上使用<strong>箭頭函數</strong>，比如 created: () =&gt; console.log(this.a) 或 vm.$watch(‘a’, newValue =&gt; this.myMethod())。</p>\n<p>因為箭頭函數並沒有 this，this 會作為變量一直向上級詞法作用域查找，直至找到為止，經常導致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之類的錯誤。</p>\n</blockquote>\n<h2 id=\"Template Syntax 模板語法\" title=\"Template Syntax 模板語法\"><a href=\"#Template Syntax 模板語法\">Template Syntax 模板語法</a></h2>\n<p>Vue.js 使用了基於 HTML 的模板語法，Vue 將模板編譯成虛擬 DOM 渲染函數。結合響應系統，Vue 能計算出最少需要重新渲染多少組件，並把 DOM 操作次數減到最少。</p>\n<blockquote>\n<p>如果你熟悉虛擬 DOM 並且偏愛 JavaScript 的原始力量，你也可以不用模板，直接寫渲染(render)函數，使用可選的 JSX 語法。</p>\n</blockquote>\n<h3>Interpolations 插值</h3>\n<ol>\n<li>\n<p><code>Text 文本 - {{ text }}</code></p>\n<ul>\n<li>綁定的 property 與插值處的內容是連動的，一有變化都會即時更新</li>\n<li>使用“Mustache”語法(雙大括號) 的文本插值</li>\n</ul>\n</li>\n</ol>\n<pre class=\"hljs\"><code>&lt;span&gt;<span class=\"hljs-title class_\">Message</span>: {{ text }}&lt;/span&gt;\n</code></pre>\n<ul>\n<li><code>v-once</code></li>\n</ul>\n<p>執行一次性地插值，當數據改變時，插值處的內容不會更新。但請留心這會影響到該節點上的其它數據綁定。</p>\n<pre class=\"hljs\"><code>&lt;span v-once&gt;<span class=\"hljs-title class_\">This</span> will never <span class=\"hljs-attr\">change</span>: {{ msg }}&lt;/span&gt;\n</code></pre>\n<br/>\n<ol start=\"2\">\n<li>\n<p>原始 HTML - <code>v-html</code></p>\n<p>雙大括號會將數據解釋為普通文本，而非 HTML 代碼。為了輸出真正的 HTML，你需要使用 <strong>v-html</strong> 指令：</p>\n</li>\n</ol>\n<pre class=\"hljs\"><code>&lt;p&gt;Using mustaches: {{ rawHtml }}&lt;/p&gt;\n&lt;p&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;!--- Using mustaches: &lt;span style=&quot;color:red&quot;&gt;This should be red.&lt;/span&gt;\n      Using v-html directive: This should be red. ---&gt;\n</code></pre>\n<blockquote>\n<p><strong>[ 注意 ]:</strong><br />\n你的站點上動態渲染的任意 HTML 可能會非常危險，因為它很容易導致*<em>XSS 攻擊</em>，絕不要對用戶提供的內容使用插值。</p>\n</blockquote>\n<br/>\n<ol start=\"3\">\n<li>\n<p>Attribute - <code>v-bind:[attri]=&quot;args&quot;</code></p>\n<p>Mustache 語法不能作用在 HTML attribute 上，遇到這種情況應該使用<strong>v-bind</strong>指令：</p>\n</li>\n</ol>\n<pre class=\"hljs\"><code>&lt;div v-<span class=\"hljs-attr\">bind</span>:id=<span class=\"hljs-string\">&quot;dynamicId&quot;</span>&gt;&lt;/div&gt;\n</code></pre>\n<ul>\n<li>v-bind + boolean\n<ul>\n<li>如果 isButtonDisabled 的值是 null、undefined 或 false，則 disabledattribute 甚至不會被包含在渲染出來的&lt;button&gt;元素中。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>使用 JavaScript 表達式</li>\n</ol>\n<pre class=\"hljs\"><code>{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n&lt;div v-bind:id=&quot;'list-' + id&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p>但有個限制就是，每個綁定都只能包含單個表達式，所以下面的例子都不會生效。</p>\n<pre class=\"hljs\"><code>&lt;!-- 這是語句，不是表達式 --&gt;\n{{ <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span> }}\n\n&lt;!-- 流程控制也不會生效，要改用三元運算子 --&gt;\n{{ <span class=\"hljs-keyword\">if</span> (ok) { <span class=\"hljs-keyword\">return</span> message } }}\n</code></pre>\n<blockquote>\n<p><strong>[ 注意 ]：</strong> Vue 有一個有一個<a  href=\"https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js#L9\" target=\"_blank\" rel=\"noreferrer noopener\">全局變量白名單</a>，如 Math 和 Date 。你不應該在模板表達式中試圖訪問用戶定義的全局變量。</p>\n</blockquote>\n<h3>Directives 指令</h3>\n<ul>\n<li>帶有 <code>v-</code> 前綴的特殊 attribute</li>\n<li>值預期是單個 JavaScript 表達式 ( v-for 是例外)</li>\n<li>當表達式的值</li>\n</ul>\n<h4>Argument 參數</h4>\n<blockquote>\n<p>一些指令能夠接收一個“參數”，在指令名稱之後以冒號表示。</p>\n</blockquote>\n<ul>\n<li>attribute 綁定</li>\n</ul>\n<pre class=\"hljs\"><code>&lt;!-- v-bind 指令可以用於響應式地更新 HTML attribute --&gt;\n&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt;\n</code></pre>\n<ul>\n<li>監聽 DOM 事件</li>\n</ul>\n<pre class=\"hljs\"><code>&lt;!-- 這裡的參數是監聽的事件名 --&gt;\n&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;\n</code></pre>\n<h4>Dynamic Arguments 動態參數</h4>\n<blockquote>\n<p>從 2.6.0 開始，可以用方括號括起來的 JavaScript 表達式作為一個指令的參數</p>\n</blockquote>\n<ul>\n<li>\n<p>attribute 動態綁定</p>\n<p>attributeName 會被作為一個 JavaScript 表達式進行動態求值，求得的值將會作為最終的參數來使用。</p>\n<p>例如，如果你的 Vue 實例有一個 dataproperty attributeName，其值為 “href”，那麼這個綁定將等價於 v-bind:href。</p>\n</li>\n</ul>\n<pre class=\"hljs\"><code>&lt;!-- Note that there are some constraints to the argument expression --&gt;\n&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;\n</code></pre>\n<ul>\n<li>\n<p>事件名處理函數動態綁定</p>\n<p>當 eventName 的值為&quot;focus&quot;時，v-on:[eventName] 將等於 v-on:focus。</p>\n</li>\n</ul>\n<pre class=\"hljs\"><code>&lt;a v-on:[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;\n</code></pre>\n<ul>\n<li>\n<p>動態參數的值的約束</p>\n<ul>\n<li>\n<p>動態參數預期會求出一個字符串，異常情況下值為 null。這個特殊的 null 值可以被顯性地用於移除綁定。</p>\n</li>\n<li>\n<p>非字符串類型的值都將會觸發一個警告</p>\n</li>\n</ul>\n</li>\n<li>\n<p>動態參數表達式的約束</p>\n</li>\n</ul>\n<ol>\n<li>某些字符，如空格和引號，放在 HTML attribute 名里是無效的</li>\n</ol>\n<pre class=\"hljs\"><code>&lt;!-- 會觸發編譯警告 --&gt;\n&lt;a v-bind:['foo' + bar]=&quot;value&quot;&gt; ... &lt;/a&gt;\n\n</code></pre>\n<blockquote>\n<p><strong>[ Solution ] :</strong> 使用沒有空格或引號的表達式，或用計算屬性替代這種複雜表達式。</p>\n</blockquote>\n<ol start=\"2\">\n<li>在 DOM 中使用模板時(直接在一個 HTML 文件裡撰寫模板)，還需要<strong>避免使用大寫字符來命名鍵名，因為瀏覽器會把 attribute 名全部強制轉為小寫。</strong></li>\n</ol>\n<pre class=\"hljs\"><code>&lt;!--\n在 DOM 中使用模板時這段代碼會被轉換成 `v-bind:[someattr]`。\n\n除非在實例中有一個名為“someattr”的 property，否則代碼不會作用。\n--&gt;\n&lt;a v-bind:[someAttr]=&quot;value&quot;&gt; ... &lt;/a&gt;\n</code></pre>\n<h4>Modifiers 修飾符</h4>\n<p>修飾符 ( modifier ) 是以半角句號 ==.== 指明的特殊後綴，用於指出一個指令應該以特殊方式綁定。</p>\n<blockquote>\n<p>.prevent 修飾符告訴 v-on 指令對於觸發的事件調用 event.preventDefault()：</p>\n</blockquote>\n<pre class=\"hljs\"><code>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;\n</code></pre>\n<h3>Shorthands 縮寫</h3>\n<h4>v-bind 縮寫</h4>\n<pre class=\"hljs\"><code>&lt;!-- full syntax --&gt;\n&lt;a v-bind:href=&quot;url&quot;&gt; ... &lt;/a&gt;\n\n&lt;!-- shorthand --&gt;\n&lt;a :href=&quot;url&quot;&gt; ... &lt;/a&gt;\n\n&lt;!-- shorthand with dynamic argument (2.6.0+) --&gt;\n&lt;a :[key]=&quot;url&quot;&gt; ... &lt;/a&gt;\n</code></pre>\n<h4>v-on 縮寫</h4>\n<pre class=\"hljs\"><code>&lt;!-- full syntax --&gt;\n&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;\n\n&lt;!-- shorthand --&gt;\n&lt;a @click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;\n\n&lt;!-- shorthand with dynamic argument (2.6.0+) --&gt;\n&lt;a @[event]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;\n</code></pre>\n","toc":{"title":"[Note] Vue (part 1) - Instance &amp; Template","subtitles":["安裝套件","Declarative Rendering 聲名式渲染","Event Listeners 事件監聽器","Composing with Components 組件化應用構建","Vue Instance 實例","Template Syntax 模板語法"]},"wordCount":2139}