{"info":{"title":"Vitest - Snapshot","fileName":"vitest-snapshot","description":"Snapshot 方法介紹","createdAt":"2024-12-15T00:00:00.000Z","updatedAt":"2024-12-15T00:00:00.000Z","tags":["Test","Vitest","mock","snapshot"]},"content":"<h1 id=\"Vitest - Snapshot\" title=\"Vitest - Snapshot\">Vitest - Snapshot</h1>\n<p>快照(Snapshot)是首次運行測試時，將輸出的結果保存，與第二次運行結果做匹配。兩次快照結果不匹配的話，即為測試失敗，如為預期修改造成的測試失敗，可以將快照版本更新。</p>\n<ul>\n<li>快照檔案<strong>需要進版控</strong></li>\n<li>自動比較前一份快照，不用手動維護 input / output</li>\n</ul>\n<blockquote>\n<p>@<a  href=\"https://vitest.dev/guide/snapshot.html\" target=\"_blank\" rel=\"noreferrer noopener\">Vitest Snapshot Doc</a><br />\n@<a  href=\"https://www.youtube.com/watch?v=FDEf3iWEgFI\" target=\"_blank\" rel=\"noreferrer noopener\">Fast Unit Testing With Vitest</a> - 19:40</p>\n</blockquote>\n<h2 id=\"預設快照 (Snapshot)\" title=\"預設快照 (Snapshot)\"><a href=\"#預設快照 (Snapshot)\">預設快照 (Snapshot)</a></h2>\n<p>使用 <code>toMatchSnapshot</code> API，運行完，會自動產生一份獨立的快照檔案，存放在測試旁邊的 <code>__snapshots__</code>資料夾中。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;updateUserData(Snapshot)&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;loads user data as expected&quot;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">updateUserData</span>(<span class=\"hljs-string\">&quot;Jennie&quot;</span>);\n    <span class=\"hljs-comment\">// 會自動生成一個 .snap 檔案</span>\n    <span class=\"hljs-title function_\">expect</span>(user).<span class=\"hljs-title function_\">toMatchSnapshot</span>();\n  });\n});\n</code></pre>\n<p>運行完：</p>\n<p><img src=\"https://hackmd.io/_uploads/HJK8ll3Vyl.png\" alt=\"image\" /></p>\n<h2 id=\"行內快照 (Inline Snapshot)\" title=\"行內快照 (Inline Snapshot)\"><a href=\"#行內快照 (Inline Snapshot)\">行內快照 (Inline Snapshot)</a></h2>\n<p>使用 <code>toMatchInlineSnapshot</code> API，運行完，會測試檔案中自動生成快照。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;updateUserData(Inline Snapshot)&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;loads user data as expected&quot;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n    <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">updateUserData</span>(<span class=\"hljs-string\">&quot;Jennie&quot;</span>);\n    <span class=\"hljs-comment\">// 會在此檔案中字自動生成快照</span>\n    <span class=\"hljs-title function_\">expect</span>(user).<span class=\"hljs-title function_\">toMatchInlineSnapshot</span>();\n  });\n});\n</code></pre>\n<p>運行完：</p>\n<p>橘框部分為自動產生的快照。</p>\n<p><img src=\"https://hackmd.io/_uploads/H1F_el2Nkx.png\" alt=\"image\" /></p>\n<p>相較於預設快照的優點就是<strong>在測試檔案中就能直接看到預期結果，不需要再另開啟 snapshot 檔案，減少跨檔案查看的時間</strong>。</p>\n<h2 id=\"更新快照\" title=\"更新快照\"><a href=\"#更新快照\">更新快照</a></h2>\n<h3>手動更新</h3>\n<p>在監聽模式下，可以在終端機按 <code>u</code> 鍵手動更新快照</p>\n<h3>自動更新</h3>\n<p>改用下面指令，可以進入快照更新模式，任何修改都會觸發自動更新快照：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\"># -u 和 -update 都可以，擇一即可</span>\nnpx vitest -u\nnpx vitest --update\n</code></pre>\n<p>自動更新在以下兩情境中很好用：</p>\n<ul>\n<li>當測試複雜邏輯的函式或組件時，只要修改傳入的參數，就能快速看到返回的結果</li>\n<li>在功能還在開發中，例如多加一個欄位，測試資料會自動補齊</li>\n</ul>\n<h2 id=\"參考資料\" title=\"參考資料\"><a href=\"#參考資料\">參考資料</a></h2>\n<ul>\n<li><a  href=\"https://vite.dev/\" target=\"_blank\" rel=\"noreferrer noopener\">Vitest</a></li>\n<li><a  href=\"https://www.youtube.com/watch?v=FDEf3iWEgFI\" target=\"_blank\" rel=\"noreferrer noopener\">Fast Unit Testing With Vitest</a></li>\n</ul>\n","toc":{"title":"Vitest - Snapshot","subtitles":["預設快照 (Snapshot)","行內快照 (Inline Snapshot)","更新快照","參考資料"]},"wordCount":288}