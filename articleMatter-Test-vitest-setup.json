{"info":{"title":"Vitest - 介紹和建置","fileName":"vitest-setup","description":"什麼是 Vitest？","createdAt":"2024-12-15T00:00:00.000Z","updatedAt":"2024-12-15T00:00:00.000Z","tags":["Test","Vitest"]},"content":"<h1 id=\"Vitest - 介紹和建置\" title=\"Vitest - 介紹和建置\">Vitest - 介紹和建置</h1>\n<h2 id=\"什麼是 Vitest ?\" title=\"什麼是 Vitest ?\"><a href=\"#什麼是 Vitest ?\">什麼是 Vitest ?</a></h2>\n<p>Vitest 是一個基於 Vite 構建的測試框架，不僅可以與 Vite 搭配使用，統一開發、測試、建構的設定，也可以<strong>獨立使用，不需要依賴 Vite</strong>。功能包括單元測試時，最常見的模擬、快照和覆蓋率報告等。</p>\n<p>與前端另外一個常見的單元測試框架 Jest 相比，是個急起直追的後起之秀，並解決使用 Jest 遇到的幾個痛點，也高兼容了 Jest 的 API。</p>\n<blockquote>\n<p>Vitest 啟發於在 Vite 開發測試時，現有單元測試框架中，想用來測試 Vite 都會存在一些問題，無法完美被解決，所以才有誕生 Vitest 的想法，可以參考 Vitest 團隊中 Anthony Fu 在 <a  href=\"https://www.youtube.com/watch?v=FDEf3iWEgFI\" target=\"_blank\" rel=\"noreferrer noopener\">Fast Unit Testing With Vitest</a> 2:45 的訪談。</p>\n</blockquote>\n<h2 id=\"Vitest v.s. Jest\" title=\"Vitest v.s. Jest\"><a href=\"#Vitest v.s. Jest\">Vitest v.s. Jest</a></h2>\n<h3>1. Performance（效能）</h3>\n<ul>\n<li><strong>Vitest</strong>：支援熱模組替換（HMR）和 ESM，不需要經過 bundle，測試執行速度通常比 Jest 更快。</li>\n<li><strong>Jest</strong>：模組解析較複雜，功能較多，可能在大型專案中稍慢。需要額外的轉換步驟來處理程式碼，且不支援 async 轉換和 ESM，需維護兩套設定檔。</li>\n</ul>\n<h3>2. Payload（負載）</h3>\n<ul>\n<li><strong>Vitest</strong>：約 26 MB / 61 個依賴套件</li>\n<li><strong>Jest</strong>：約 32 MB / 196 個依賴套件</li>\n</ul>\n<h3>3. API</h3>\n<ul>\n<li>兩者 API 高度相似，間接降低遷移的難度。</li>\n</ul>\n<h3>4. Configuration（配置）</h3>\n<ul>\n<li><strong>Vitest</strong>：較為簡單，如果有使用 Vite，甚至可以共用設定文件。</li>\n<li><strong>Jest</strong>：較為靈活，但相對複雜，需要單獨的設定文件。</li>\n</ul>\n<p>範例：</p>\n<ul>\n<li>使用 TypeScript，Vitest 可以開箱即用，但 Jest 需要再做轉譯的設定。</li>\n<li>Vitest 在開發環境下跑測試時，預設為監聽模式（watch mode），在 CI 階段自動轉換為單次運行模式（single run mode），Jest 則需要另外加參數設定。</li>\n</ul>\n<h3>5. ESM Support（ESM 支援）</h3>\n<ul>\n<li><strong>Vitest</strong>：原生支持 ESM。</li>\n<li><strong>Jest</strong>：尚未支援，<a  href=\"https://github.com/jestjs/jest/issues/9430\" target=\"_blank\" rel=\"noreferrer noopener\">相關功能</a>還在開發中。在瀏覽器環境下，模組需先轉換成 CommonJS 才能執行。</li>\n</ul>\n<h3>6. Community（社群）</h3>\n<ul>\n<li><strong>Vitest</strong>：社群相對較新，文件和教學文略少於 Jest。</li>\n<li><strong>Jest</strong>：老牌測試框架，擁有大量的插件、教學文和豐富的生態系，遇到問題時更容易找到解決方案。</li>\n</ul>\n<h2 id=\"環境建置\" title=\"環境建置\"><a href=\"#環境建置\">環境建置</a></h2>\n<h3>安裝</h3>\n<pre class=\"hljs\"><code>npm install -D vitest\n</code></pre>\n<p>如果想直接創新的專案練習，可以改用下面的指令，或使用<a  href=\"https://stackblitz.com/edit/vitest-dev-vitest-1f6vvm?file=README.md&amp;initialPath=__vitest__/\" target=\"_blank\" rel=\"noreferrer noopener\">線上版 Vitest</a><strong>：</strong></p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\"># 使用 vite 創建一個新專案</span>\nnpm create vite\n<span class=\"hljs-comment\"># 選擇完專案設定後，再安裝 vitest</span>\nnpm install -D vitest\n</code></pre>\n<blockquote>\n<p><strong>[補充]：</strong></p>\n<ul>\n<li>版本要求： Vite &gt;=v5.0.0 和 Node &gt;=v18.0.0</li>\n</ul>\n</blockquote>\n<h3>新增測試指令</h3>\n<p>在 <code>package.json</code>，新增測試指令：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// package.json</span>\n<span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;dev&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;next dev&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;build&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;next build&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;test&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;vitest&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-comment\">// 新增這行</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  ...\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h3>新增 Vitest 設定檔</h3>\n<p>在根目錄中新增 <code>vitest.config.ts</code> 檔案，並在 <code>test</code> 屬性下，新增相關的測試設定：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// vitest.config.ts</span>\n<span class=\"hljs-keyword\">import</span> { defineConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vitest/config&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>({\n  <span class=\"hljs-attr\">test</span>: {\n      ...  <span class=\"hljs-comment\">// 在此新增測試相關的設定</span>\n  },\n})\n</code></pre>\n<p><strong>常見的設定：</strong></p>\n<ul>\n<li><strong>global</strong> - 預設為 <code>false</code></li>\n</ul>\n<p>預設使用時，Vitest 並沒有直接提供全域 API，都需要指定 import。如果要把 API 暴露在全域，可以新增 <code>globals: true</code>：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>({\n  <span class=\"hljs-attr\">test</span>: {\n      ...,\n      <span class=\"hljs-attr\">globals</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 當 API 調用時，不需要再指定引入</span>\n    },\n})\n</code></pre>\n<p>為了讓全域 API 可以支援 TypeScript，需要將 <code>vitest/globals</code> 添加到 <code>tsconfig.json</code> 中的 <code>types</code> 的選項中：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// tsconfig.json</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;compilerOptions&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;types&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;vitest/globals&quot;</span><span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<ul>\n<li><strong>environment -</strong> 預設為 <code>node</code></li>\n</ul>\n<p>測試的執行環境，如果是寫前端，可以使用 jsdom 或 happy-dom：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>({\n  <span class=\"hljs-attr\">test</span>: {\n      ...,\n      <span class=\"hljs-attr\">environment</span>: <span class=\"hljs-string\">&quot;jsdom&quot;</span>,\n    },\n})\n</code></pre>\n<blockquote>\n<p><strong>[補充]</strong> &gt; <a  href=\"https://cn.vitest.dev/config/#environmentmatchglobs\" target=\"_blank\" rel=\"noreferrer noopener\">environmentMatchGlobs</a> 可以針對不同檔案跑在不同環境上。</p>\n</blockquote>\n<blockquote>\n<p><strong>[補充]</strong><br />\n如果專案有使用 Vite，Vitest 會自動讀取根目錄的 <code>vite.config.ts</code>，可與 Vite 共用統一的設定檔。如果想配置不同設定，可以另外新增 <code>vitest.config.ts</code>，該檔案優先級為最高。</p>\n</blockquote>\n<blockquote>\n<p>更多設定可參考 @<a  href=\"https://vitest.dev/config/#configuring-vitest\" target=\"_blank\" rel=\"noreferrer noopener\">Configuring Vitest</a></p>\n</blockquote>\n<h2 id=\"測試檔案名規則\" title=\"測試檔案名規則\"><a href=\"#測試檔案名規則\">測試檔案名規則</a></h2>\n<p>測試檔案文件名，需要包含 <code>.test.</code> 或 <code>.spec.</code>，例如：<code>sum.test.js</code>。</p>\n<h2 id=\"運行測試\" title=\"運行測試\"><a href=\"#運行測試\">運行測試</a></h2>\n<p>在開發環境下預設為<strong>監聽模式(watch mode)</strong>，當修改源程式碼或測試文件時，<strong>只會自動重新運行相關的測試</strong>。</p>\n<pre class=\"hljs\"><code>npm run <span class=\"hljs-built_in\">test</span>\n</code></pre>\n<h2 id=\"測試覆蓋率 - Coverage\" title=\"測試覆蓋率 - Coverage\"><a href=\"#測試覆蓋率 - Coverage\">測試覆蓋率 - Coverage</a></h2>\n<h3>安裝套件</h3>\n<p>要覆蓋率報告，需要另外安裝相應套件包：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\"># For v8</span>\nnpm i -D @vitest/coverage-v8\n\n<span class=\"hljs-comment\"># For istanbul</span>\nnpm i -D @vitest/coverage-istanbul\n</code></pre>\n<h3>常用設定</h3>\n<ul>\n<li><code>provider</code> - 覆蓋率報告的提供者，預設是 v8</li>\n<li><code>reporter</code> - 覆蓋率報告輸出的類型</li>\n<li><code>reportsDirectory</code> - 覆蓋率報告檔案的位置，預設是在根目錄創建一個 <code>coverage</code> 的資料夾存放</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// vitest.config.ts</span>\n<span class=\"hljs-keyword\">import</span> { defineConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vitest/config&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>({\n  <span class=\"hljs-attr\">test</span>: {\n    <span class=\"hljs-attr\">coverage</span>: {\n      <span class=\"hljs-attr\">provider</span>: <span class=\"hljs-string\">&#x27;v8&#x27;</span>, <span class=\"hljs-comment\">// 支援 istanbul 或自定義</span>\n      <span class=\"hljs-attr\">reporter</span>: [<span class=\"hljs-string\">&quot;json&quot;</span>, <span class=\"hljs-string\">&quot;html&quot;</span>],\n      <span class=\"hljs-attr\">reportsDirectory</span>: <span class=\"hljs-string\">&quot;./tests/unit/coverage&quot;</span>\n    },\n  },\n  ...\n})\n</code></pre>\n<blockquote>\n<p>更多覆蓋率報告的設定可參考 @<a  href=\"https://vitest.dev/config/#coverage\" target=\"_blank\" rel=\"noreferrer noopener\">Vitest Coverage</a></p>\n</blockquote>\n<h3>產生覆蓋率報告</h3>\n<pre class=\"hljs\"><code>npx vitest --coverage\n</code></pre>\n<h2 id=\"<strong>VS Code</strong> Extension\" title=\"<strong>VS Code</strong> Extension\"><a href=\"#<strong>VS Code</strong> Extension\"><strong>VS Code</strong> Extension</a></h2>\n<p>如果不習慣用終端機下指令，推薦安裝官方 VScode 套件 - <a  href=\"https://marketplace.visualstudio.com/items?itemName=vitest.explorer\" target=\"_blank\" rel=\"noreferrer noopener\">Vitest</a>，錯誤會直接顯示 VScode 上。</p>\n<p><img src=\"https://i.ibb.co/bJCbCf2/202203292020.gif\" alt=\"\" /></p>\n<h2 id=\"<strong>參考資料</strong>\" title=\"<strong>參考資料</strong>\"><a href=\"#<strong>參考資料</strong>\"><strong>參考資料</strong></a></h2>\n<ul>\n<li><a  href=\"https://vitest.dev/\" target=\"_blank\" rel=\"noreferrer noopener\">Vitest 官方</a></li>\n<li><a  href=\"https://www.youtube.com/watch?v=FDEf3iWEgFI\" target=\"_blank\" rel=\"noreferrer noopener\">Fast Unit Testing With Vitest</a></li>\n<li><a  href=\"https://www.youtube.com/watch?v=G-4zgIPsjkU\" target=\"_blank\" rel=\"noreferrer noopener\">How to use Vitest with Jest-DOM and React Testing Library</a></li>\n<li><a  href=\"https://www.youtube.com/watch?v=adBPXEUhj6Q\" target=\"_blank\" rel=\"noreferrer noopener\">Switching From Jest To Vitest - Should You Take The Step?</a></li>\n</ul>\n","toc":{"title":"Vitest - 介紹和建置","subtitles":["什麼是 Vitest ?","Vitest v.s. Jest","環境建置","測試檔案名規則","運行測試","測試覆蓋率 - Coverage","VS Code Extension","參考資料"]},"wordCount":906}