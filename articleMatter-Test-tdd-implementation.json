{"info":{"title":"手把手一起 TDD","fileName":"tdd-implementation","description":"Test-Driven Development 在 JS 和 DOM 實作。","createdAt":"2021-11-14T00:00:00.000Z","updatedAt":"2021-11-14T00:00:00.000Z","tags":["Test","TDD"]},"content":"<h1 id=\"手把手一起 TDD\" title=\"手把手一起 TDD\">手把手一起 TDD</h1>\n<p><img src=\"https://i.imgur.com/9HCEV2B.png\" alt=\"TDD cycle\" /></p>\n<p>想了解更多 TDD，可以參考 <a  href=\"https://hackmd.io/2QXKK978Sei4LMHQWhN-gQ\" target=\"_blank\" rel=\"noreferrer noopener\">TDD - 測試驅動開發</a>，此篇是實作篇，手把手帶你體驗 TDD 💨💨</p>\n<h2 id=\"TDD Flow\" title=\"TDD Flow\"><a href=\"#TDD Flow\">TDD Flow</a></h2>\n<p>再看一眼 TDD 流程，稍微有個印象，我們就繼續往下看 ～<br />\n<img src=\"https://i.imgur.com/obbaftB.png\" alt=\"TDD flow\" /></p>\n<h4>Step 1. 列出需求清單</h4>\n<h4>Step 2. 新增測試，測試 Fail</h4>\n<h4>Step 3. 撰寫剛好能通過測試的程式</h4>\n<h4>Step 4. 重構程式</h4>\n<h2 id=\"範例 - Function\" title=\"範例 - Function\"><a href=\"#範例 - Function\">範例 - Function</a></h2>\n<h3><code>目標：Function - validatePassword</code></h3>\n<p>要開發一個密碼驗證的函式，會先請列一下密碼要被滿足的條件。</p>\n<p><strong>需求清單</strong>：</p>\n<ol>\n<li>Test 1 - 長度至少 8 碼</li>\n<li>Test 2 - 至少含 1 個數字</li>\n<li>Test 3 - 至少含 1 個英文字母(大寫/小寫)</li>\n</ol>\n<h3>Fixture：先準備好測試環境</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.js</span>\n\n<span class=\"hljs-comment\">/**\n * 密碼驗證\n * <span class=\"hljs-doctag\">@param</span> string $paramter ,ex: &#x27;a12345678&#x27;\n * <span class=\"hljs-doctag\">@return</span> boolean 回傳結果 true 有效密碼, false 無效密碼\n * <span class=\"hljs-doctag\">@example</span> validatePassword(&#x27;a12345678&#x27;) =&gt; true\n */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">validatePassword</span> = (<span class=\"hljs-params\"></span>) =&gt; {};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> validatePassword;\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.spec.js</span>\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;validatePassword&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-comment\">// 1. 至少 8 碼</span>\n  <span class=\"hljs-comment\">// 2. 至少含 1 個數字</span>\n  <span class=\"hljs-comment\">// 3. 至少含 1 個英文字母(大寫/小寫)</span>\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/FcZOQUS.png\" alt=\"TDD Function fixture\" /></p>\n<h3>TDD cycle</h3>\n<h4>Red - [ Test 0 防呆 ]</h4>\n<p>在驗證的時候，基本都會有個防呆，只要值是 <code>&quot;&quot;</code>、<code>undefined</code>、<code>null</code>，永遠都會被視為 <code>invalid value</code>，在第一行就會被 return 了，程式不會再往下跑，所以我們可以把這當作最簡單的開局測試案例。</p>\n<ul>\n<li>在 <code>validate.spec.js</code> 新增傳入空字串要返回 <code>false</code> 的測試。</li>\n<li><code>yarn test</code> =&gt; <strong>fail test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.spec.js</span>\n\n<span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;return false given an empty string&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>);\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/lrwP0l1.png\" alt=\"TDD Red 0\" /></p>\n<h4>Green - [ Test 0 防呆 ]</h4>\n<ul>\n<li>新增無腦解，呼叫 <code>validatePassword</code> 直接 <code>return false</code></li>\n<li><code>yarn test</code> =&gt; <strong>pass test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.js</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">validatePassword</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n};\n</code></pre>\n<p><img src=\"https://i.imgur.com/Wa1kiNC.png\" alt=\"TDD Green 0\" /></p>\n<h4>Refactor - [ Test 0 防呆 ]</h4>\n<p>Skip，目前還沒有重構必要。</p>\n<p>&lt;br/&gt;</p>\n<hr />\n<p>&lt;br/&gt;</p>\n<h4>Red - [ Test 1 長度至少 8 碼 ]</h4>\n<ul>\n<li>在 <code>validate.spec.js</code> 中，新增密碼長度要大於 8 碼的測試</li>\n<li><code>yarn test</code> =&gt; <strong>fail test</strong></li>\n</ul>\n<div class=\"info\">\n<p>ℹ️ 這邊第一個一定會過測試參數 <code>a12345678</code>，建議可以直接使用 PM 規格書提供的成功範例當做測試參數，永遠保證這個一定是合法密碼。</p>\n</div>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.spec.js</span>\n\n<span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;at least 8 characters long&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;a12345678&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>);\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/95MNuxI.png\" alt=\"TDD Red 1\" /></p>\n<h4>Green - [ Test 1 長度至少 8 碼 ]</h4>\n<ul>\n<li><code>validate.js</code> 新增檢查參數大於 8 的判斷式</li>\n<li><code>yarn test</code> =&gt; <strong>pass test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.js</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">validatePassword</span> = (<span class=\"hljs-params\">password</span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (password.<span class=\"hljs-property\">length</span> &gt;= <span class=\"hljs-number\">8</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n};\n</code></pre>\n<p><img src=\"https://i.imgur.com/5HZodu7.png\" alt=\"TDD Green 1\" /></p>\n<h4>Refactor - [ Test 1 長度至少 8 碼 ]</h4>\n<p>Skip，目前還沒有重構必要，程式碼還算易懂。</p>\n<p>&lt;br/&gt;</p>\n<hr />\n<p>&lt;br/&gt;</p>\n<h4>Red - [ Test 2 至少含 1 個數字 ]</h4>\n<ul>\n<li>在 <code>validate.spec.js</code> 中，新增是否含數字的測試</li>\n<li><code>yarn test</code> =&gt; <strong>fail test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.spec.js</span>\n\n<span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;contains at least one number&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;ABCDEFGHIJ&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>);\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/txLSZdu.png\" alt=\"TDD Red 2\" /></p>\n<h4>Green - [ Test 2 至少含 1 個數字 ]</h4>\n<ul>\n<li><code>validate.js</code> 新增檢查數字的正則</li>\n<li><code>yarn test</code> =&gt; <strong>pass test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.js</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">validatePassword</span> = (<span class=\"hljs-params\">password</span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (password.<span class=\"hljs-property\">length</span> &gt;= <span class=\"hljs-number\">8</span> &amp;&amp; <span class=\"hljs-regexp\">/[0-9]/g</span>.<span class=\"hljs-title function_\">test</span>(password)) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n};\n</code></pre>\n<div class=\"info\">\n<p>ℹ️ 正則測試方法可參考 <a  href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\" target=\"_blank\" rel=\"noreferrer noopener\">MDN - <code>regexObj.test(str)</code></a></p>\n</div>\n<p><img src=\"https://i.imgur.com/4UdIAWx.png\" alt=\"TDD Green 2\" /></p>\n<h4>Refactor - [ Test 2 至少含 1 個數字 ]</h4>\n<ul>\n<li>目前 <code>長度大於 8 碼</code> 和 <code>數字正則</code> 擠在同一個 if 判斷式裡，降低易讀性，可將兩個拆開，各用變數做代表做重構</li>\n<li><code>yarn test</code> =&gt; <strong>pass test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.js</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">validatePassword</span> = (<span class=\"hljs-params\">password</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> validLength = password.<span class=\"hljs-property\">length</span> &gt;= <span class=\"hljs-number\">8</span>;\n  <span class=\"hljs-keyword\">const</span> containsNumber = <span class=\"hljs-regexp\">/[0-9]/g</span>.<span class=\"hljs-title function_\">test</span>(password);\n\n  <span class=\"hljs-keyword\">return</span> validLength &amp;&amp; containsNumber;\n};\n</code></pre>\n<p><img src=\"https://i.imgur.com/fDfWhnC.png\" alt=\"TDD Refactor 2\" /></p>\n<p>&lt;br/&gt;</p>\n<hr />\n<p>&lt;br/&gt;</p>\n<h4>Red - [ Test 3 至少含 1 個英文字母(大寫/小寫) ]</h4>\n<ul>\n<li>在 <code>validate.spec.js</code> 中，新增是否含英文字母的測試</li>\n<li><code>yarn test</code> =&gt; <strong>fail test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.spec.js</span>\n\n<span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;contains at least one letter&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;123456789&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>);\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/OsrfSHE.png\" alt=\"TDD RED 3\" /></p>\n<h4>Green - [ Test 3 至少含 1 個英文字母(大寫/小寫) ]</h4>\n<ul>\n<li><code>validate.js</code> 新增檢查英文字母的正則</li>\n<li><code>yarn test</code> =&gt; <strong>pass test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.js</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">validatePassword</span> = (<span class=\"hljs-params\">password</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> validLength = password.<span class=\"hljs-property\">length</span> &gt;= <span class=\"hljs-number\">8</span>;\n  <span class=\"hljs-keyword\">const</span> containsNumber = <span class=\"hljs-regexp\">/[0-9]/g</span>.<span class=\"hljs-title function_\">test</span>(password);\n  <span class=\"hljs-keyword\">const</span> containsLetter = <span class=\"hljs-regexp\">/[a-z]/g</span>.<span class=\"hljs-title function_\">test</span>(password);\n  <span class=\"hljs-keyword\">return</span> validLength &amp;&amp; containsNumber &amp;&amp; containsLetter;\n};\n</code></pre>\n<p><img src=\"https://i.imgur.com/Qd1snYu.png\" alt=\"TDD Green 3-1\" /></p>\n<p>因為英文字母這邊當初條件有列，要可接受大小寫，我們可以多增加幾個 assert，以確保需求條件都滿足。</p>\n<ul>\n<li>在 <code>validate.spec.js</code> 中，新增內有含以<strong>小寫英文字母的參數</strong>的測試</li>\n<li><code>yarn test</code> =&gt; <strong>pass test</strong></li>\n</ul>\n<p>目前程式可接受小寫英文字母輸入的，接著試另一個大寫英文字母的測試案例。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.spec.js</span>\n\n<span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;contains at least one letter&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;123456789&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;a123456789&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>);\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/SX3sNXK.png\" alt=\"TDD Green 3-2\" /></p>\n<h4>Red - [ Test 3 至少含 1 個英文字母(大寫/小寫) ]</h4>\n<ul>\n<li>在 <code>validate.spec.js</code> 中，新增內有含以<strong>大寫英文字母的參數</strong>的測試</li>\n<li><code>yarn test</code> =&gt; <strong>fail test</strong></li>\n</ul>\n<p>這是測試居然失敗！這時候就會回頭檢視功能程式，是不是沒考慮到英文字母為大寫的情境。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.spec.js</span>\n\n<span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;contains at least one letter&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;123456789&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;a123456789&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;A123456789&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>);\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/1FpS334.png\" alt=\"TDD Red 3-2\" /></p>\n<h4>Green - [ Test 3 至少含 1 個英文字母(大寫/小寫) ]</h4>\n<ul>\n<li><code>validate.js</code> 補上檢查大寫英文字母的正則</li>\n<li><code>yarn test</code> =&gt; <strong>pass test</strong></li>\n</ul>\n<p>驗證通過後，以 TDD 流程開發的密碼驗證函式就完成了 👏</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.js</span>\n\n<span class=\"hljs-keyword\">const</span> containsLetter = <span class=\"hljs-regexp\">/[aA-zZ]/g</span>.<span class=\"hljs-title function_\">test</span>(password);\n</code></pre>\n<p><img src=\"https://i.imgur.com/V3G0JDb.png\" alt=\"TDD Green 3-3\" /></p>\n<h3>Final Code</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.js</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">validatePassword</span> = (<span class=\"hljs-params\">password</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> validLength = password.<span class=\"hljs-property\">length</span> &gt;= <span class=\"hljs-number\">8</span>;\n  <span class=\"hljs-keyword\">const</span> containsNumber = <span class=\"hljs-regexp\">/[0-9]/g</span>.<span class=\"hljs-title function_\">test</span>(password);\n  <span class=\"hljs-keyword\">const</span> containsLetter = <span class=\"hljs-regexp\">/[aA-zZ]/g</span>.<span class=\"hljs-title function_\">test</span>(password);\n\n  <span class=\"hljs-keyword\">return</span> validLength &amp;&amp; containsNumber &amp;&amp; containsLetter;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> validatePassword;\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// validate.spec.js</span>\n\n<span class=\"hljs-keyword\">import</span> validatePassword <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./validate&quot;</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;validatePassword&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-comment\">// 1. 至少 8 碼</span>\n  <span class=\"hljs-comment\">// 2. 至少含 1 個數字</span>\n  <span class=\"hljs-comment\">// 3. 至少含 1 個英文字母(大寫/小寫)</span>\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;return false given an empty string&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;at least 8 characters long&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;a12345678&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;contains at least one number&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;ABCDEFGHIJ&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;contains at least one letter&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;123456789&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;a123456789&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">validatePassword</span>(<span class=\"hljs-string\">&quot;A123456789&quot;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>);\n  });\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/d3bAwPZ.png\" alt=\"Final Code - Function\" /></p>\n<ul>\n<li>技術使用： vue-test-utils + Jest</li>\n<li>範例來源：<a  href=\"https://www.youtube.com/watch?v=89Pl2Uok8xc\" target=\"_blank\" rel=\"noreferrer noopener\">TDD in JavaScript | Test Driven Development</a></li>\n</ul>\n<h2 id=\"範例 - Dom\" title=\"範例 - Dom\"><a href=\"#範例 - Dom\">範例 - Dom</a></h2>\n<h3>Target Dom - rating stars</h3>\n<p>一個顯示星等的 component，下方有顯示其分數。</p>\n<p><strong>需求清單</strong>：</p>\n<ul>\n<li>Test 1 - 五個星星</li>\n<li>Test 2 - 星星 active 數量</li>\n<li>Test 3 - 顯示的數字</li>\n</ul>\n<p><img src=\"https://i.imgur.com/ILwofUB.png\" alt=\"\" /></p>\n<h3>Fixture</h3>\n<p>準備好組件<code>(Rating.vue)</code>和測試檔案<code>(Rating.spec.js)</code>，並寫一些測試的起手式 code。</p>\n<blockquote>\n<p><strong><code>wrapper</code></strong>：代表 Dom<br />\n<strong><code>beforeEach</code></strong>：每次測試時都會執行，可在此階段建立測試資料、Dom<br />\n<strong><code>afterEach</code></strong>：每次測試後都會執行，可在此階段移除測試資料、Dom</p>\n<p>上面方法都是 <strong>Jest</strong> 提供的，可以參考 <a  href=\"https://jestjs.io/docs/setup-teardown\" target=\"_blank\" rel=\"noreferrer noopener\">Jest - Setup and Teardown</a>。</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"language-xml\">// Rating.vue\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><span class=\"language-javascript\">&lt;/script&gt;\n</span></code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Rating.spec.js</span>\n\n<span class=\"hljs-keyword\">import</span> { shallowMount } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@vue/test-utils&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Rating</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@/components/Rating.vue&quot;</span>;\n\n<span class=\"hljs-keyword\">let</span> wrapper = <span class=\"hljs-literal\">null</span>;\n\n<span class=\"hljs-comment\">// mount component before each test</span>\n<span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  wrapper = <span class=\"hljs-title function_\">shallowMount</span>(<span class=\"hljs-title class_\">Rating</span>);\n});\n\n<span class=\"hljs-comment\">// destroy component after each test</span>\n<span class=\"hljs-title function_\">afterEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  wrapper.<span class=\"hljs-title function_\">destroy</span>();\n});\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;Rating&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;renders the stars&quot;</span>,<span class=\"hljs-function\">() =&gt;</span> {})\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/HLiP41E.png\" alt=\"TDD Vue\" /></p>\n<h3>TDD cycle</h3>\n<h4>Red - [ Test 1 五個星星 ]</h4>\n<ul>\n<li>在 <code>Rating.spec.js</code> 中，新增有 <strong>className <code>.star</code> 數量要有五個</strong>的測試。</li>\n<li><code>yarn test</code> =&gt; <strong>fail test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Rating.spec.js</span>\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;Rating&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;renders the stars&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> stars = wrapper.<span class=\"hljs-title function_\">findAll</span>(<span class=\"hljs-string\">&quot;.star&quot;</span>);\n    <span class=\"hljs-title function_\">expect</span>(stars.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">5</span>);\n  });\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/acGeVie.png\" alt=\"TDD Vue Red\" /></p>\n<h4>Green - [ Test 1 五個星星 ]</h4>\n<ul>\n<li>新增無腦解 <code>&lt;li class=&quot;star&quot;&gt;</code> *5</li>\n<li><code>yarn test</code> =&gt; <strong>pass test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"language-xml\">// Rating.vue\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;star&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;star&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;star&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;star&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;star&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</span></code></pre>\n<p><img src=\"https://i.imgur.com/QsneYEm.png\" alt=\"TDD Vue Green\" /></p>\n<h4>Refactor - [ Test 1 五個星星 ]</h4>\n<p>如果今天需求改成要 10 顆星星呢？再複製五個 <code>&lt;li&gt;</code> 貼上？那實在太對不起工程師這職業了，所以我們要把這段 hard code 重構一下，讓最大星星數量由外面當作 <code>props</code> 傳進來。</p>\n<ul>\n<li><code>Rating.vue</code> 新增 <code>props</code> 參數 <code>maxStars</code></li>\n<li><code>Rating.vue</code> 中的 <code>&lt;li&gt;</code> 用 <code>v-for</code> 改寫</li>\n<li><code>Rating.spec.js</code> 再 Mount 時傳入 <code>propsData</code></li>\n<li><code>yarn test</code> =&gt; <strong>pass test</strong></li>\n</ul>\n<p>保持通過測試狀態！Awesome！第一個 <code>TDD cycle</code> 就完成了👏<br />\n接下來就再依照需求清單，進行下一個 <code>Red-Green-Refactor</code>。</p>\n<pre class=\"hljs\"><code><span class=\"language-xml\">// Rating.vue\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;star in maxStars&quot;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&quot;star&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;star&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><span class=\"language-javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">maxStars</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Number</span>,\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>\n    }\n  }\n};\n</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</span></code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Rating.spec.js</span>\n\n<span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  wrapper = <span class=\"hljs-title function_\">shallowMount</span>(<span class=\"hljs-title class_\">Rating</span>, {\n    <span class=\"hljs-attr\">propsData</span>: {\n      <span class=\"hljs-attr\">maxStars</span>: <span class=\"hljs-number\">5</span>\n    }\n  });\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/G3dPayZ.png\" alt=\"TDD Vue Refactor\" /></p>\n<p>&lt;br/&gt;</p>\n<hr />\n<p>&lt;br/&gt;</p>\n<h4>Red - [ Test 2 星星 active 數量 ]</h4>\n<ul>\n<li>在 <code>Rating.spec.js</code> 中，新增 3 個 <code>active</code> 星星數的測試</li>\n<li><code>yarn test</code> =&gt; <strong>fail test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Rating.spec.js</span>\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;Rating&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;renders the stars&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> stars = wrapper.<span class=\"hljs-title function_\">findAll</span>(<span class=\"hljs-string\">&quot;.star&quot;</span>);\n    <span class=\"hljs-title function_\">expect</span>(stars.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">5</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;renders the active stars&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> active = wrapper.<span class=\"hljs-title function_\">findAll</span>(<span class=\"hljs-string\">&quot;.star.active&quot;</span>);\n    <span class=\"hljs-title function_\">expect</span>(active.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">3</span>);\n  });\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/Xnl9kC5.png\" alt=\"TDD Vue Red 2\" /></p>\n<h4>Green - [ Test 2 星星 active 數量 ]</h4>\n<ul>\n<li>在 <code>Rating.vue</code> 中，className 條件判斷寫 <code>star &lt;= 3</code> 時，className 會自動新增 <code>active</code></li>\n<li><code>yarn test</code> =&gt; <strong>pass test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"language-xml\">// Rating.vue\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>\n        <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;star in maxStars&quot;</span>\n        <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&quot;star&quot;</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;star&quot;</span>\n        <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;{\n          active: star &lt;= 3\n        }&quot;</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</span></code></pre>\n<p><img src=\"https://i.imgur.com/yuHnCaW.png\" alt=\"TDD Vue Green 2\" /></p>\n<h4>Refactor - [ Test 2 星星 active 數量 ]</h4>\n<p>active 星數，一般是由使用者或後端產生的，所以一樣要改成由外面用 props 方式傳入。</p>\n<ul>\n<li>在 <code>Rating.vue</code>、<code>Rating.spec.js</code> 新增 <code>props</code> 參數 <code>initGrade</code></li>\n<li>className 的條件判斷，改用參數</li>\n<li><code>yarn test</code> =&gt; <strong>pass test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"language-xml\">// Rating.vue\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>\n        <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;star in maxStars&quot;</span>\n        <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&quot;star&quot;</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;star&quot;</span>\n        <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;{\n          active: star &lt;= initGrade\n        }&quot;</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><span class=\"language-javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">maxStars</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Number</span>,\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>\n    },\n    <span class=\"hljs-attr\">initGrade</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Number</span>,\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>\n    }\n  }\n};\n</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</span></code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Rating.spec.js</span>\n\n<span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  wrapper = <span class=\"hljs-title function_\">shallowMount</span>(<span class=\"hljs-title class_\">Rating</span>, {\n    <span class=\"hljs-attr\">propsData</span>: {\n      <span class=\"hljs-attr\">maxStars</span>: <span class=\"hljs-number\">5</span>,\n      <span class=\"hljs-attr\">initGrade</span>: <span class=\"hljs-number\">3</span>\n    }\n  });\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/7Z3c3bm.png\" alt=\"TDD Vue Refactor 2\" /></p>\n<hr />\n<h4>Red - [Test 3 顯示的數字]</h4>\n<p>最後一個測試了，下方需顯示當前 active 星數和全部星數的資訊。</p>\n<ul>\n<li>在 <code>Rating.spec.js</code> 中新增測試，條件為一個 <code>.summary</code> 的 dom，內容文字為前星數的資訊</li>\n<li><code>yarn test</code> =&gt; <strong>fail test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Rating.spec.js</span>\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;Rating&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;renders the stars&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> stars = wrapper.<span class=\"hljs-title function_\">findAll</span>(<span class=\"hljs-string\">&quot;.star&quot;</span>);\n    <span class=\"hljs-title function_\">expect</span>(stars.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">5</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;renders the active stars&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> active = wrapper.<span class=\"hljs-title function_\">findAll</span>(<span class=\"hljs-string\">&quot;.star.active&quot;</span>);\n    <span class=\"hljs-title function_\">expect</span>(active.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">3</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;renders a summary&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> summary = wrapper.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&quot;.summary&quot;</span>);\n    <span class=\"hljs-title function_\">expect</span>(summary.<span class=\"hljs-title function_\">text</span>()).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&quot;2 of 5&quot;</span>);\n  });\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/svpVyJT.png\" alt=\"TDD Vue Red 3\" /></p>\n<blockquote>\n<p>[vue-test-utils]: find did not return .summary, cannot call text() on empty Wrapper[color=#ff0000]</p>\n<p>意即在目前組件內找不到 <code>.summary</code> 的 dom，無法呼叫 text() 方法。</p>\n</blockquote>\n<h4>Green - [ Test 3 顯示的數字 ]</h4>\n<ul>\n<li>先新增 <code>&lt;div class=&quot;summary&quot; /&gt;</code></li>\n<li><code>yarn test</code> =&gt; <strong>fail test</strong>，雖然還沒通過測試，但這邊也可以發現 error message 已經改變了，可以找到 <code>.summary</code>，只是文字訊息不對。</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"language-xml\">// Rating.vue\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>\n        <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;star in maxStars&quot;</span>\n        <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&quot;star&quot;</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;star&quot;</span>\n        <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;{\n          active: star &lt;= initGrade\n        }&quot;</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;summary&quot;</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</span></code></pre>\n<p><img src=\"https://i.imgur.com/kdrV4eJ.png\" alt=\"TDD Vue Green - 1\" /></p>\n<blockquote>\n<p>Expected: “2 of 5”<br />\nReceived: “”[color=#ff0000]</p>\n</blockquote>\n<ul>\n<li>在 <code>Rating.vue</code> 直接把文字寫跟測試案例一模一樣 <code>3 of 5</code></li>\n<li><code>yarn test</code> =&gt; <strong>pass test</strong></li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"language-xml\">// Rating.vue\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>\n        <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;star in maxStars&quot;</span>\n        <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&quot;star&quot;</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;star&quot;</span>\n        <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;{\n          active: star &lt;= initGrade\n        }&quot;</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;summary&quot;</span>&gt;</span>3 of 5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</span></code></pre>\n<p><img src=\"https://i.imgur.com/nQrsIdq.png\" alt=\"TDD Vue Green - 2\" /></p>\n<h4>Refactor - [ Test 3 顯示的數字 ]</h4>\n<ul>\n<li><code>.summary</code> 內的文字顯示改用 <code>props</code> 參數</li>\n<li><code>yarn test</code> =&gt; <strong>pass test</strong></li>\n</ul>\n<p>Bravo ! 整個 TDD 流程完成了！</p>\n<pre class=\"hljs\"><code><span class=\"language-xml\">// Rating.vue\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>\n        <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;star in maxStars&quot;</span>\n        <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&quot;star&quot;</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;star&quot;</span>\n        <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;{\n          active: star &lt;= initGrade\n        }&quot;</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;summary&quot;</span>&gt;</span>{{ initGrade }} of {{ maxStars }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</span></code></pre>\n<p><img src=\"https://i.imgur.com/4iXT529.png\" alt=\"TDD Vue Refactor\" /></p>\n<h3>Final Code</h3>\n<pre class=\"hljs\"><code><span class=\"language-xml\">// Rating.vue\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>\n        <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;star in maxStars&quot;</span>\n        <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&quot;star&quot;</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;star&quot;</span>\n        <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;{\n          active: star &lt;= initGrade\n        }&quot;</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;summary&quot;</span>&gt;</span>{{ initGrade }} of {{ maxStars }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><span class=\"language-javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">maxStars</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Number</span>,\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>\n    },\n    <span class=\"hljs-attr\">initGrade</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Number</span>,\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">0</span>\n    }\n  }\n};\n</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</span></code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Rating.spec.js</span>\n<span class=\"hljs-keyword\">import</span> { shallowMount } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@vue/test-utils&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Rating</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@/components/Rating.vue&quot;</span>;\n\n<span class=\"hljs-keyword\">let</span> wrapper = <span class=\"hljs-literal\">null</span>;\n\n<span class=\"hljs-comment\">// mount component before each test</span>\n<span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  wrapper = <span class=\"hljs-title function_\">shallowMount</span>(<span class=\"hljs-title class_\">Rating</span>, {\n    <span class=\"hljs-attr\">propsData</span>: {\n      <span class=\"hljs-attr\">maxStars</span>: <span class=\"hljs-number\">5</span>,\n      <span class=\"hljs-attr\">initGrade</span>: <span class=\"hljs-number\">3</span>\n    }\n  });\n});\n\n<span class=\"hljs-comment\">// destroy component after each test</span>\n<span class=\"hljs-title function_\">afterEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  wrapper.<span class=\"hljs-title function_\">destroy</span>();\n});\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;Rating&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;renders the stars&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> stars = wrapper.<span class=\"hljs-title function_\">findAll</span>(<span class=\"hljs-string\">&quot;.star&quot;</span>);\n    <span class=\"hljs-title function_\">expect</span>(stars.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">5</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;renders the active stars&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> active = wrapper.<span class=\"hljs-title function_\">findAll</span>(<span class=\"hljs-string\">&quot;.star.active&quot;</span>);\n    <span class=\"hljs-title function_\">expect</span>(active.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">3</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;renders a summary&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> summary = wrapper.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&quot;.summary&quot;</span>);\n    <span class=\"hljs-title function_\">expect</span>(summary.<span class=\"hljs-title function_\">text</span>()).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&quot;3 of 5&quot;</span>);\n  });\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/LEanr6L.png\" alt=\"TDD Result\" /></p>\n<ul>\n<li>技術使用： vue-test-utils + Jest</li>\n</ul>\n<hr />\n<h2 id=\"參考資料\" title=\"參考資料\"><a href=\"#參考資料\">參考資料</a></h2>\n<ul>\n<li>範例來源：<a  href=\"https://www.youtube.com/watch?v=DD1fEhcEzY8\" target=\"_blank\" rel=\"noreferrer noopener\">Test driven development with Vue.js by Sarah Dayan</a></li>\n</ul>\n<h6>tags: <code>test</code>、<code>TDD</code></h6>\n","toc":{"title":"手把手一起 TDD","subtitles":["TDD Flow","範例 - Function","範例 - Dom","參考資料"]}}