{"info":{"title":"富文本編輯器 - Braft Editor","fileName":"braft-editor","description":"Braft Editor 踩坑記，先說結論，可以考慮別的富文本編輯器套件。","createdAt":"2024-05-17T00:00:00.000Z","updatedAt":"2024-05-17T00:00:00.000Z","tags":["braft-editor","draftjs","rich text editor"]},"content":"<h6>tags: <code>braft-editor</code>、<code>draftjs</code>、<code>rich text editor</code></h6>\n<h1 id=\"富文本編輯器 - Braft Editor\" title=\"富文本編輯器 - Braft Editor\">富文本編輯器 - Braft Editor</h1>\n<p>基於 <a  href=\"https://draftjs.org/\" target=\"_blank\" rel=\"noreferrer noopener\">Draft.js</a> 開發，可以到 <a  href=\"https://braft.margox.cn/\" target=\"_blank\" rel=\"noreferrer noopener\">Braft Editor</a> 官網體驗一下功能，有別於 Draft 非常裸，功能很多需自己實現，這款算是真的即開即用，官方 API 文件也寫得不錯，對於時程有壓力或者是只需要基本功能的編輯器的話，這套滿推薦的。</p>\n<h2 id=\"使用\" title=\"使用\"><a href=\"#使用\">使用</a></h2>\n<h3>Step 1. 安裝套件</h3>\n<pre class=\"hljs\"><code>yarn add braft-editor\n</code></pre>\n<h3>Step 2. 引入編輯器和樣式</h3>\n<p>可以依據需要的功能做篩選和顯示，可參考<a  href=\"https://www.yuque.com/braft-editor/be/gz44tn\" target=\"_blank\" rel=\"noreferrer noopener\">官方文件教學</a></p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Editor.tsx</span>\n\n<span class=\"hljs-comment\">// 引入編輯器樣式</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;braft-editor/dist/index.css&quot;</span>;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">BraftEditor</span>, { <span class=\"hljs-title class_\">EditorState</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;braft-editor&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Editor</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> [editorState, setEditorState] =\n    useState &lt; <span class=\"hljs-title class_\">EditorState</span> &gt; <span class=\"hljs-title class_\">BraftEditor</span>.<span class=\"hljs-title function_\">createEditorState</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BraftEditor</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{editorState}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setEditorState}</span>\n      <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;# braft editor&quot;</span>\n      <span class=\"hljs-attr\">language</span>=<span class=\"hljs-string\">&quot;zh-hant&quot;</span>\n      <span class=\"hljs-attr\">stripPastedStyles</span>=<span class=\"hljs-string\">{true}</span>\n    /&gt;</span></span>\n  );\n};\n</code></pre>\n<p><img src=\"https://i.imgur.com/Ahfgtlo.png\" alt=\"\" /></p>\n<h2 id=\"踩坑\" title=\"踩坑\"><a href=\"#踩坑\">踩坑</a></h2>\n<p>針對環境和 <code>braft-editor</code> 套件的坑，分別做紀錄下來:</p>\n<h3>1. 組件使用問題 - Braft Editor</h3>\n<h4>- 繁體翻譯不完全</h4>\n<p>為了解決繁體翻譯的詞彙不達意和媒體庫沒支援到繁體問題，可以新增語言翻譯設定檔，搭配 Braft Editor 提供的 <code>language</code> API 傳入設定檔。</p>\n<blockquote>\n<p><a  href=\"https://github.com/margox/braft-editor/blob/master/src/languages/zh-hant.js\" target=\"_blank\" rel=\"noreferrer noopener\">編輯器 (braft-editor)</a> 和 <a  href=\"https://github.com/margox/braft-finder/blob/master/src/languages/zh.js\" target=\"_blank\" rel=\"noreferrer noopener\">媒體庫 (braft-finder)</a> 語言設定檔是不同的，自己的 <code>languageConfig</code> 需同時包含這個兩個所需的設定檔資料。</p>\n<p><code>braft-finder</code> 雖然 GitHub 看起來有繁體設定檔案，但不知道為什麼沒吃到設定，可以參考我的 <code>languageConfig</code>，有順利解決繁體的問題！</p>\n</blockquote>\n<br/>\n<pre class=\"hljs\"><code>&lt;<span class=\"hljs-title class_\">BraftEditor</span>\n  ...\n  language={<span class=\"hljs-function\">() =&gt;</span> languageConfig}\n/&gt;\n</code></pre>\n<p>改完後順利顯示熟悉的繁體～ 👏</p>\n<p><img src=\"https://i.imgur.com/QsNg5A0.png\" alt=\"繁體 bug\" /></p>\n<h4>- React Warning</h4>\n<p>控制台會有 <code>react_devtools_backend.js:4061 Warning: findDOMNode is deprecated in StrictMode.</code> 的警告，目前無解，有看到相關 <a  href=\"https://github.com/margox/braft-editor/search?q=componentWillMount&amp;type=issues\" target=\"_blank\" rel=\"noreferrer noopener\">issues 討論</a>，尚未被 close，待作者維護更新 😢</p>\n<p><img src=\"https://i.imgur.com/VhNMJDw.png\" alt=\"React Warning\" /></p>\n<br/>\n<h3>工具問題 - Vite</h3>\n<p>如果有使用 Vite 打包工具來開發，會遇到 <code>Uncaught ReferenceError: global is not defined</code> 的問題，可以在 <code>vite.config.ts</code> 定義 global</p>\n<p><img src=\"https://i.imgur.com/ukH6Mbr.png\" alt=\"vite global\" /></p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// vite.config.ts</span>\n\n<span class=\"hljs-comment\">// https://github.com/vitejs/vite/discussions/3859</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>({\n  ...,\n  <span class=\"hljs-attr\">define</span>: {\n    <span class=\"hljs-attr\">global</span>: <span class=\"hljs-string\">&quot;window&quot;</span>\n  }\n});\n</code></pre>\n<br/>\n<h3>2. 型別問題 - TypeScript</h3>\n<p>遇到 <code>Cannot find module 'braft-utils' or its corresponding type declarations.</code>，需自行為 <code>braft-utils</code> 新增型別聲明檔 <code>(*.d.ts)</code></p>\n<p><img src=\"https://i.imgur.com/LQQKnta.png\" alt=\"editor.d.ts\" /></p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// editor.d.ts</span>\n\n<span class=\"hljs-comment\">// https://chocolate.blog.csdn.net/article/details/120787808</span>\n<span class=\"hljs-keyword\">declare</span> <span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">&quot;braft-utils&quot;</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ContentUtils</span>: <span class=\"hljs-built_in\">any</span>;\n  <span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">ContentUtils</span> };\n}\n</code></pre>\n<br/>\n<h3>3. 環境問題 - NextJS</h3>\n<p>正常引入 <code>BraftEditor</code>，因為 SSR 關係，同時會 Server 和 Client 環境，在 Server 底下是沒有 window，所以會出現 <code>window is not defined</code>。</p>\n<p><img src=\"https://i.imgur.com/mml10Me.png\" alt=\"ssr error\" /></p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Editor.tsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">BraftEditor</span>, { <span class=\"hljs-title class_\">EditorState</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;braft-editor&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Editor</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> [editorState, setEditorState] =  useState&lt;<span class=\"hljs-title class_\">EditorState</span>&gt;(<span class=\"hljs-title class_\">BraftEditor</span>.<span class=\"hljs-title function_\">createEditorState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>))\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BraftEditor</span> <span class=\"hljs-attr\">...</span>/&gt;</span></span>\n  )\n}\n</code></pre>\n<br/>\n<p>一開始先試 <code>if (typeof window !== &quot;undefined&quot;)</code> 想繞開 Server，但依舊無效，放棄這條路。</p>\n<p>第二次嘗試把 <code>BraftEditor</code> 用 dynamic import 方式，延遲載入 <code>&lt;BraftEditor /&gt;</code> component，解決了 window 的 error，但得到了另一個 error <code>TypeError: BraftEditor.createEditorState is not a function</code>。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">BraftEditor</span> = <span class=\"hljs-title function_\">dynamic</span>(<span class=\"hljs-title function_\">import</span>(<span class=\"hljs-string\">&quot;../components/Editor&quot;</span>), {\n  <span class=\"hljs-attr\">ssr</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Loading ...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n});\n</code></pre>\n<p><img src=\"https://i.imgur.com/SPOb4sT.png\" alt=\"dynamic error\" /></p>\n<br/>\n<p>這是為什麼？把滑鼠 hover 到 <code>BraftEditor</code> 可以看到 <code>const BraftEditor: ComponentType&lt;Props&gt;</code>，此時 <code>BraftEditor</code> 是代表一個 Component，而非原本 Class，導致在 useState 初始化時，無法使用 <code>createEditorState</code> 這個由 Class 提供的方法。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// BraftEditor 是 Class 物件，擁有完整功能</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">BraftEditor</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;braft-editor&quot;</span>;\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// BraftEditor 只是 component</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">BraftEditor</span> = <span class=\"hljs-title function_\">dynamic</span>(<span class=\"hljs-title function_\">import</span>(<span class=\"hljs-string\">&#x27;../components/Editor&#x27;</span>), {\n  <span class=\"hljs-attr\">ssr</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Loading ...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n})\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Editor</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-comment\">// BraftEditor 不存在 createEditorState 方法</span>\n  <span class=\"hljs-keyword\">const</span> [editorState, setEditorState] =  useState&lt;<span class=\"hljs-title class_\">EditorState</span>&gt;(<span class=\"hljs-title class_\">BraftEditor</span>.<span class=\"hljs-title function_\">createEditorState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>))\n  ...\n}\n</code></pre>\n<br/>\n<p>最後解決方法是，在 <code>Editor.tsx</code> 是用 static import，父層使用 dynamic import，既可以繞過 Server，也同時讓 <code>BraftEditor</code> 擁有完整 Class 功能和兼具 Component 的角色。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// index.tsx</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Editor</span> = <span class=\"hljs-title function_\">dynamic</span>(<span class=\"hljs-title function_\">import</span>(<span class=\"hljs-string\">&quot;../components/Editor&quot;</span>), {\n  <span class=\"hljs-attr\">ssr</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Loading ...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n});\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Home</span>: <span class=\"hljs-title class_\">NextPage</span> = <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> [text, setText] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Editor</span> /&gt;</span>\n      ...\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Editor.tsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">BraftEditor</span>, { <span class=\"hljs-title class_\">EditorState</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;braft-editor&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Editor</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> [editorState, setEditorState] = useState&lt;<span class=\"hljs-title class_\">EditorState</span>&gt;(\n    <span class=\"hljs-title class_\">BraftEditor</span>.<span class=\"hljs-title function_\">createEditorState</span>(<span class=\"hljs-string\">&quot;&quot;</span>)\n  );\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BraftEditor</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{editorState}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setEditorState}</span> /&gt;</span></span>;\n};\n</code></pre>\n<h2 id=\"總結\" title=\"總結\"><a href=\"#總結\">總結</a></h2>\n<h3><strong>優點：</strong></h3>\n<ol>\n<li>可針對原有功能 icon 客製化，icon 也可接受 JSX 格式</li>\n<li>客製化 Toolbar 功能選項，也支援擴充新功能</li>\n<li>支援多語系</li>\n<li>支援客製化 Toolbar 和編輯區 css</li>\n<li>同時可支援圖片/影片/音源上傳</li>\n</ol>\n<h3><strong>缺點</strong></h3>\n<ol>\n<li>Toolbar 位置無法自訂，與編輯區無法分離</li>\n<li>npm 最後一版更新是在 2019，看 issues 別人提到作者目前沒太多時間可以維護</li>\n<li>超連結、媒體庫的 Model 樣式無法自訂</li>\n<li>繁體翻譯與台灣慣用詞彙不同，媒體庫的 Model 沒支援到繁體翻譯</li>\n<li>如有使用到更進階開發功能，會使用 <code>braft-utils</code> 等套件，TypeScript 支援度不好</li>\n</ol>\n<p>針對後面兩點都有解決方案，但如果需要選擇有持續維護的套件就要慎入，或者主產品是編輯器的，強烈考慮使用 <a  href=\"https://lexical.dev/\" target=\"_blank\" rel=\"noreferrer noopener\">Lexical</a>，是 Facebook 開發維護的，或 <a  href=\"https://quilljs.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Quill.js</a>，目前兩個都有持續更新 👍。</p>\n<br/>\n<p>在 Survey 編輯器期間，發現這其實是一個大坑，主要是很多套件，距離上一次更新都很久了，但其實現在手機各平台版本、瀏覽器版本、前端框架版本一直在推陳出新，如果編輯器版本更新跟不上，簡直是場災難。</p>\n<br/>\n<p>當初選擇 <code>braft-editor</code> 是因為底層是用 <a  href=\"https://draftjs.org/\" target=\"_blank\" rel=\"noreferrer noopener\">Draft.js</a> 開發，包裝的功能也很完整，且想說如果 <code>braft-editor</code> 作者不維護的話，退一步還可以用 <a  href=\"https://draftjs.org/\" target=\"_blank\" rel=\"noreferrer noopener\">Draft.js</a> (Facebook 家的)寫出想要功能，這樣轉移的痛感會比較低，想不到不到一年，Facebook 直接放棄開發 <a  href=\"https://draftjs.org/\" target=\"_blank\" rel=\"noreferrer noopener\">Draft.js</a>，改推 <a  href=\"https://lexical.dev/\" target=\"_blank\" rel=\"noreferrer noopener\">Lexical</a>，人算不如天算！不過根據朋友從 <a  href=\"https://draftjs.org/\" target=\"_blank\" rel=\"noreferrer noopener\">Draft.js</a> 跳坑到 <a  href=\"https://lexical.dev/\" target=\"_blank\" rel=\"noreferrer noopener\">Lexical</a> 經驗分享，體驗上是給予高度讚賞的，推薦入坑。</p>\n","toc":{"title":"富文本編輯器 - Braft Editor","subtitles":["使用","踩坑","總結"]},"wordCount":1063}