{"info":{"title":"[Note] React Hooks 整理 (下)","fileName":"react-hooks-second","description":"內容為 useRef、useContext、useReducer 的整理。","createdAt":"2021-12-08T00:00:00.000Z","updatedAt":"2021-12-08T00:00:00.000Z","tags":["React","React Hooks"]},"content":"<h6>tags: <code>React</code>、<code>React Hooks</code></h6>\n<h1 id=\"[Note] React Hooks 整理 (下)\" title=\"[Note] React Hooks 整理 (下)\">[Note] React Hooks 整理 (下)</h1>\n<p>此篇是關於 <code>useRef</code>、<code>useContext</code>、<code>useReducer</code> 的介紹，其他 Hooks 可以參考上篇～</p>\n<br/>\n<table>\n<thead>\n<tr>\n<th>文章</th>\n<th>Hooks</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a  href=\"https://jenniesh.github.io/dev/React/react-hooks-first\" target=\"_blank\" rel=\"noreferrer noopener\">React Hooks 整理 (上)</a></td>\n<td>useState、useEffect、useLayoutEffect、useMemo、useCallback</td>\n</tr>\n<tr>\n<td><a  href=\"https://jenniesh.github.io/dev/React/react-hooks-second\" target=\"_blank\" rel=\"noreferrer noopener\">React Hooks 整理 (下)</a></td>\n<td>useRef、useContext、useReducer</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"useRef\" title=\"useRef\"><a href=\"#useRef\">useRef</a></h2>\n<h3>使用方法</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 語法： const refContainer = useRef(初始值);</span>\n\n<span class=\"hljs-keyword\">const</span> refCount = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-number\">0</span>);\n</code></pre>\n<h3>重點</h3>\n<ul>\n<li>回傳一個 ref object，相當於 <code>{current: value}</code>，每次 render 時都會回傳<strong>同一個的 ref object</strong>，在 component 的生命週期將保持不變</li>\n<li><code>.current</code> 值改變後，不會觸發重新 render</li>\n<li>使用情境：\n<ul>\n<li>取得 dom</li>\n<li>紀錄前一次 render 的資料</li>\n</ul>\n</li>\n</ul>\n<h3>範例</h3>\n<h4>情境一：取得 dom element</h4>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 點選按鈕後，input 框要 focus</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">TextBlock</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-comment\">// step 1: 宣告 inputEl 並使用 useRef</span>\n  <span class=\"hljs-keyword\">const</span> inputEl = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onButtonClick</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(inputEl.<span class=\"hljs-property\">current</span>); <span class=\"hljs-comment\">// &lt;input type=&quot;text&quot;&gt;</span>\n    inputEl.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">focus</span>();\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n      // step 2: 使用 ref 綁在想取得的 dom\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{inputEl}</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onButtonClick}</span>&gt;</span>Focus the input<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n  );\n};\n\n</code></pre>\n<br/>\n<h4>情境二：紀錄前一次 render 的值 e.g. 想計算出總共 render 幾次</h4>\n<ul>\n<li>使用 useState 🚫</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 錯誤示範(導致無窮迴圈)： 使用 useState</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Name</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> [name, setName] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n  <span class=\"hljs-keyword\">const</span> [renderCount, setRenderCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// 在 useEffect 使用 setRenderCount 更新 renderCount</span>\n    <span class=\"hljs-comment\">// 會造成無窮回圈： update state =&gt; compoment rerender =&gt; update state again =&gt; compoment rerender again =&gt; ..... =&gt; infinite loop</span>\n    <span class=\"hljs-title function_\">setRenderCount</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">prevCount</span> =&gt;</span> prevCount + <span class=\"hljs-number\">1</span>);\n  });\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{name}</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setName(e.target.value)} /&gt;\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>It has been rendered {renderCount} times<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n  );\n};\n</code></pre>\n<ul>\n<li>\n<p>使用 useRef</p>\n<p>利用 <code>.current</code> 值改變後，<strong>不會觸發重新 render</strong>，這一個特點，使用 <code>.current</code> 值來記錄和更新</p>\n</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 使用 useRef</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Name</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> [name, setName] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n  <span class=\"hljs-keyword\">const</span> renderCount = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// update state =&gt; compoment rerender =&gt; update renderCount.current</span>\n    renderCount.<span class=\"hljs-property\">current</span> += <span class=\"hljs-number\">1</span>;\n  },[name]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{name}</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setName(e.target.value)} /&gt;\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>It has been rendered {renderCount.current} times<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n  );\n};\n</code></pre>\n<p><img src=\"https://i.imgur.com/0XnVYcJ.gif\" alt=\"useRef\" /></p>\n<h2 id=\"useContext\" title=\"useContext\"><a href=\"#useContext\">useContext</a></h2>\n<h3>使用方法</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 語法： const value = useContext( 自訂的 Context );</span>\n\n<span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">MyContext</span>);\n</code></pre>\n<h3>重點</h3>\n<ul>\n<li>在 <code>MyContext</code> provider (<code>&lt;MyContext.Provider value={value}&gt;</code>)內的組件，都可以透過 <code>useContext</code> 取得 <code>MyContext</code> value 值</li>\n<li>可以跨組件取值，解決需要用 props 一層層傳值下去的問題<br />\n(組件 A ➡️ 組件 B ➡️ 組件 C，C 需要 A 傳入的 props，但 B 卻不需要 A 傳入的 props)</li>\n<li>呼叫 <code>useContext</code> 的組件會在 context 值更新時重新渲染</li>\n</ul>\n<h3>範例</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> initDarkThemeStatus = <span class=\"hljs-literal\">false</span>;\n<span class=\"hljs-comment\">// Step 1. 先 createContext</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ThemeContext</span> = <span class=\"hljs-title function_\">createContext</span>(initDarkThemeStatus);\n\n\n\n<span class=\"hljs-comment\">// Child Component</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Child</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-comment\">// Step 3. 在子組件使用 useContext，取得 value</span>\n  <span class=\"hljs-keyword\">const</span> darkTheme = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">ThemeContext</span>);\n  <span class=\"hljs-keyword\">const</span> theme = {\n    <span class=\"hljs-attr\">color</span>: darkTheme ? <span class=\"hljs-string\">&quot;white&quot;</span> : <span class=\"hljs-string\">&quot;black&quot;</span>,\n    <span class=\"hljs-attr\">backgroundColor</span>: darkTheme ? <span class=\"hljs-string\">&quot;black&quot;</span> : <span class=\"hljs-string\">&quot;white&quot;</span>\n  };\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{theme}</span>&gt;</span>Child Component<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n};\n\n\n\n<span class=\"hljs-comment\">// Parent Component</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Parent</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> [darkTheme, setDarkTheme] = <span class=\"hljs-title function_\">useState</span>(initDarkThemeStatus);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">toggleTheme</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-title function_\">setDarkTheme</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">prevDarkTheme</span> =&gt;</span> !prevDarkTheme);\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n      <span class=\"hljs-comment\">// Step 2. 在父組件使用 Provider，並傳入 value</span>\n     <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{darkTheme}</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleTheme}</span>&gt;</span>Toggle Theme<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> /&gt;</span>\n     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<h2 id=\"useReducer\" title=\"useReducer\"><a href=\"#useReducer\">useReducer</a></h2>\n<h3>使用方法</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 語法： const [state, dispatch] = useReducer(reducer, initialArg, init);</span>\n\n<span class=\"hljs-keyword\">const</span> [state, dispatch] = <span class=\"hljs-title function_\">useReducer</span>(reducer, { <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span> });\n</code></pre>\n<h3>重點</h3>\n<ul>\n<li>進階版的 <code>useState</code> (p.s. <a  href=\"https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L336\" target=\"_blank\" rel=\"noreferrer noopener\"><code>useState</code></a> 底層是用 <code>useReducer</code> 實現)</li>\n<li><code>dispatch =&gt; reducer =&gt; state</code>，集中在 <code>reducer</code> 執行 state 修改，組件內不直接對 state 操作</li>\n<li>reducer 與組件間傳參數：</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 組件 - 傳 name</span>\n<span class=\"hljs-title function_\">dispatch</span>({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-variable constant_\">ACTION</span>.<span class=\"hljs-property\">ADD_TODO</span>, <span class=\"hljs-attr\">payload</span>: { name }});\n\n<span class=\"hljs-comment\">// reducer - 接收 name</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">reducer</span> = (<span class=\"hljs-params\">state, action</span>) =&gt; {\n  <span class=\"hljs-keyword\">switch</span> (action.<span class=\"hljs-property\">type</span>) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable constant_\">ACTION</span>.<span class=\"hljs-property\">ADD_TODO</span>:\n      <span class=\"hljs-keyword\">return</span> [...state, <span class=\"hljs-title function_\">newTodo</span>(action.<span class=\"hljs-property\">payload</span>.<span class=\"hljs-property\">name</span>)];\n    ...,\n    <span class=\"hljs-attr\">default</span>:\n      <span class=\"hljs-keyword\">return</span> state;\n  }\n};\n</code></pre>\n<ul>\n<li>可傳入<a  href=\"https://zh-hant.reactjs.org/docs/hooks-reference.html#lazy-initialization\" target=\"_blank\" rel=\"noreferrer noopener\">第三個參數(function)</a>\n<ul>\n<li>計算初始 state 的邏輯提取到 reducer 外</li>\n<li>方便重置 state</li>\n</ul>\n</li>\n<li>適用<strong>複雜的 state 邏輯修改</strong>情境 e.g. 計算機可以使用加減乘除修改原先的值、同列表排序(更新時間、創建時間、名字 etc.)</li>\n</ul>\n<h3>範例</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Todos.jsx</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">ACTION</span> = {\n  <span class=\"hljs-attr\">ADD_TODO</span>: <span class=\"hljs-string\">&quot;add-todo&quot;</span>,\n  <span class=\"hljs-attr\">TOGGLE_TODO</span>: <span class=\"hljs-string\">&quot;toggle_todo&quot;</span>,\n  <span class=\"hljs-attr\">DELETE</span>: <span class=\"hljs-string\">&quot;delete-todo&quot;</span>\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">newTodo</span> = name =&gt; {\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>(), <span class=\"hljs-attr\">name</span>: name, <span class=\"hljs-attr\">complete</span>: <span class=\"hljs-literal\">false</span> };\n};\n\n<span class=\"hljs-comment\">// Step 2. 撰寫 reducer</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">reducer</span> = (<span class=\"hljs-params\">state, action</span>) =&gt; {\n  <span class=\"hljs-keyword\">switch</span> (action.<span class=\"hljs-property\">type</span>) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable constant_\">ACTION</span>.<span class=\"hljs-property\">ADD_TODO</span>:\n      <span class=\"hljs-keyword\">return</span> [...state, <span class=\"hljs-title function_\">newTodo</span>(action.<span class=\"hljs-property\">payload</span>.<span class=\"hljs-property\">name</span>)];\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable constant_\">ACTION</span>.<span class=\"hljs-property\">TOGGLE_TODO</span>:\n      <span class=\"hljs-keyword\">return</span> state.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">todo</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (todo.<span class=\"hljs-property\">id</span> === action.<span class=\"hljs-property\">payload</span>.<span class=\"hljs-property\">id</span>) <span class=\"hljs-keyword\">return</span> { ...todo, <span class=\"hljs-attr\">complete</span>: !todo.<span class=\"hljs-property\">complete</span> };\n        <span class=\"hljs-keyword\">return</span> todo;\n      });\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable constant_\">ACTION</span>.<span class=\"hljs-property\">DELETE</span>:\n      <span class=\"hljs-keyword\">return</span> state.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">todo</span> =&gt;</span> todo.<span class=\"hljs-property\">id</span> !== action.<span class=\"hljs-property\">payload</span>.<span class=\"hljs-property\">id</span>);\n    <span class=\"hljs-attr\">default</span>:\n      <span class=\"hljs-keyword\">return</span> state;\n  }\n};\n\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Todos</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-comment\">// Step 1. 使用 useReducer，並傳入初始值</span>\n  <span class=\"hljs-keyword\">const</span> [todos, dispatch] = <span class=\"hljs-title function_\">useReducer</span>(reducer, []);\n  <span class=\"hljs-keyword\">const</span> [name, setName] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSubmit</span> = e =&gt; {\n    e.<span class=\"hljs-title function_\">preventDefault</span>();\n    <span class=\"hljs-comment\">// Step 3. dispatch action</span>\n    <span class=\"hljs-title function_\">dispatch</span>({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-variable constant_\">ACTION</span>.<span class=\"hljs-property\">ADD_TODO</span>, <span class=\"hljs-attr\">payload</span>: { name } });\n    <span class=\"hljs-title function_\">setName</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleToggle</span> = id =&gt; {\n    <span class=\"hljs-title function_\">dispatch</span>({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-variable constant_\">ACTION</span>.<span class=\"hljs-property\">TOGGLE_TODO</span>, <span class=\"hljs-attr\">payload</span>: { id } });\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(todos);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleDelete</span> = id =&gt; {\n    <span class=\"hljs-title function_\">dispatch</span>({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-variable constant_\">ACTION</span>.<span class=\"hljs-property\">DELETE</span>, <span class=\"hljs-attr\">payload</span>: { id } });\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{handleSubmit}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{name}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =&gt;</span> setName(e.target.value)} /&gt;\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n\n      {todos.map(todo =&gt; (\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Todo</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{todo.id}</span> <span class=\"hljs-attr\">todo</span>=<span class=\"hljs-string\">{todo}</span> <span class=\"hljs-attr\">handleToggle</span>=<span class=\"hljs-string\">{handleToggle}</span> <span class=\"hljs-attr\">handleDelete</span>=<span class=\"hljs-string\">{handleDelete}</span> /&gt;</span>\n      ))}\n    <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n  );\n};\n\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Todo.jsx</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Todo</span> = (<span class=\"hljs-params\">{ todo, handleToggle, handleDelete }</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> <span class=\"hljs-attr\">todo.complete</span> ? &quot;<span class=\"hljs-attr\">green</span>&quot; <span class=\"hljs-attr\">:</span> &quot;<span class=\"hljs-attr\">red</span>&quot; }}&gt;</span>{todo.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> handleToggle(todo.id)}&gt;Toggle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> handleDelete(todo.id)}&gt;Delete<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<h2 id=\"參考資料\" title=\"參考資料\"><a href=\"#參考資料\">參考資料</a></h2>\n<ol>\n<li><a  href=\"https://reactjs.org/docs/getting-started.html\" target=\"_blank\" rel=\"noreferrer noopener\">React 官方文件</a></li>\n<li><a  href=\"https://www.youtube.com/playlist?list=PLZlA0Gpn_vH8EtggFGERCwMY5u5hOjf-h\" target=\"_blank\" rel=\"noreferrer noopener\">Web Dev Simplified - React Hooks</a></li>\n</ol>\n","toc":{"title":"[Note] React Hooks 整理 (下)","subtitles":["useRef","useContext","useReducer","參考資料"]}}